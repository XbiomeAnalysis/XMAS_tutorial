[["index.html", "Data analysis based on XMAS 2.0 package in microbiota data Chapter 1 Prerequisites 1.1 Preparing for the tutorial", " Data analysis based on XMAS 2.0 package in microbiota data Hua Zou 2022-06-17 Chapter 1 Prerequisites We provide the universal data analysis framework on microbial data for in-house use when you use XMAS 2.0, and some specific data analysis modules should be performed by yourself in a different way. 1.1 Preparing for the tutorial If you have no any background on microbiota data analysis, please go to the example of Chapter 13 to get familiar with the SOP of data analysis. Alternatively, you can also go to the following websites: 16s DataAnalysis template by XMAS 2.0 MGS DataAnalysis template by XMAS 2.0 This tutorial requires that the users should have basic knowledge on R language and statistics. If you are new to microbial research, we recommend the Statistical Analysis of Microbiome Data with R (Xia et al. 2018) as guide book. We suggest users using local laptop because our own server have not deployed XMAS 2.0 package yet. In addition, installing the following software before using XMAS 2.0. R 3.6.3 or later release Download link. Rstudio Desktop Download link. References "],["introduction.html", "Chapter 2 Introduction 2.1 Microbiome 2.2 Sequencing technology 2.3 The gut microbiome: Relationships with disease and opportunities for therapy 2.4 Data Analysis apply for discovering the potential microbial biomarkers 2.5 Book", " Chapter 2 Introduction 2.1 Microbiome Microbiota are the range of microorganisms that may be commensal, symbiotic, or pathogenic found in and on all multicellular organisms, including plants. Microbiota include bacteria, archaea, protists, fungi, and viruses, and have been found to be crucial for immunologic, hormonal, and metabolic homeostasis of their host. The term microbiome describes either the collective genomes of the microbes that reside in an ecological niche or within the microbes themselves. 2.2 Sequencing technology The next generation sequencing (NGS) technology have flourished the microbial research. More and more uncultured microbiota have been sequenced and identified, and their roles on host also have been investigated. According to the sequenced DNA parts, there are several methods to obtain the bacteria. 2.2.1 Amplicon sequencing It also named 16s sequencing, uses the V3/V4 of bacteria 16s rRNA to sequence the bacteria. The in-house 16s sequencing pipeline uses QIIME2 platform wrapped DADA2 algorithm to acquire the amplicon sequence variants which is the same meaning of OTUs (operational taxonomic units). 2.2.2 Whole genome shotgun sequencing It is also short for metagenomic sequencing, could detect the whole DNA of the microbial community. The in-house metagenomic sequencing pipeline uses the metaphlan2 or metaphlan3 algorithm which is based on marker genes of microbiome to obtain the microbial profiles. CAUTIONS: Both of two workflow have advantages and disadvantages, one of the disadvantages is that we can only detect or identify the annotated taxonomy by the reference database. 2.3 The gut microbiome: Relationships with disease and opportunities for therapy Here, we cited this article (Durack and Lynch 2019) to give users an abstract. Over the past decade, our view of human-associated microbes has expanded beyond that of a few species toward an appreciation of the diverse and niche-specialized microbial communities that develop in the human host with chronological age. The largest reservoir of microbes exists in the distal gastrointestinal tract, both in the lumen, where microbes facilitate primary and secondary metabolism, and on mucosal surfaces, where they interact with host immune cell populations. While local microbial-driven immunomodulation in the gut is well described, more recent studies have demonstrated a role for the gut microbiome in influencing remote organs and mucosal and hematopoietic immune function. Unsurprisingly, therefore, perturbation to the composition and function of the gut microbiota has been associated with chronic diseases ranging from gastrointestinal inflammatory and metabolic conditions to neurological, cardiovascular, and respiratory illnesses. Considerable effort is currently focused on understanding the natural history of microbiome development in humans in the context of health outcomes, in parallel with improving our knowledge of microbiome–host molecular interactions. These efforts ultimately aim to develop effective approaches to rehabilitate perturbed human microbial ecosystems as a means to restore health or prevent disease. This review details the role of the gut microbiome in modulating host health with a focus on immunomodulation and discusses strategies for manipulating the gut microbiome for the management or prevention of chronic inflammatory conditions. 2.4 Data Analysis apply for discovering the potential microbial biomarkers In this tutorial, we focus on differential analysis with the step-by-step procedures by using the R programming language. We also briefly introduce the concepts and principals of the statistical methods before the applications and give conclusions on the results. The following table shows more than 10 differential analysis methods: Tool(version) Input Normalization Transformation Distribution MicrobialData ALDEx2 (1.26.0) Counts None CLR Dirichlet-multinormial 16s limma voom (3.50.1) Counts/Relative None/TMM Log; Precision weighting Normal 16s/MGS mbzinb (0.2) Counts RLE None zero-inflated negative binomial 16s omnibus (0.2) Counts GMPR(Geometric Mean of Pairwise Ratios) None zero-inflated negative binomial 16s RAIDA (1.0) Counts None Log modified t-test 16s Wilcox(rare/CLR) Counts/Relative None None/CLR Non-parametric 16s/MGS LEfSe Rarefied Counts//Relative TSS None Non-parametric 16s/MGS t-test (rare) Counts//Relative None None Normal 16s/MGS metagenomeSeq (1.36.0) Counts CSS Log Zero-inflated (log) Normal 16s DESeq2 (1.34.0) Counts RLE None Negative binomial 16s edgeR (3.36.0) Counts RLE/TMM None Negative binomial 16s ANCOM-II (2.1) Counts/Relative None ALR Non-parametric 16s/MGS Corncob (0.2.0) Counts None None Beta-binomial 16s MaAslin2 (1.8.0) Counts/Relative abundance None/TSS AST Normal 16s/MGS We suggest you using the reasonable method to fit your own microbiota data. 2.5 Book This tutorial was organized according to the XMAS 2.0 functions. In the beginning three chapters, we specially provided the basic requirements of bioinformatics and overview on microbiota, and the installation of XMAS. In Chapter 4, we convert the results from in-house pipeline into phyloseq-class object for downstream data analysis. In Chapter 5 provided the functions to evaluate the data quality. In Chapter 6, we introduced the preprocessing methods on microbiota data before differential analysis. In Chapter 7 provided the alpha diversity analysis. In Chapter 8 provided the beta diversity analysis. In Chapter 9 provided the microbiota composition analysis. In Chapter 10 provided the core microbiota analysis. In Chapter 11 provided the differential analysis. In Chapter 12 provided the principals of the differential analysis methods. In Chapter 13 showed some functions for visualization. In Chapter 14 provided the examples by using XMAS 2.0 on microbiota data. References "],["material-in-this-tutorial.html", "Chapter 3 Material in this tutorial 3.1 Resources 3.2 Overview of the design of XMAS package 3.3 Future plan 3.4 Systematic Information", " Chapter 3 Material in this tutorial 3.1 Resources There are two resources in this tutorial. One is from in-house 16s standard pipeline and the other is from metaphlan2 workflow. All these data have been stored into XMAS 2.0. 3.1.1 DADA2 dada2 result from standardized_analytics_workflow_R_function. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt 3.1.2 Metaphlan2 The result of the in-house Metaphlan2/3 pipeline. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt 3.2 Overview of the design of XMAS package Figure 3.1: The Overview of the design of XMAS package XMAS 2.0 contains several modules, such as preprocessing, actions, methods and visualization. Furthermore, the extended parts of actions module give this package more flexible ability to add new parts. We also separate scripts into calculation and visualization parts by their names. The functions’ prefix with run is used for calculation, and the functions’ prefix with plot is used for visualization. 3.2.1 Description XMAS 2.0 is comprised of R functions for in-house use, including functions for statistical, functional, and visual analysis of microbiol data, and is still underdevelopment. Here, we provide the XMAS 2.0 releases and users can download it. 3.2.2 Installation of dependent packages Requiring the R-base version more than 3.6.3. Some of the dependencies are uploaded to CRAN or bioconductor website, but others, which are underdevelopment are only obtained from github website. Dependencies version (optional but not required): Biostrings (&gt;= 2.22.0) BiocGenerics (&gt;= 0.32.0) phyloseq (&gt;= 1.30.0) forcats (&gt;= 0.5.1) stringr (&gt;= 1.4.0) ggplot2 (&gt;= 3.3.5) readr (&gt;= 1.4.0) ALDEx2 (&gt;= 1.18.0) dplyr (&gt;= 1.0.8) tibble (&gt;= 3.1.6) DT (&gt;= 0.18) purrr (&gt;= 0.3.4) metagenomeSeq (&gt;= 1.28.0) edgeR (&gt;= 3.28.1) DESeq2 (&gt;= 1.26.0) limma (&gt;= 3.42.2) mbzinb (&gt;= 0.2) pscl (&gt;= 1.5.5) methods (&gt;= 3.6.3) matrixStats (&gt;= 0.58.0) RAIDA (&gt;= 1.0) compositions (&gt;= 2.0-4) vegan (&gt;= 2.5-7) coin (&gt;= 1.4-2) SummarizedExperiment (&gt;= 1.16.1) MASS (&gt;= 7.3-53.1) Biobase (&gt;= 2.46.0) nlme (&gt;= 3.1-152) tidyr (&gt;= 1.1.3) corncob (&gt;= 0.2.0) Maaslin2 (&gt;= 1.7.3) ggrepel (&gt;= 0.9.1) ggpubr (&gt;= 0.4.0) ggalluvial (&gt;= 0.12.3) Hmisc (&gt;= 4.5-0) RColorBrewer (&gt;= 1.1-2) umap (&gt;= 0.2.8.0) ape (&gt;= 5.6-2) cowplot (&gt;= 1.1.1) Rtsne (&gt;= 0.15) ade4 (&gt;= 1.7-18) scales (&gt;= 1.1.1) ggVennDiagram (&gt;= 1.2.1) impute (&gt;= 1.68.0) pheatmap (&gt;= 1.0.12) There are two methods to install the aforementioned packages. 3.2.2.1 Packages in CRAN &amp; Bioconductor install.packages(&quot;pacman&quot;) library(pacman) pacman::p_load(Biostrings, BiocGenerics, phyloseq, forcats, stringr, ggplot2, readr, ALDEx2, dplyr, tibble, DT, purrr, metagenomeSeq, stats, edgeR, DESeq2, methods, limma, pscl, matrixStats, compositions, vegan, coin, SummarizedExperiment, MASS, Biobase, nlme, tidyr, Maaslin2, ggrepel, ggpubr, ggalluvial, Hmisc, umap, Rtsne, ape, cowplot, scales, ade4, ggVennDiagram, impute, pheatmap) 3.2.2.2 Packages in github # Step 1: Install devtools if (!requireNamespace(c(&quot;remotes&quot;, &quot;devtools&quot;), quietly=TRUE)) { install.packages(c(&quot;devtools&quot;, &quot;remotes&quot;)) } library(devtools) #library(remotes) # Step 2: install corncob package devtools::install_github(&quot;bryandmartin/corncob&quot;) # remotes::install_github(&quot;bryandmartin/corncob&quot;) 3.2.2.3 Packages from website Manual download of RAIDA_1.0.tar.gz from here and install locally R CMD INSTALL RAIDA_*.tar.gz install.packages(&quot;RAIDA_1.0.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) Manual download of mbzinb_0.2.tar.gz from here and install locally R CMD INSTALL mbzinb_*.tar.gz install.packages(&quot;mbzinb_0.2.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) 3.2.3 Installation Get the XMAS released version from Release version 3.2.3.1 Installation in linux or Mac os through command line Using git command to download the whole repository and then install this package by linux command line. git clone git@gitlab.com:BangzhuoTong/xmas.git R CMD build xmas R CMD INSTALL XMAS_*.tar.gz 3.2.3.2 Installation by R from gitlab # Step 1: Install devtools install.packages(c(&quot;devtools&quot;, &quot;remotes&quot;)) library(devtools) #library(remotes) # Step 2: install xmas package devtools::install_gitlab(&quot;BangzhuoTong/xmas&quot;) # remotes::install_github(&quot;BangzhuoTong/xmas&quot;) 3.2.3.3 Installation by R from local XMAS*.tar.gz file Downloading the tar.gz file from the gitlab website, and then use the following command to install it. install.packages(&quot;XMAS*.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) 3.2.4 Vignette For detailed tutorials on how to use XMAS, please refer to the R package vignettes. Choosing the html format to do a practice. Hope you have fun with XMAS. utils::browseVignettes(package=&quot;XMAS&quot;) 3.2.5 Authors Bangzhuo Tong Hua Zou 3.2.6 library package library(XMAS2) 3.3 Future plan XMAS 2.0, which developed for data analysis, is part of the X-therapia platform and we will update it with more and more data analysis module and also add new functions according to the in-house requirements to support the company. We welcome any comments and requirements and hope users give issues on the gitlab issues module. 3.4 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] SummarizedExperiment_1.24.0 Biobase_2.54.0 GenomicRanges_1.46.1 ## [4] GenomeInfoDb_1.30.1 IRanges_2.28.0 S4Vectors_0.32.3 ## [7] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 matrixStats_0.61.0 ## [10] ggpubr_0.4.0 ggplot2_3.3.5 phyloseq_1.38.0 ## [13] tibble_3.1.6 dplyr_1.0.8 XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 plyr_1.8.6 igraph_1.2.11 ## [4] splines_4.1.2 BiocParallel_1.28.3 TH.data_1.1-0 ## [7] digest_0.6.29 foreach_1.5.2 htmltools_0.5.2 ## [10] fansi_1.0.2 magrittr_2.0.2 memoise_2.0.1 ## [13] cluster_2.1.2 limma_3.50.1 Biostrings_2.62.0 ## [16] annotate_1.72.0 sandwich_3.0-1 metagenomeSeq_1.36.0 ## [19] colorspace_2.0-3 blob_1.2.2 xfun_0.30 ## [22] crayon_1.5.0 RCurl_1.98-1.6 jsonlite_1.8.0 ## [25] libcoin_1.0-9 genefilter_1.76.0 survival_3.3-1 ## [28] zoo_1.8-9 iterators_1.0.14 ape_5.6-2 ## [31] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [34] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [37] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [40] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [43] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [46] xtable_1.8-4 bit_4.0.4 glmnet_4.1-3 ## [49] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [52] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [55] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [58] farver_2.1.0 sass_0.4.0 locfit_1.5-9.5 ## [61] utf8_1.2.2 tidyselect_1.1.2 rlang_1.0.2 ## [64] reshape2_1.4.4 AnnotationDbi_1.56.2 munsell_0.5.0 ## [67] tools_4.1.2 visNetwork_2.1.0 cachem_1.0.6 ## [70] cli_3.2.0 generics_0.1.2 RSQLite_2.2.10 ## [73] ade4_1.7-18 broom_0.7.12 evaluate_0.15 ## [76] biomformat_1.22.0 stringr_1.4.0 fastmap_1.1.0 ## [79] yaml_2.3.5 knitr_1.37 bit64_4.0.5 ## [82] caTools_1.18.2 purrr_0.3.4 KEGGREST_1.34.0 ## [85] coin_1.4-2 nlme_3.1-155 compiler_4.1.2 ## [88] rstudioapi_0.13 png_0.1-7 ggsignif_0.6.3 ## [91] geneplotter_1.72.0 bslib_0.3.1 stringi_1.7.6 ## [94] highr_0.9 lattice_0.20-45 Matrix_1.4-0 ## [97] vegan_2.5-7 permute_0.9-7 conflicted_1.1.0 ## [100] multtest_2.50.0 vctrs_0.3.8 pillar_1.7.0 ## [103] lifecycle_1.0.1 rhdf5filters_1.6.0 jquerylib_0.1.4 ## [106] data.table_1.14.2 bitops_1.0-7 R6_2.5.1 ## [109] bookdown_0.24 KernSmooth_2.23-20 codetools_0.2-18 ## [112] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [115] Wrench_1.12.0 rhdf5_2.38.1 DESeq2_1.34.0 ## [118] withr_2.5.0 multcomp_1.4-18 GenomeInfoDbData_1.2.7 ## [121] mgcv_1.8-39 parallel_4.1.2 grid_4.1.2 ## [124] tidyr_1.2.0 rmarkdown_2.13 carData_3.0-5 "],["convert-inputdata-into-phyloseq-object.html", "Chapter 4 Convert inputdata into phyloseq object 4.1 loading packages 4.2 DADA2 4.3 Metaphlan2/3 4.4 Systematic Information", " Chapter 4 Convert inputdata into phyloseq object r Biocpkg(“phyloseq”) (McMurdie and Holmes 2013) is the most popular Biocondcutor package used by the microbiome research field, and phyloseq-class objects are a great data-standard for microbiota data in R. Therefore, the core functions in XMAS take phyloseq-class object as input. In the phyloseq object, information on OTU abundances, taxonomy of OTUs, the phylogenetic tree and metadata is stored. This tutorial will introduce you the basic steps to convert results from the in-house pipeline into phyloseq-class object. More importantly on how to look at your data and filter appropriately. We will use the inputs from /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/. 4.1 loading packages Loading the XMAS into the R session: library(XMAS2) library(dplyr) library(tibble) library(phyloseq) 4.2 DADA2 4.2.1 Importing results from dada2 pipeline dada2 results from standardized_analytics_workflow_R_function: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt dada2_res &lt;- readRDS( system.file( &quot;extdata&quot;, &quot;dada2_res.rds&quot;, package = &quot;XMAS2&quot; ) ) sam_tab &lt;- read.table( system.file( &quot;extdata&quot;, &quot;dada2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) tree &lt;- read_tree( system.file( &quot;extdata&quot;, &quot;tree.nwk&quot;, package = &quot;XMAS2&quot; ) ) 4.2.2 taxa table We use import_dada2_taxa to convert dada2_res$tax_tab into our own taxa table tax_tab &lt;- import_dada2_taxa(dada2_res$tax_tab) head(tax_tab, 1) ## Kingdom ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;k__Bacteria&quot; ## Phylum ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;p__Firmicutes&quot; ## Class ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;c__Clostridia&quot; ## Order ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;o__Clostridiales&quot; ## Family ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;f__Lachnospiraceae&quot; ## Genus ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;g__Blautia&quot; ## Species ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;s__Blautia_unclassified&quot; 4.2.3 otu table otu_tab &lt;- dada2_res$seq_tab # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(otu_tab) &lt;- paste0(&quot;S&quot;, rownames(otu_tab)) head(otu_tab[, 1, F]) ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG ## S6030 1253 ## S6032 14677 ## S6033 2929 ## S6035 0 ## S6036 3548 ## S6037 8484 4.2.4 metadata table sam_tab &lt;- sam_tab %&gt;% tibble::column_to_rownames(&quot;seqID&quot;) # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(sam_tab) &lt;- paste0(&quot;S&quot;, rownames(sam_tab)) head(sam_tab) ## Group ## S6065 AA ## S6049 AA ## S6043 AA ## S6037 AA ## S6059 AA ## S6060 AA 4.2.5 phyloseq object dada2_ps &lt;- get_dada2_phyloseq(seq_tab = otu_tab, tax_tab = tax_tab, sam_tab = sam_tab, phy_tree = tree) dada2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 24 samples ] ## sample_data() Sample Data: [ 24 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] we obtain the phyloseq-class object and then use it to perform data analysis. otu_table dada2_ps@otu_table %&gt;% data.frame() %&gt;% head() ## S6030 S6032 S6033 S6035 S6036 S6037 S6040 S6043 S6045 S6046 S6048 S6049 S6050 S6054 ## ASV_1 1253 14677 2929 0 3548 8484 11727 5218 4942 7347 3503 3803 14593 4275 ## ASV_2 2810 1558 1839 11885 0 5632 631 7326 1809 4781 3476 108 3100 39 ## ASV_3 7107 2915 2200 0 1232 19675 0 1617 839 9362 4815 0 0 1121 ## ASV_4 0 2280 94 13775 0 4456 937 746 3730 273 85 64 562 448 ## ASV_5 6983 15963 1172 256 12140 874 1722 120 210 0 111 802 994 1971 ## ASV_6 489 0 199 0 836 0 8565 0 0 1257 0 5998 0 3093 ## S6055 S6058 S6059 S6060 S6061 S6063 S6065 S6066 S6068 S8005 ## ASV_1 2812 0 6847 17893 2956 3328 6302 8414 0 0 ## ASV_2 3879 6389 298 4995 196 45061 542 357 10870 7325 ## ASV_3 13472 0 1421 0 0 0 9694 4387 0 14797 ## ASV_4 18 611 96 5976 0 837 0 706 17977 0 ## ASV_5 18 517 808 443 48 109 7 122 546 2516 ## ASV_6 2091 0 10572 0 8495 0 2703 0 0 974 tax_table dada2_ps@tax_table %&gt;% data.frame() %&gt;% head() ## Kingdom Phylum Class Order ## ASV_1 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales ## ASV_2 k__Bacteria p__Actinobacteria c__Actinobacteria o__Bifidobacteriales ## ASV_3 k__Bacteria p__Actinobacteria c__Actinobacteria o__Bifidobacteriales ## ASV_4 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales ## ASV_5 k__Bacteria p__Firmicutes c__Bacilli o__Lactobacillales ## ASV_6 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales ## Family Genus ## ASV_1 f__Lachnospiraceae g__Blautia ## ASV_2 f__Bifidobacteriaceae g__Bifidobacterium ## ASV_3 f__Bifidobacteriaceae g__Bifidobacterium ## ASV_4 f__Lachnospiraceae g__Lachnospiraceae_unclassified ## ASV_5 f__Streptococcaceae g__Streptococcus ## ASV_6 f__Ruminococcaceae g__Faecalibacterium ## Species ## ASV_1 s__Blautia_unclassified ## ASV_2 s__Bifidobacterium_unclassified ## ASV_3 s__Bifidobacterium_unclassified ## ASV_4 s__Lachnospiraceae_unclassified ## ASV_5 s__Streptococcus_unclassified ## ASV_6 s__Faecalibacterium_unclassified sample_table dada2_ps@sam_data %&gt;% data.frame() %&gt;% head() ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA 4.3 Metaphlan2/3 4.3.1 Importing results The result of the in-house Metaphlan2/3 pipeline: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt metaphlan2_res &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_merged.tsv&quot;, package = &quot;XMAS2&quot; ), header = TRUE, stringsAsFactors = FALSE ) metaphlan2_sam &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) 4.3.2 taxa table metaphlan2_res_list &lt;- import_metaphlan_taxa(metaphlan2_res, taxa_level = &quot;Species&quot;) tax_tab &lt;- metaphlan2_res_list$tax_tab head(tax_tab) ## Kingdom Phylum Class ## s__Actinomyces_graevenitzii k__Bacteria p__Actinobacteria c__Actinobacteria ## s__Actinomyces_johnsonii k__Bacteria p__Actinobacteria c__Actinobacteria ## s__Actinomyces_massiliensis k__Bacteria p__Actinobacteria c__Actinobacteria ## s__Actinomyces_odontolyticus k__Bacteria p__Actinobacteria c__Actinobacteria ## s__Actinomyces_oris k__Bacteria p__Actinobacteria c__Actinobacteria ## s__Actinomyces_viscosus k__Bacteria p__Actinobacteria c__Actinobacteria ## Order Family Genus ## s__Actinomyces_graevenitzii o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_johnsonii o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_massiliensis o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_odontolyticus o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_oris o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_viscosus o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## Species ## s__Actinomyces_graevenitzii s__Actinomyces_graevenitzii ## s__Actinomyces_johnsonii s__Actinomyces_johnsonii ## s__Actinomyces_massiliensis s__Actinomyces_massiliensis ## s__Actinomyces_odontolyticus s__Actinomyces_odontolyticus ## s__Actinomyces_oris s__Actinomyces_oris ## s__Actinomyces_viscosus s__Actinomyces_viscosus 4.3.3 otu table metaphlan2_res_list &lt;- import_metaphlan_taxa(metaphlan2_res, taxa_level = &quot;Species&quot;) otu_tab &lt;- metaphlan2_res_list$abu_tab head(otu_tab) ## s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 ## s__Actinomyces_graevenitzii 3.58e-05 0 0.0e+00 0 0 0 7.20e-06 0.0e+00 0.0000000 0 ## s__Actinomyces_johnsonii 0.00e+00 0 0.0e+00 0 0 0 0.00e+00 0.0e+00 0.0000000 0 ## s__Actinomyces_massiliensis 0.00e+00 0 0.0e+00 0 0 0 2.95e-05 0.0e+00 0.0000000 0 ## s__Actinomyces_odontolyticus 7.70e-05 0 1.7e-06 0 0 0 2.47e-05 5.8e-06 0.0001175 0 ## s__Actinomyces_oris 0.00e+00 0 0.0e+00 0 0 0 2.81e-05 0.0e+00 0.0000135 0 ## s__Actinomyces_viscosus 4.60e-06 0 0.0e+00 0 0 0 0.00e+00 0.0e+00 0.0000039 0 ## s11 s12 s13 s14 s15 s16 s17 s18 s19 ## s__Actinomyces_graevenitzii 1.40e-05 0e+00 0.00e+00 0.0e+00 0 0 0 6.1e-06 1.60e-06 ## s__Actinomyces_johnsonii 0.00e+00 0e+00 1.15e-05 0.0e+00 0 0 0 0.0e+00 0.00e+00 ## s__Actinomyces_massiliensis 0.00e+00 0e+00 0.00e+00 0.0e+00 0 0 0 0.0e+00 0.00e+00 ## s__Actinomyces_odontolyticus 6.16e-05 0e+00 1.66e-05 3.9e-06 0 0 0 0.0e+00 4.19e-05 ## s__Actinomyces_oris 0.00e+00 0e+00 0.00e+00 0.0e+00 0 0 0 0.0e+00 0.00e+00 ## s__Actinomyces_viscosus 6.20e-06 7e-06 1.10e-06 0.0e+00 0 0 0 0.0e+00 0.00e+00 ## s20 s21 s22 refE ## s__Actinomyces_graevenitzii 0 0 0.00e+00 0 ## s__Actinomyces_johnsonii 0 0 0.00e+00 0 ## s__Actinomyces_massiliensis 0 0 2.52e-05 0 ## s__Actinomyces_odontolyticus 0 0 0.00e+00 0 ## s__Actinomyces_oris 0 0 7.40e-06 0 ## s__Actinomyces_viscosus 0 0 7.28e-05 0 4.3.4 metadata table sam_tab &lt;- metaphlan2_sam %&gt;% tibble::column_to_rownames(&quot;SampleID&quot;) head(sam_tab) ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 4.3.5 phyloseq object metaphlan2_ps &lt;- get_metaphlan_phyloseq(otu_tab = otu_tab, sam_tab = sam_tab, tax_tab = tax_tab) metaphlan2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 4.4 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] SummarizedExperiment_1.24.0 Biobase_2.54.0 GenomicRanges_1.46.1 ## [4] GenomeInfoDb_1.30.1 IRanges_2.28.0 S4Vectors_0.32.3 ## [7] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 matrixStats_0.61.0 ## [10] ggpubr_0.4.0 ggplot2_3.3.5 phyloseq_1.38.0 ## [13] tibble_3.1.6 dplyr_1.0.8 XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 plyr_1.8.6 igraph_1.2.11 ## [4] splines_4.1.2 BiocParallel_1.28.3 TH.data_1.1-0 ## [7] digest_0.6.29 foreach_1.5.2 htmltools_0.5.2 ## [10] fansi_1.0.2 magrittr_2.0.2 memoise_2.0.1 ## [13] cluster_2.1.2 limma_3.50.1 Biostrings_2.62.0 ## [16] annotate_1.72.0 sandwich_3.0-1 metagenomeSeq_1.36.0 ## [19] colorspace_2.0-3 blob_1.2.2 xfun_0.30 ## [22] crayon_1.5.0 RCurl_1.98-1.6 jsonlite_1.8.0 ## [25] libcoin_1.0-9 genefilter_1.76.0 survival_3.3-1 ## [28] zoo_1.8-9 iterators_1.0.14 ape_5.6-2 ## [31] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [34] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [37] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [40] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [43] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [46] xtable_1.8-4 bit_4.0.4 glmnet_4.1-3 ## [49] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [52] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [55] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [58] farver_2.1.0 sass_0.4.0 locfit_1.5-9.5 ## [61] utf8_1.2.2 tidyselect_1.1.2 rlang_1.0.2 ## [64] reshape2_1.4.4 AnnotationDbi_1.56.2 munsell_0.5.0 ## [67] tools_4.1.2 visNetwork_2.1.0 cachem_1.0.6 ## [70] cli_3.2.0 generics_0.1.2 RSQLite_2.2.10 ## [73] ade4_1.7-18 broom_0.7.12 evaluate_0.15 ## [76] biomformat_1.22.0 stringr_1.4.0 fastmap_1.1.0 ## [79] yaml_2.3.5 knitr_1.37 bit64_4.0.5 ## [82] caTools_1.18.2 purrr_0.3.4 KEGGREST_1.34.0 ## [85] coin_1.4-2 nlme_3.1-155 compiler_4.1.2 ## [88] rstudioapi_0.13 png_0.1-7 ggsignif_0.6.3 ## [91] geneplotter_1.72.0 bslib_0.3.1 stringi_1.7.6 ## [94] highr_0.9 lattice_0.20-45 Matrix_1.4-0 ## [97] vegan_2.5-7 permute_0.9-7 conflicted_1.1.0 ## [100] multtest_2.50.0 vctrs_0.3.8 pillar_1.7.0 ## [103] lifecycle_1.0.1 rhdf5filters_1.6.0 jquerylib_0.1.4 ## [106] data.table_1.14.2 bitops_1.0-7 R6_2.5.1 ## [109] bookdown_0.24 KernSmooth_2.23-20 codetools_0.2-18 ## [112] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [115] Wrench_1.12.0 rhdf5_2.38.1 DESeq2_1.34.0 ## [118] withr_2.5.0 multcomp_1.4-18 GenomeInfoDbData_1.2.7 ## [121] mgcv_1.8-39 parallel_4.1.2 grid_4.1.2 ## [124] tidyr_1.2.0 rmarkdown_2.13 carData_3.0-5 References "],["quality-evaluation.html", "Chapter 5 Quality Evaluation 5.1 Reads’ track 5.2 Spike-in (BRS) sample assessment 5.3 Remove BRS 5.4 Rarefaction Curves 5.5 Summarize phyloseq-class object 5.6 Variability 5.7 Systematic Information", " Chapter 5 Quality Evaluation Quality control of DADA2 results will help us have more rational determinations on the further data analysis. Firstly, the reads’ track of DADA2 could show us the Changed Ratio of reads through the in-house standard amplicon sequencing data upstream pipeline. Then, the Evaluation of the spike-in samples from the Reference Matrix will reflect the quality of sequencing data. Finally, we recommend you that utilizing the rarefaction curves to assess the sequence depth per sample and choose the rational cutoff of OTU Number to do rarefy. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 5.1 Reads’ track this procedure only perform in 16s data plot_Dada2Track(data=dada2_res$reads_track) Figure 5.1: Reads’ track of DADA2 5.2 Spike-in (BRS) sample assessment The spike-in sample is use to evaluate the consistent quality on bacteria when we have multiple sequence batches data. We devised an evaluation system containing the Correlation Coefficient, Bray Curtis Distance and Impurity Level to assess the sequencing data quality. Please use the default Reference and Save directory to obtain and save the spike-in sample matrix when you run run_RefCheck. 5.2.1 16s data The taxonomic levels of spike-in sample’s bacteria is genus. Firstly, using the summarize_taxa to get the genus level phyloseq object and get the BRS_ID. dada2_ps_genus &lt;- summarize_taxa(dada2_ps, taxa_level = &quot;Genus&quot;) dada2_ps_genus@sam_data ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA ## S6040 BB ## S6043 AA ## S6045 BB ## S6046 BB ## S6048 BB ## S6049 AA ## S6050 BB ## S6054 BB ## S6055 BB ## S6058 BB ## S6059 AA ## S6060 AA ## S6061 AA ## S6063 BB ## S6065 AA ## S6066 AA ## S6068 BB ## S8005 QC do run_RefCheck under the optimal parameters. BRS_ID: the ID of BRS sample; Reference: the directory of the latest spike-in sample matrix (default: /share/projects/Analytics/analytics/XMAS/RefCheck/); Save: the directory to save the latest spike-in sample matrix (default: /share/projects/Analytics/analytics/XMAS/RefCheck/). To see more details to use ?run_RefCheck. run_RefCheck( ps=dada2_ps_genus, BRS_ID=&quot;S8005&quot;, Reference=NULL, Ref_type=&quot;16s&quot;, Save=NULL) ## Noting: the Reference Matrix is for 16s ## S8005 is in the Reference Matrix&#39;s samples and remove it to run ## ## #########Matched baterica of the Spike-in sample########### ## Identifying some taxa of the Reference Matrix are not in the dataset ## g__Escherichia/Shigella ## ## Checking out the additional Taxa are in the sequencing dataset ## ########################################################### ## ## ##############Value of the Reference sample############### ## Correlation Coefficient of the Reference sample is: 0.9692 ## Bray Curtis of the Reference sample is: 0.0808 ## Impurity of the Reference sample is: 14.1 ## ########################################################### ## #####Final Evaluation Results of the Spike-in sample####### ## The spike-in sample&#39;s 14.1 is more than the Cutoff of Impurity (0.1565) ## ########################################################### ## 8002 8003 8004 8006 8007 8008 ## Bifidobacterium 31.11079015 30.88310969 32.31232692 18.4930259 20.20409870 17.96225391 ## Bacteroides 20.44753484 14.46581958 24.57151411 26.7370147 25.85863655 27.51353663 ## Faecalibacterium 0.79850615 0.62937893 1.05531023 1.7487249 1.64282727 1.96346413 ## Lactobacillus 2.61732573 3.36856272 3.44379163 5.9292703 5.78000836 5.78189064 ## Parabacteroides 7.11124408 7.45952579 5.36075144 8.7149995 8.01840234 8.74899584 ## Collinsella 0.12792605 0.88271385 0.55665744 1.2764130 0.67921372 1.89356397 ## Coprococcus_3 1.00380683 0.97969362 0.80270938 1.6693557 1.56419908 1.67969035 ## Dorea 2.80715148 3.45564660 2.46613277 3.9684605 3.99163530 3.81529666 ## Streptococcus 2.91960260 3.43387563 2.59149764 3.4818362 3.31409452 3.51378702 ## Roseburia 0.03404484 0.04750030 0.02806676 0.0338295 0.03178586 0.02503886 ## Anaerostipes 0.32291011 0.43245062 0.31528329 0.5386697 0.44500209 0.53416240 ## Enterococcus 14.51444842 14.66472707 11.04239952 13.1674820 12.07360937 12.88771113 ## Prevotella_9 0.77374627 3.07465463 2.75709154 2.9145415 2.52446675 3.04952478 ## Eggerthella 0.04951976 0.15437596 0.27131203 0.4840221 0.43998327 0.47365181 ## Impurity_level 0.08562792 0.06531291 0.05987576 0.0000000 0.00000000 0.00000000 ## 8009 8005 mean ## Bifidobacterium 18.03588291 27.22437034 24.52823232 ## Bacteroides 26.99272343 24.23896093 23.85321759 ## Faecalibacterium 1.81219797 1.04035376 1.33634542 ## Lactobacillus 6.32672332 3.87088505 4.63980722 ## Parabacteroides 8.62634005 5.61833757 7.45732457 ## Collinsella 1.26367828 0.45502126 0.89189845 ## Coprococcus_3 1.71221463 0.87586251 1.28594151 ## Dorea 3.69382881 2.34880690 3.31836988 ## Streptococcus 3.37721491 2.68740253 3.16491388 ## Roseburia 0.02499583 0.03311188 0.03229673 ## Anaerostipes 0.48047548 0.32471000 0.42420796 ## Enterococcus 12.84924735 11.61906390 12.85233610 ## Prevotella_9 2.84952508 5.40257632 2.91826586 ## Eggerthella 0.35549631 0.16128688 0.29870601 ## Impurity_level 0.00000000 14.10000000 1.78885207 ## Evaluation ## Bifidobacterium S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Faecalibacterium S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Lactobacillus S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Parabacteroides S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Collinsella S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Coprococcus_3 S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Dorea S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Streptococcus S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Roseburia S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Anaerostipes S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Enterococcus S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Prevotella_9 S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Eggerthella S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Impurity_level S8005 didn&#39;t pass the threshold (2022-06-17 11:17:12). We could see that the messages are comprised of four parts. the 1st part showed the type of reference matrix and whether the spike-in sample had been added to reference matrix; the 2nd part revealed that what and how many the matched bacterica of the spike-in sample are; the 3nd part showed that the value of evaluation system in the spike-in sample; the 4nd part showed that whether the spike-in sample passes the cutoff of evaluation system. 5.2.2 Metagenomic data The taxonomic levels of spike-in sample’s bacteria is species. Firstly, using the summarize_taxa to get the genus level phyloseq object and then do run_RefCheck under the optimal parameters. Quality Control by spike-in sample in metagenomic get the BRS_ID metaphlan2_ps_species &lt;- summarize_taxa(metaphlan2_ps, taxa_level = &quot;Species&quot;) metaphlan2_ps_species@sam_data ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 ## s7 BB 8.75 ## s8 BB 0.00 ## s9 BB 3.75 ## s10 BB 2.50 ## s11 BB 15.00 ## s12 BB 2.50 ## s13 BB 2.50 ## s14 BB 0.00 ## s15 BB 1.07 ## s16 BB 2.50 ## s17 AA 5.00 ## s18 BB 35.00 ## s19 BB 7.50 ## s20 BB 15.00 ## s21 AA 3.75 ## s22 AA 3.75 ## refE QC NA run run_RefCheck run_RefCheck( ps=metaphlan2_ps_species, BRS_ID=&quot;refE&quot;, Reference=NULL, Ref_type=&quot;MGS&quot;, Save=NULL) ## 7682 7683 7684 7685 7842 7843 ## Bifidobacterium_longum 10.31563 9.25812 9.69184 7.76031 11.03311 11.61484 ## Bacteroides_uniformis 2.24195 2.24035 1.92015 2.18435 2.43230 2.38180 ## Faecalibacterium_prausnitzii 0.65615 0.60153 0.60112 0.62079 0.54147 0.55383 ## Bifidobacterium_adolescentis 7.05426 6.28460 6.57297 6.25448 4.69357 4.80628 ## Bacteroides_thetaiotaomicron 3.25076 3.31897 3.22418 3.43809 3.35611 3.38323 ## Collinsella_aerofaciens 0.56220 0.53249 0.60476 0.47934 0.65513 0.68833 ## Coprococcus_comes 2.28581 2.42978 2.25227 2.82904 1.21527 1.16485 ## Dorea_formicigenerans 4.83509 5.02149 5.18268 5.56891 3.34720 3.09877 ## Streptococcus_salivarius 3.54266 3.74119 3.62036 4.01546 2.90216 2.70193 ## Bacteroides_xylanisolvens 1.55648 1.84824 1.91166 1.85273 1.75220 1.74002 ## Bacteroides_ovatus 3.08489 3.27226 3.10904 3.24565 3.51376 3.50063 ## Roseburia_hominis 0.04383 0.04183 0.04107 0.02304 0.03853 0.03464 ## Bacteroides_vulgatus 3.06713 3.20369 3.14979 3.15352 3.24822 3.09280 ## Prevotella_copri 2.03128 1.99619 1.92504 2.15422 1.57638 1.60584 ## Bifidobacterium_pseudocatenulatum 6.89310 6.36177 7.39605 5.76804 6.19464 6.47094 ## Lachnospiraceae_bacterium_5_1_63FAA 0.22002 0.26062 0.28058 0.33329 0.07093 0.06778 ## Impurity_level 7.33876 7.34799 7.14891 6.47250 8.88190 9.72198 ## 7844 7845 refE mean ## Bifidobacterium_longum 12.29030 11.69019 0.01646 9.29675556 ## Bacteroides_uniformis 2.13830 2.41437 0.21061 2.01824222 ## Faecalibacterium_prausnitzii 0.58806 0.54655 1.61939 0.70321000 ## Bifidobacterium_adolescentis 4.94943 4.84278 0.04649 5.05609556 ## Bacteroides_thetaiotaomicron 3.29098 3.30355 1.47422 3.11556556 ## Collinsella_aerofaciens 0.76063 0.66896 0.07251 0.55826111 ## Coprococcus_comes 1.07160 1.07834 0.01444 1.59348889 ## Dorea_formicigenerans 3.08677 2.70732 0.02775 3.65288667 ## Streptococcus_salivarius 2.61760 2.57348 0.02846 2.86036667 ## Bacteroides_xylanisolvens 1.69811 1.67676 0.32466 1.59565111 ## Bacteroides_ovatus 3.37872 3.42300 0.25782 2.97619667 ## Roseburia_hominis 0.03532 0.03597 0.01307 0.03414444 ## Bacteroides_vulgatus 3.13038 3.06113 2.14684 3.02816667 ## Prevotella_copri 1.57913 1.59224 60.84109 8.36682333 ## Bifidobacterium_pseudocatenulatum 7.41615 6.27837 0.15023 5.88103222 ## Lachnospiraceae_bacterium_5_1_63FAA 0.05229 0.04781 0.06825 0.15573000 ## Impurity_level 9.72162 10.57600 32.69000 11.09996222 ## Evaluation ## Bifidobacterium_longum refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides_uniformis refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Faecalibacterium_prausnitzii refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bifidobacterium_adolescentis refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides_thetaiotaomicron refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Collinsella_aerofaciens refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Coprococcus_comes refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Dorea_formicigenerans refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Streptococcus_salivarius refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides_xylanisolvens refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides_ovatus refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Roseburia_hominis refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bacteroides_vulgatus refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Prevotella_copri refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Bifidobacterium_pseudocatenulatum refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Lachnospiraceae_bacterium_5_1_63FAA refE didn&#39;t pass the threshold (2022-06-17 11:17:12). ## Impurity_level refE didn&#39;t pass the threshold (2022-06-17 11:17:12). 5.3 Remove BRS After evaluating the sequencing quality, we remove the BRS. dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] 5.4 Rarefaction Curves Rarefaction curves are often used when calculating alpha diversity indices, because increasing numbers of sequenced taxa allow increasingly accurate estimates of total population diversity. Rarefaction curves can therefore be used to estimate the full sample richness, as compared to the observed sample richness. plot_RarefCurve(dada2_ps_remove_BRS, taxa_level = &quot;OTU&quot;, step = 400, label = &quot;Group&quot;, color = &quot;Group&quot;) ## rarefying sample S6030 ## rarefying sample S6032 ## rarefying sample S6033 ## rarefying sample S6035 ## rarefying sample S6036 ## rarefying sample S6037 ## rarefying sample S6040 ## rarefying sample S6043 ## rarefying sample S6045 ## rarefying sample S6046 ## rarefying sample S6048 ## rarefying sample S6049 ## rarefying sample S6050 ## rarefying sample S6054 ## rarefying sample S6055 ## rarefying sample S6058 ## rarefying sample S6059 ## rarefying sample S6060 ## rarefying sample S6061 ## rarefying sample S6063 ## rarefying sample S6065 ## rarefying sample S6066 ## rarefying sample S6068 Figure 5.2: Rarefaction Curves The result showed that all the samples had different sequencing depth but had the full sample richness. 5.5 Summarize phyloseq-class object Summarizing the phyloseq-class object by using summarize_phyloseq. It displayed that briefly introduction of the object. summarize_phyloseq(dada2_ps_remove_BRS) ## Compositional = NO2 ## 1] Min. number of reads = 511812] Max. number of reads = 716673] Total number of reads = 14089154] Average number of reads = 61257.17391304355] Median number of reads = 614357] Sparsity = 0.8610248447204976] Any OTU sum to 1 or less? YES8] Number of singletons = 49] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 1Group2 ## [[1]] ## [1] &quot;1] Min. number of reads = 51181&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 71667&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1408915&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 61257.1739130435&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 61435&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.861024844720497&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? YES&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 4&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; The minus account of the OTU counts is 51181 in the phyloseq object, and we can use it as the threshold to rarefy. Notice the Sparsity (0.865), indicating the data has many zeros and pay attention to the downstream data analysis. A common property of amplicon based microbiota data generated by sequencing. 5.6 Variability We use the variability to measure measure heterogeneity in OTU/ASV abundance data. \\[Variability_{X} = \\frac{sd(X)}{mean(X)}\\] 5.6.1 Coefficient of variation Coefficient of variation (C.V), i.e. sd(x)/mean(x) is a widely used approach to measure heterogeneity in OTU/ASV abundance data. The plot below shows CV-mean(relaive mean abundance) relationship in the scatter plot, where variation is calculated for each OTU/ASV across samples versus mean relative abundance. Now plot C.V. pl &lt;- plot_taxa_cv(dada2_ps_remove_BRS, plot.type = &quot;scatter&quot;) Figure 5.3: Density of the Taxa Mean abundance pl + scale_x_log10() Figure 5.4: Coefficient of variation From the above two plots, we see that there are several OTUs which have high C.V. and low mean. 5.6.2 Distribution of number of sequences Checking for distribution of number of sequences plot_read_distribution(dada2_ps_remove_BRS, group=&quot;Group&quot;, plot.type = &quot;density&quot;) Figure 5.5: Distribution of number of sequences Different distribution between group AA and BB. 5.7 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] SummarizedExperiment_1.24.0 Biobase_2.54.0 GenomicRanges_1.46.1 ## [4] GenomeInfoDb_1.30.1 IRanges_2.28.0 S4Vectors_0.32.3 ## [7] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 matrixStats_0.61.0 ## [10] ggpubr_0.4.0 ggplot2_3.3.5 phyloseq_1.38.0 ## [13] tibble_3.1.6 dplyr_1.0.8 XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 Hmisc_4.6-0 plyr_1.8.6 ## [4] igraph_1.2.11 splines_4.1.2 BiocParallel_1.28.3 ## [7] TH.data_1.1-0 digest_0.6.29 foreach_1.5.2 ## [10] htmltools_0.5.2 fansi_1.0.2 checkmate_2.0.0 ## [13] magrittr_2.0.2 memoise_2.0.1 cluster_2.1.2 ## [16] limma_3.50.1 Biostrings_2.62.0 annotate_1.72.0 ## [19] sandwich_3.0-1 metagenomeSeq_1.36.0 jpeg_0.1-9 ## [22] colorspace_2.0-3 blob_1.2.2 xfun_0.30 ## [25] crayon_1.5.0 RCurl_1.98-1.6 jsonlite_1.8.0 ## [28] libcoin_1.0-9 genefilter_1.76.0 survival_3.3-1 ## [31] zoo_1.8-9 iterators_1.0.14 ape_5.6-2 ## [34] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [37] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [40] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [43] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [46] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [49] htmlTable_2.4.0 xtable_1.8-4 foreign_0.8-82 ## [52] bit_4.0.4 Formula_1.2-4 glmnet_4.1-3 ## [55] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [58] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [61] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [64] farver_2.1.0 nnet_7.3-17 sass_0.4.0 ## [67] locfit_1.5-9.5 utf8_1.2.2 labeling_0.4.2 ## [70] tidyselect_1.1.2 rlang_1.0.2 reshape2_1.4.4 ## [73] AnnotationDbi_1.56.2 munsell_0.5.0 tools_4.1.2 ## [76] visNetwork_2.1.0 cachem_1.0.6 cli_3.2.0 ## [79] generics_0.1.2 RSQLite_2.2.10 ade4_1.7-18 ## [82] broom_0.7.12 evaluate_0.15 biomformat_1.22.0 ## [85] stringr_1.4.0 fastmap_1.1.0 yaml_2.3.5 ## [88] knitr_1.37 bit64_4.0.5 caTools_1.18.2 ## [91] purrr_0.3.4 KEGGREST_1.34.0 coin_1.4-2 ## [94] nlme_3.1-155 compiler_4.1.2 rstudioapi_0.13 ## [97] png_0.1-7 ggsignif_0.6.3 geneplotter_1.72.0 ## [100] bslib_0.3.1 stringi_1.7.6 highr_0.9 ## [103] lattice_0.20-45 Matrix_1.4-0 vegan_2.5-7 ## [106] permute_0.9-7 conflicted_1.1.0 multtest_2.50.0 ## [109] vctrs_0.3.8 pillar_1.7.0 lifecycle_1.0.1 ## [112] rhdf5filters_1.6.0 jquerylib_0.1.4 data.table_1.14.2 ## [115] bitops_1.0-7 latticeExtra_0.6-29 R6_2.5.1 ## [118] bookdown_0.24 gridExtra_2.3 KernSmooth_2.23-20 ## [121] codetools_0.2-18 MASS_7.3-55 gtools_3.9.2 ## [124] assertthat_0.2.1 Wrench_1.12.0 rhdf5_2.38.1 ## [127] DESeq2_1.34.0 withr_2.5.0 multcomp_1.4-18 ## [130] GenomeInfoDbData_1.2.7 mgcv_1.8-39 parallel_4.1.2 ## [133] rpart_4.1.16 grid_4.1.2 tidyr_1.2.0 ## [136] rmarkdown_2.13 carData_3.0-5 base64enc_0.1-3 "],["pre-processing.html", "Chapter 6 Pre-processing 6.1 Transformation 6.2 Normalization 6.3 Filtering 6.4 Trimming 6.5 Imputation 6.6 Extracting specific taxa phyloseq-class object 6.7 Aggregating low relative abundance or unclassified taxa into others 6.8 Transform the abundance of taxa whose relative abundance under Limit Of Detection (LOD) into Zeros (only in metaphlan2/3) 6.9 Systematic Information", " Chapter 6 Pre-processing Performing the pre-processing steps on the phyloseq-class object. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) library(conflicted) conflicted::conflict_prefer(&quot;normalize&quot;, &quot;XMAS2&quot;) Using get_GroupPhyloseq to remove some samples. For instance, removing the spike-in sample QC in Group column. amplicon sequencing (16s) data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] metagenomic sequencing (metaphlan2/3) data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 6.1 Transformation Transforming the taxa abundances in otu_table by sample, which means the counts of each sample will be transformed individually. The options include: “identity”, return the original data without any transformation; “log10”, the transformation is log10(object), and if the data contains zeros the transformation is log10(1 + object); “log10p”, the transformation is log10(1 + object). dada2_ps_genus &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) dada2_ps_transform &lt;- transform_abundances(dada2_ps_genus, transform = &quot;log10&quot;) head(dada2_ps_transform@otu_table@.Data, 3) ## S6030 S6032 S6033 S6035 S6036 S6037 S6040 S6043 S6045 S6046 ## g__Acetanaerobacterium 0 0 0 0 0.000000 0.000000 0 0 0.00000 0 ## g__Acidaminococcus 0 0 0 0 2.482874 3.066699 0 0 2.32838 0 ## g__Acinetobacter 0 0 0 0 0.000000 0.000000 0 0 0.00000 0 ## S6048 S6049 S6050 S6054 S6055 S6058 S6059 S6060 S6061 ## g__Acetanaerobacterium 0 0.0000000 0 0.4771213 0 0 0 0.00000 0 ## g__Acidaminococcus 0 0.0000000 0 0.0000000 0 0 0 0.69897 0 ## g__Acinetobacter 0 0.7781513 0 0.0000000 0 0 0 0.00000 0 ## S6063 S6065 S6066 S6068 ## g__Acetanaerobacterium 0.000000 0 0 0 ## g__Acidaminococcus 1.819544 0 0 0 ## g__Acinetobacter 0.000000 0 0 0 transforming metagenomic sequencing metaphlan2_ps_species &lt;- summarize_taxa(metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_transform_mgs &lt;- transform_abundances(metaphlan2_ps_species, transform = &quot;log10&quot;) head(metaphlan2_ps_transform_mgs@otu_table@.Data, 3) ## s1 s2 s3 s4 s5 s6 s7 s8 ## s__Abiotrophia_defectiva 1.064008e-05 0 0 0 0 0 0.0000000000 0.0000000000 ## s__Acidaminococcus_fermentans 0.000000e+00 0 0 0 0 0 0.0000000000 0.0004785459 ## s__Acidaminococcus_intestini 1.824033e-06 0 0 0 0 0 0.0002600645 0.0004363335 ## s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 ## s__Abiotrophia_defectiva 0.000000000 0 0 0 0 0 0 0.000000000 0 0 0 ## s__Acidaminococcus_fermentans 0.002856279 0 0 0 0 0 0 0.002042584 0 0 0 ## s__Acidaminococcus_intestini 0.000000000 0 0 0 0 0 0 0.000000000 0 0 0 ## s20 s21 s22 ## s__Abiotrophia_defectiva 0 0 0.0000000000 ## s__Acidaminococcus_fermentans 0 0 0.0010491598 ## s__Acidaminococcus_intestini 0 0 0.0006390283 6.2 Normalization Normalizing the OTU_table in phyloseq-class object. It is critical to normalize the feature table to eliminate any bias due to differences in the sampling sequencing depth. This function implements 7 widely-used normalization methods for microbial compositional data. rarefy: random subsampling counts to the smallest library size in the data set. Caution: the default library size is 25000 according to our own results(Rarefaction Curves). XMAS2::normalize(dada2_ps_genus, method = &quot;rarefy&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] # norm_rarefy(dada2_ps_genus, size = 50000) TSS: total sum scaling, also referred to as “relative abundance”, the abundances were normalized by dividing the corresponding sample library size XMAS2::normalize(dada2_ps_genus, method = &quot;TSS&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] TMM: trimmed mean of m-values. First, a sample is chosen as reference. The scaling factor is then derived using a weighted trimmed mean over the differences of the log-transformed gene-count fold-change between the sample and the reference. XMAS2::normalize(dada2_ps_genus, method = &quot;TMM&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] RLE: relative log expression, RLE uses a pseudo-reference calculated using the geometric mean of the gene-specific abundances over all samples. The scaling factors are then calculated as the median of the gene counts ratios between the samples and the reference. XMAS2::normalize(dada2_ps_genus, method = &quot;RLE&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CSS: cumulative sum scaling, calculates scaling factors as the cumulative sum of gene abundances up to a data-derived threshold. While standard relative abundance (fraction/percentage) normalization re-scales all samples to the same total sum (100%), CSS keeps a variation in total counts between samples. CSS re-scales the samples based on a subset (quartile) of lower abundant taxa (relatively constant and independent), thereby excluding the impact of (study dominating) high abundant taxa. XMAS2::normalize(dada2_ps_genus, method = &quot;CSS&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CLR: centered log-ratio normalization. XMAS2::normalize(dada2_ps_genus, method = &quot;CLR&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CPM: pre-sample normalization of the sum of the values to 1e+06. XMAS2::normalize(dada2_ps_genus, method = &quot;CPM&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] 6.3 Filtering Whether to filter the low relative abundance or unclassified taxa by the threshold. ps_genus_rb &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;, absolute = FALSE) ps_genus_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] ps_genus_rb_filter &lt;- run_filter(ps_genus_rb, cutoff = 1e-04, unclass = TRUE) ps_genus_rb_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 160 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 160 taxa by 6 taxonomic ranks ] 39 genus’s relative abundance or attributes were below 1e-04 or unclassified and they were removed by the cutoff. 6.4 Trimming The previous function (run_filter) only focuses on the low relative abundance and unclassified taxa. Microbial data always have so many zeros. Trimming samples or taxa in otu_table by occurrences or prevalence before downstream analysis is also crucial. trimming by TaxaID run_trim(dada2_ps_genus, cutoff = 0.4, trim = &quot;feature&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 63 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 63 taxa by 6 taxonomic ranks ] Dropping the taxa whose prevalence or occurrences are less than 0.4. trimming by SampleID run_trim(dada2_ps_genus, cutoff = 0.4, trim = &quot;sample&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 4 samples ] ## sample_data() Sample Data: [ 4 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] Dropping the samples whose prevalence or occurrences are less than 0.4. trimming by TaxaID &amp; SampleID run_trim(dada2_ps_genus, cutoff = 0.4, trim = &quot;both&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 63 taxa and 4 samples ] ## sample_data() Sample Data: [ 4 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 63 taxa by 6 taxonomic ranks ] Dropping the taxa and samples whose prevalence are less than 0.4. filtering metagenomic sequencing metaphlan2_ps_trim_mgs &lt;- run_trim(metaphlan2_ps_remove_BRS, cutoff = 0.4, trim = &quot;feature&quot;) metaphlan2_ps_trim_mgs ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 102 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 102 taxa by 7 taxonomic ranks ] 6.5 Imputation The missing values in otu table maybe affect the statistical results, imputing the NAs or Zero values should taken into account. limit of detection min(dada2_ps_genus@otu_table) ## [1] 0 LOD_imputed_ps &lt;- run_impute(dada2_ps_genus, impute = &quot;LOD&quot;, LOD = 2) min(LOD_imputed_ps@otu_table) ## [1] 2 6.6 Extracting specific taxa phyloseq-class object The taxonomic level are Kingdom, Phylum, Class, Order, Family, Genus, Species and choosing the specific taxa to regenerate the phyloseq-class object. amplicon sequencing: Phylum dada2_ps_phylum &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Phylum&quot;) dada2_ps_phylum ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 10 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 10 taxa by 2 taxonomic ranks ] amplicon sequencing: Order dada2_ps_order &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Order&quot;) dada2_ps_order ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 24 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 24 taxa by 4 taxonomic ranks ] amplicon sequencing: Family dada2_ps_family &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Family&quot;) dada2_ps_family ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 54 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 54 taxa by 5 taxonomic ranks ] amplicon sequencing: Genus dada2_ps_genus &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) dada2_ps_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] extracting metagenomic sequencing metaphlan2_ps_genus &lt;- summarize_taxa(metaphlan2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) metaphlan2_ps_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 109 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 109 taxa by 6 taxonomic ranks ] metaphlan2_ps_species &lt;- summarize_taxa(metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_species ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 325 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 325 taxa by 7 taxonomic ranks ] 6.7 Aggregating low relative abundance or unclassified taxa into others Taxa with relative abundance less than 0.0001 will be summarized into Others_LowAbundance; Unclassified taxa will be summarized into Others_Unclassified. amplicon sequencing # relative abundance dada2_ps_genus_rb &lt;- summarize_taxa(dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;, absolute = FALSE) dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps_genus_rb, cutoff = 1e-04, unclass = TRUE) dada2_ps_genus_LRA ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 162 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 162 taxa by 6 taxonomic ranks ] tail(phyloseq::taxa_names(dada2_ps_genus_LRA)) ## [1] &quot;g__UBA1819&quot; &quot;g__UC5_1_2E3&quot; &quot;g__Veillonella&quot; &quot;g__Weissella&quot; ## [5] &quot;Others_LowAbundance&quot; &quot;Others_Unclassified&quot; # absolute abundance dada2_ps_genus_counts &lt;- summarize_LowAbundance_taxa(dada2_ps_genus, cutoff = 10) dada2_ps_genus_counts ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 173 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 173 taxa by 6 taxonomic ranks ] aggregating metagenomic sequencing metaphlan2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(metaphlan2_ps_genus, cutoff = 1e-04, unclass = TRUE) metaphlan2_ps_genus_LRA ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 78 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 78 taxa by 6 taxonomic ranks ] tail(phyloseq::taxa_names(metaphlan2_ps_genus_LRA)) ## [1] &quot;g__T4likevirus&quot; &quot;g__Turicibacter&quot; &quot;g__Veillonella&quot; &quot;g__Weissella&quot; ## [5] &quot;Others_LowAbundance&quot; &quot;Others_Unclassified&quot; 6.8 Transform the abundance of taxa whose relative abundance under Limit Of Detection (LOD) into Zeros (only in metaphlan2/3) metaphlan2_ps_Species_LOD &lt;- aggregate_LOD_taxa(metaphlan2_ps, taxa_level = &quot;Species&quot;, cutoff = 1e-04) metaphlan2_ps_Species_LOD ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 192 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 192 taxa by 7 taxonomic ranks ] 6.9 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [4] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [7] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [10] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [13] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [16] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 Hmisc_4.6-0 plyr_1.8.6 ## [4] igraph_1.2.11 splines_4.1.2 BiocParallel_1.28.3 ## [7] TH.data_1.1-0 digest_0.6.29 foreach_1.5.2 ## [10] htmltools_0.5.2 fansi_1.0.2 checkmate_2.0.0 ## [13] magrittr_2.0.2 memoise_2.0.1 cluster_2.1.2 ## [16] limma_3.50.1 Biostrings_2.62.0 annotate_1.72.0 ## [19] sandwich_3.0-1 metagenomeSeq_1.36.0 jpeg_0.1-9 ## [22] colorspace_2.0-3 blob_1.2.2 xfun_0.30 ## [25] crayon_1.5.0 RCurl_1.98-1.6 jsonlite_1.8.0 ## [28] libcoin_1.0-9 genefilter_1.76.0 survival_3.3-1 ## [31] zoo_1.8-9 iterators_1.0.14 ape_5.6-2 ## [34] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [37] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [40] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [43] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [46] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [49] htmlTable_2.4.0 xtable_1.8-4 foreign_0.8-82 ## [52] bit_4.0.4 Formula_1.2-4 glmnet_4.1-3 ## [55] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [58] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [61] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [64] farver_2.1.0 nnet_7.3-17 sass_0.4.0 ## [67] locfit_1.5-9.5 utf8_1.2.2 labeling_0.4.2 ## [70] tidyselect_1.1.2 rlang_1.0.2 reshape2_1.4.4 ## [73] AnnotationDbi_1.56.2 munsell_0.5.0 tools_4.1.2 ## [76] visNetwork_2.1.0 cachem_1.0.6 cli_3.2.0 ## [79] generics_0.1.2 RSQLite_2.2.10 ade4_1.7-18 ## [82] broom_0.7.12 evaluate_0.15 biomformat_1.22.0 ## [85] stringr_1.4.0 fastmap_1.1.0 yaml_2.3.5 ## [88] knitr_1.37 bit64_4.0.5 caTools_1.18.2 ## [91] purrr_0.3.4 KEGGREST_1.34.0 coin_1.4-2 ## [94] nlme_3.1-155 compiler_4.1.2 rstudioapi_0.13 ## [97] png_0.1-7 ggsignif_0.6.3 geneplotter_1.72.0 ## [100] bslib_0.3.1 stringi_1.7.6 highr_0.9 ## [103] lattice_0.20-45 Matrix_1.4-0 vegan_2.5-7 ## [106] permute_0.9-7 multtest_2.50.0 vctrs_0.3.8 ## [109] pillar_1.7.0 lifecycle_1.0.1 rhdf5filters_1.6.0 ## [112] jquerylib_0.1.4 data.table_1.14.2 bitops_1.0-7 ## [115] latticeExtra_0.6-29 R6_2.5.1 bookdown_0.24 ## [118] gridExtra_2.3 KernSmooth_2.23-20 codetools_0.2-18 ## [121] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [124] Wrench_1.12.0 rhdf5_2.38.1 DESeq2_1.34.0 ## [127] withr_2.5.0 multcomp_1.4-18 GenomeInfoDbData_1.2.7 ## [130] mgcv_1.8-39 parallel_4.1.2 rpart_4.1.16 ## [133] grid_4.1.2 tidyr_1.2.0 rmarkdown_2.13 ## [136] carData_3.0-5 base64enc_0.1-3 "],["aplha-diversity.html", "Chapter 7 Aplha diversity 7.1 Equal sample sums 7.2 Diversities 7.3 Rank Abundance 7.4 Systematic Information", " Chapter 7 Aplha diversity Alpha diversity is a measure of microbiome diversity applicable to a single sample. The commonly used metrics/indices are Shannon, Chao1, Observed, Simpson, Gini and Inverse Simpson. The reference of this part is (A et al. 2020). It is important to note that, alpha diversity indices are sensitive to noise that is inherent to application of polymerase chain reaction and the sequencing errors. Cautions: Shannon, Simpson and InvSimpson measures are both for relative or absolute abundance. As defined by Shannon, the index of Shannon index is given as follow: \\[H^{&#39;} = \\sum_{i=1}^{S}p_{i}\\,\\ln\\,p_{i}\\] where \\(p_{i}\\) is the proportion of individuals (or relative abundance) of species \\(i\\) in the community and \\(S\\) is the total number of species present so that \\(\\sum_{i=1}^{S}p_{i} = 1\\). Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 7.1 Equal sample sums Remove BRS data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] Summary counts The previous result from Rarefaction Curves had demonstrated that the sequence depth of each sample has a larger significance and normalizing the samples’ depth into equal sampling depth is necessary. summary(sample_sums(dada2_ps_remove_BRS)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 51181 58608 61435 61257 64283 71667 As is evident there is a large difference in the number of reads. Minimum is 51181 and maximum is 71667!! There is a ~1.4X difference. dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) summary(sample_sums(dada2_ps_rarefy)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 51181 51181 51181 51181 51181 51181 Quickly check taxa prevalence plot_taxa_prevalence(dada2_ps_rarefy, &quot;Phylum&quot;) Figure 7.1: Taxa prevalence after rarefying 7.2 Diversities data(&quot;amplicon_ps&quot;) summary(sample_sums(amplicon_ps)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1114 2139 4965 5357 8438 11449 As is evident there is a large difference in the number of reads. Minimum is 1114 and maximum is 11449!! There is a ~10X difference! amplicon_ps_rarefy &lt;- norm_rarefy(amplicon_ps, size = 1114, rng_seed = 123) summary(sample_sums(amplicon_ps)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1114 2139 4965 5357 8438 11449 7.2.1 Non-phylogenetic diversities 7.2.1.1 XMAS Calculation amplicon_ps_rarefy_alpha &lt;- run_alpha_diversity(ps=amplicon_ps_rarefy, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) head(amplicon_ps_rarefy_alpha) ## TempRowNames SampleType Year Month Day Subject ReportedAntibioticUsage ## 1 L1S140 gut 2008 10 28 2 Yes ## 2 L1S208 gut 2009 1 20 2 No ## 3 L1S8 gut 2008 10 28 1 Yes ## 4 L1S281 gut 2009 4 14 2 No ## 5 L3S242 right palm 2008 10 28 1 Yes ## 6 L2S309 left palm 2009 1 20 2 No ## DaysSinceExperimentStart Description Observed Chao1 se.chao1 Shannon ## 1 0 2_Fece_10_28_2008 161 332.7308 50.17139 3.149765 ## 2 84 2_Fece_1_20_2009 183 365.0000 50.23137 3.617229 ## 3 0 1_Fece_10_28_2008 112 303.1538 69.80534 2.817767 ## 4 168 2_Fece_4_14_2009 212 587.9130 102.79585 3.892763 ## 5 0 1_R_Palm_10_28_2008 120 278.8824 54.21486 2.911609 ## 6 84 2_L_Palm_1_20_2009 296 560.0526 55.47859 4.494509 Visualization single measure plot_boxplot(data = amplicon_ps_rarefy_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, group_names = NULL, group_color = NULL, do_test = TRUE, ref_group = NULL, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 7.2: Alpha diversity from XMAS(one measure) multiple measures plot_boxplot(data = amplicon_ps_rarefy_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), do_test = TRUE, ref_group = &quot;gut&quot;, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 7.3: Alpha diversity from XMAS(multiple measures) 7.2.1.2 microbiome Calculation amplicon_ps_rarefy_alpha_v2 &lt;- microbiome::alpha(amplicon_ps_rarefy, index = &quot;all&quot;) DT::datatable(amplicon_ps_rarefy_alpha_v2) Visualization amplicon_ps_rarefy_metadata &lt;- phyloseq::sample_data(amplicon_ps_rarefy) %&gt;% data.frame() amplicon_ps_rarefy_alpha_v2$SampleID &lt;- rownames(amplicon_ps_rarefy_metadata) amplicon_ps_rarefy_metadata$SampleID &lt;- rownames(amplicon_ps_rarefy_metadata) dat_diversity &lt;- dplyr::inner_join(amplicon_ps_rarefy_metadata, amplicon_ps_rarefy_alpha_v2, by = &quot;SampleID&quot;) dat_diversity_v2 &lt;- dat_diversity[, c(&quot;SampleType&quot;, &quot;diversity_inverse_simpson&quot;, &quot;diversity_gini_simpson&quot;, &quot;diversity_shannon&quot;, &quot;diversity_fisher&quot;, &quot;diversity_coverage&quot;)] colnames(dat_diversity_v2) &lt;- c(&quot;SampleType&quot;, &quot;Inverse Simpson&quot;, &quot;Gini-Simpson&quot;, &quot;Shannon&quot;, &quot;Fisher&quot;, &quot;Coverage&quot;) plotdata &lt;- dat_diversity_v2 %&gt;% tidyr::gather(key = &quot;Variable&quot;, value = &quot;Value&quot;, -SampleType) groups &lt;- unique(dat_diversity_v2$SampleType) cmp_list &lt;- combn(seq_along(groups), 2, simplify = FALSE, FUN = function(x) {groups[x]}) pval_sign &lt;- list( cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1), symbols = c(&quot;****&quot;, &quot;***&quot;, &quot;**&quot;, &quot;*&quot;, &quot;n.s&quot;) ) ggboxplot(plotdata, x = &quot;SampleType&quot;, y = &quot;Value&quot;, fill = &quot;SampleType&quot;, palette = &quot;jco&quot;, legend= &quot;right&quot;, facet.by = &quot;Variable&quot;, scales = &quot;free&quot;)+ rotate_x_text()+ rremove(&quot;x.text&quot;)+ stat_compare_means( comparisons = cmp_list, label = &quot;p.signif&quot;, symnum.args = pval_sign ) Figure 7.4: Alpha diversity from microbiome 7.2.2 Phylogenetic diversity Phylogenetic diversity is calculated using the picante package. Calculation library(picante) amplicon_ps_rarefy_tab &lt;- as.data.frame(amplicon_ps_rarefy@otu_table) amplicon_ps_rarefy_tree &lt;- amplicon_ps_rarefy@phy_tree dat_pd &lt;- pd(t(amplicon_ps_rarefy_tab), amplicon_ps_rarefy_tree, include.root = FALSE) DT::datatable(dat_pd) Visualization amplicon_ps_rarefy_metadata$Phylogenetic_Diversity &lt;- dat_pd$PD ggboxplot(amplicon_ps_rarefy_metadata, x = &quot;SampleType&quot;, y = &quot;Phylogenetic_Diversity&quot;, fill = &quot;SampleType&quot;, palette = &quot;jco&quot;, ylab = &quot;Phylogenetic Diversity&quot;, xlab = &quot;Sample Type&quot;, legend = &quot;right&quot;)+ rotate_x_text()+ stat_compare_means( comparisons = cmp_list, label = &quot;p.signif&quot;, symnum.args = pval_sign) Figure 7.5: Alpha diversity from picante(Phylogenetic diversity) Cautions: There are arguments both for and against the use of rarefying to equal library size. The application of normalization method will depend on the type of research question. It is always good to check if there is a correlation between increasing library sizes and richness. Observed ASVs and Phylogenetic diversity can be affected by library sizes. It is always good to check for this before making a choice. Calculation lib.div &lt;- microbiome::alpha(amplicon_ps, index = &quot;all&quot;) lib.div2 &lt;- microbiome::richness(amplicon_ps) lib.div$ReadsPerSample &lt;- sample_sums(amplicon_ps) lib.div$Observed &lt;- lib.div2$observed colnames(lib.div) ## [1] &quot;observed&quot; &quot;chao1&quot; &quot;diversity_inverse_simpson&quot; ## [4] &quot;diversity_gini_simpson&quot; &quot;diversity_shannon&quot; &quot;diversity_fisher&quot; ## [7] &quot;diversity_coverage&quot; &quot;evenness_camargo&quot; &quot;evenness_pielou&quot; ## [10] &quot;evenness_simpson&quot; &quot;evenness_evar&quot; &quot;evenness_bulla&quot; ## [13] &quot;dominance_dbp&quot; &quot;dominance_dmn&quot; &quot;dominance_absolute&quot; ## [16] &quot;dominance_relative&quot; &quot;dominance_simpson&quot; &quot;dominance_core_abundance&quot; ## [19] &quot;dominance_gini&quot; &quot;rarity_log_modulo_skewness&quot; &quot;rarity_low_abundance&quot; ## [22] &quot;rarity_rare_abundance&quot; &quot;ReadsPerSample&quot; &quot;Observed&quot; scatterplot p1 &lt;- ggscatter(lib.div, &quot;diversity_shannon&quot;, &quot;ReadsPerSample&quot;)+ stat_cor(method = &quot;pearson&quot;) p2 &lt;- ggscatter(lib.div, &quot;diversity_inverse_simpson&quot;, &quot;ReadsPerSample&quot;,dd = &quot;loess&quot;)+ stat_cor(method = &quot;pearson&quot;) p3 &lt;- ggscatter(lib.div, &quot;Observed&quot;, &quot;ReadsPerSample&quot;, add = &quot;loess&quot;) + stat_cor( method = &quot;pearson&quot;, label.x = 100, label.y = 50000 ) ggarrange(p1, p2, p3, ncol = 2, nrow = 2) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 7.6: Correlation between increasing library sizes and richness 7.3 Rank Abundance A rank abundance curve is a chart used by ecologists to display relative species abundance, a component of biodiversity. It can also be used to visualize species richness and species evenness. It overcomes the shortcomings of biodiversity indices that cannot display the relative role different variables played in their calculation. The curve is a 2D chart with relative abundance on the Y-axis and the abundance rank on the X-axis. X-axis: The abundance rank. The most abundant species is given rank 1, the second most abundant is 2 and so on. Y-axis: The relative abundance. Usually measured on a log scale, this is a measure of a species abundance (e.g., the number of individuals) relative to the abundance of other species. plot_RankAbundance( ps = dada2_ps_remove_BRS, taxa_level = &quot;Family&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 7.7: Rank Abundance Results: From the horizontal level (Family rank), the higher degree of width means the higher degree of Family richness; From the vertical level (Relative abundance), the slope of the line reflects the Family evenness. 7.4 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [4] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [7] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [10] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [13] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [16] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [19] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [22] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 Hmisc_4.6-0 plyr_1.8.6 ## [4] igraph_1.2.11 splines_4.1.2 crosstalk_1.2.0 ## [7] BiocParallel_1.28.3 TH.data_1.1-0 digest_0.6.29 ## [10] foreach_1.5.2 htmltools_0.5.2 fansi_1.0.2 ## [13] checkmate_2.0.0 magrittr_2.0.2 memoise_2.0.1 ## [16] cluster_2.1.2 limma_3.50.1 Biostrings_2.62.0 ## [19] annotate_1.72.0 sandwich_3.0-1 metagenomeSeq_1.36.0 ## [22] jpeg_0.1-9 colorspace_2.0-3 blob_1.2.2 ## [25] xfun_0.30 crayon_1.5.0 RCurl_1.98-1.6 ## [28] jsonlite_1.8.0 libcoin_1.0-9 genefilter_1.76.0 ## [31] survival_3.3-1 zoo_1.8-9 iterators_1.0.14 ## [34] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [37] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [40] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [43] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [46] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [49] htmlTable_2.4.0 xtable_1.8-4 foreign_0.8-82 ## [52] bit_4.0.4 Formula_1.2-4 DT_0.21 ## [55] glmnet_4.1-3 htmlwidgets_1.5.4 httr_1.4.2 ## [58] DiagrammeR_1.0.9 gplots_3.1.1 RColorBrewer_1.1-2 ## [61] modeltools_0.2-23 ellipsis_0.3.2 pkgconfig_2.0.3 ## [64] XML_3.99-0.9 farver_2.1.0 nnet_7.3-17 ## [67] sass_0.4.0 locfit_1.5-9.5 utf8_1.2.2 ## [70] labeling_0.4.2 tidyselect_1.1.2 rlang_1.0.2 ## [73] reshape2_1.4.4 AnnotationDbi_1.56.2 munsell_0.5.0 ## [76] tools_4.1.2 visNetwork_2.1.0 cachem_1.0.6 ## [79] cli_3.2.0 generics_0.1.2 RSQLite_2.2.10 ## [82] ade4_1.7-18 broom_0.7.12 evaluate_0.15 ## [85] biomformat_1.22.0 stringr_1.4.0 fastmap_1.1.0 ## [88] yaml_2.3.5 knitr_1.37 bit64_4.0.5 ## [91] caTools_1.18.2 purrr_0.3.4 KEGGREST_1.34.0 ## [94] coin_1.4-2 compiler_4.1.2 rstudioapi_0.13 ## [97] png_0.1-7 ggsignif_0.6.3 geneplotter_1.72.0 ## [100] bslib_0.3.1 stringi_1.7.6 highr_0.9 ## [103] Matrix_1.4-0 ggsci_2.9 microbiome_1.16.0 ## [106] multtest_2.50.0 vctrs_0.3.8 pillar_1.7.0 ## [109] lifecycle_1.0.1 rhdf5filters_1.6.0 jquerylib_0.1.4 ## [112] cowplot_1.1.1 data.table_1.14.2 bitops_1.0-7 ## [115] latticeExtra_0.6-29 R6_2.5.1 bookdown_0.24 ## [118] gridExtra_2.3 KernSmooth_2.23-20 codetools_0.2-18 ## [121] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [124] Wrench_1.12.0 rhdf5_2.38.1 DESeq2_1.34.0 ## [127] withr_2.5.0 multcomp_1.4-18 GenomeInfoDbData_1.2.7 ## [130] mgcv_1.8-39 parallel_4.1.2 rpart_4.1.16 ## [133] grid_4.1.2 tidyr_1.2.0 rmarkdown_2.13 ## [136] carData_3.0-5 Rtsne_0.15 base64enc_0.1-3 References "],["beta-diversity.html", "Chapter 8 Beta diversity 8.1 Loading data and Removing BRS 8.2 Phylogenetic beta-diversity metrics 8.3 Distance (Dissimilarity) Coefficients: Bray-Curtis Index 8.4 Checking the homogeneity condition 8.5 Permutational Multivariate Analysis of Variance (PERMANOVA) 8.6 Mantel Test 8.7 Analysis of Similarity (ANOSIM) 8.8 Multi-response permutation procedures (MRPP) 8.9 Ordination 8.10 Systematic Information", " Chapter 8 Beta diversity Beta-diversity: Measures for differences between samples from different groups to identify if there are differences in the overall community composition and structure. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 8.1 Loading data and Removing BRS Using get_GroupPhyloseq to remove some samples. For instance, removing the spike-in sample QC in Group column. Rarefying counts dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] 8.2 Phylogenetic beta-diversity metrics 8.2.1 Unweighted Unifrac Unweighted Unifrac is based on presence/absence of different taxa and abundance is not important. The UniFrac distance, also known as unweighted UniFrac distance, was introduced by Lozupone et al. The goal of the UniFrac distance metric was to enable objective comparison between microbiome samples from different conditions. \\[d^{u} = \\sum^{n}_{i=1}\\frac{b_{i}|I(p_{i}^{A} &gt; 0) - I(p_{i}^{B} &gt; 0)|}{\\sum_{i=1}^{n}b_{i}}\\] where, \\(d^{u}\\) = unweighted UniFrac distance; \\(A\\), \\(B\\) = microbiome community A and B, respectively; \\(n\\) = rooted phylogenetic tree’s branches; \\(b_{i}\\) =length of the branch \\(i\\); \\(p_{i}^{A}\\) and \\(p_{i}^{A}\\) = taxa proportions descending from the branch \\(i\\) for community A and B, respectively. Calculation dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;unifrac&quot;) Visualization plot_distance_corrplot(dada2_beta$BetaDistance) Figure 8.1: Unweighted Unifrac Distance Try repeating the above ordination using filtered phyloseq object (discarding singletons/OTUs with very low reads). 8.2.2 Weighted Unifrac Weighted Unifrac will consider the abundances of different taxa. In 2007, Lozupone et al. added a proportional weighting to the original unweighted method, hence called this new UniFrac measure as weighted UniFrac. The weighted UniFrac distance is defined as: \\[d^{W} = \\frac{\\sum_{i=1}^{n}b_{i}|p_{i}^{A}-p_{i}^{B}|}{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})}\\] where, \\(d^{W}\\) = (normalized) weighted UniFrac distance; \\(A\\), \\(B\\) = microbiome community A and B, respectively; \\(n\\) = rooted phylogenetic tree’s branches; \\(b_{i}\\) = length of the branch \\(i\\). By adding a proportional weighting to UniFrac distance, weighted UniFrac distance reduces the problem of low abundance taxa being represented as a 0 or by a low count depending on sampling depth. Calculation dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;wunifrac&quot;) The result of dispersion test (Pr(&gt;F) &gt; 0.05) showed that the homogeneity condition of two groups were not significant. Visualization plot_distance_corrplot(dada2_beta$BetaDistance) Figure 8.2: Weighted Unifrac Distance 8.2.3 Generalized UniFrac Distance Metrics However, either unweighted or weighted UniFrac distances may not be very powerful in detecting change in moderately abundant lineages (J. Chen et al. 2012) because they assign too much weight either to rare lineages or to most abundant lineages. Thus, Chen et al. proposed the following generalized UniFrac distances to unify weighted UniFrac and unweighted UniFrac distances. The Generalized UniFrac Distance Metrics is defined as: \\[d^{\\alpha} = \\frac{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})^{\\alpha}|\\frac{p_{i}^{A}-p_{i}^{B}}{p_{i}^{A}+p_{i}^{B}}|}{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})}\\] where, \\(d^{\\alpha}\\) = generalized UniFrac distances; \\(\\alpha\\in [0, 1]\\) is used to controls the contribution from high-abundance branches; Calculation # approach1 dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;GUniFrac&quot;, GUniFrac_alpha = 0.5) # approach2 dada2_otu_tab &lt;- phyloseq::otu_table(dada2_ps_rarefy) dada2_tree &lt;- phyloseq::phy_tree(dada2_ps_rarefy) dada2_unifracs &lt;- run_GUniFrac(dada2_otu_tab, dada2_tree, alpha=c(0, 0.5, 1))$unifracs dada2_dw &lt;- dada2_unifracs[, , &quot;d_1&quot;] # Weighted UniFrac dada2_du &lt;- dada2_unifracs[, , &quot;d_UW&quot;] # Unweighted UniFrac dada2_dv &lt;- dada2_unifracs[, , &quot;d_VAW&quot;] # Variance adjusted weighted UniFrac dada2_d0 &lt;- dada2_unifracs[, , &quot;d_0&quot;] # GUniFrac with alpha 0 dada2_d5 &lt;- dada2_unifracs[, , &quot;d_0.5&quot;] # GUniFrac with alpha 0.5 Visualization: GUniFrac with alpha 0.5 plot_distance_corrplot(dada2_beta$BetaDistance) Figure 8.3: Generalized UniFrac Distance (alpha=0.5) 8.3 Distance (Dissimilarity) Coefficients: Bray-Curtis Index For microbiome abundance data, the measures of distance coefficients are not really distances. They actually measure “dissimilarity”. Measures of dissimilarity include Euclidian distance, Manhattan, and Bray-Curtis measures. Here, we take Bray-Curtis distance as an example. As defined by Bray and Curtis, the index of dissimilarity is given as follow: \\[BC = \\frac{\\sum_{i=1}^{n}|X_{ij}-X_{ik}|}{\\sum_{i=1}^{n}|X_{ij}+X_{ik}|}\\] where, \\(BC\\) Bray-Curtis measure of dissimilarity; \\(X_{ij}\\), \\(X_{ik}\\) Number of individuals in species; \\(i\\) in each \\(sample (j, k)\\); \\(n\\) Total number of species in samples. dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;bray&quot;) plot_distance_corrplot(dada2_beta$BetaDistance) Figure 8.4: Bray Curtis Distance 8.4 Checking the homogeneity condition dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;jsd&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.000486 0.0004856 0.1207 999 0.725 ## Residuals 21 0.084520 0.0040247 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.735 ## BB 0.73178 The result of dispersion test (Pr(&gt;F) &lt; 0.05) showed that the homogeneity condition of two groups were significant. 8.5 Permutational Multivariate Analysis of Variance (PERMANOVA) Permutational Multivariate Analysis of Variance (PERMANOVA) test (Anderson 2014) is to investigate the associations between the environmental factors including discrete or continuous variables (treatments or populations representatives, age, gender etc) and the whole microbial community. run_permanova(dada2_ps_rarefy, method = &quot;bray&quot;, columns = &quot;Group&quot;) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 23 1 0.3126266 0.3126266 1.004313 0.04564163 0.444 0.444 run_permanova(amplicon_ps, method = &quot;bray&quot;) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) ## TempRowNames 34 33 12.4906568 0.3785048 0.0000000 1.00000000 1.000 ## SampleType 34 3 5.5551059 1.8517020 8.0096101 0.44474090 0.001 ## Year 34 1 0.5879699 0.5879699 1.5807386 0.04707278 0.136 ## Month 34 4 1.3032780 0.3258195 0.8445915 0.10434023 0.731 ## Day 34 3 1.0649549 0.3549850 0.9320696 0.08526012 0.556 ## Subject 34 1 0.5598389 0.5598389 1.5015606 0.04482062 0.154 ## ReportedAntibioticUsage 34 1 0.5879699 0.5879699 1.5807386 0.04707278 0.136 ## DaysSinceExperimentStart 34 4 1.3032780 0.3258195 0.8445915 0.10434023 0.731 ## Description 34 33 12.4906568 0.3785048 0.0000000 1.00000000 1.000 ## AdjustedPvalue ## TempRowNames 1.0000000 ## SampleType 0.0090000 ## Year 0.3465000 ## Month 0.9398571 ## Day 0.9398571 ## Subject 0.3465000 ## ReportedAntibioticUsage 0.3465000 ## DaysSinceExperimentStart 0.9398571 ## Description 1.0000000 Results: The PERMANOVA result of the SampleType (AdjustedPvalue &lt; 0.05) revealed that different groups of SampleType had the distinct patterns of microbial community. From the previous metadata, SampleType had four groups (gut, right palm, left palm, tongue) which are different body sites. The other continuous variables such as Year, Day and Month didn’t show any significant association with microbial community. We suggest you performing the PERMANOVA test before you do correlation analysis between individual taxa and environmental factors. If the whole microbial community had related to one environmental factor, we could find more associations between individual taxa and environmental factors. Ordination analysis is usually utilized for dimensionality reduction and then we decipher their results by using scatterplot. In fact, we should combine the statistical results, for example PERMANOVA, ANOSIM or others and dimension reduction results to provide stronger evidences to display the association and difference. 8.6 Mantel Test Mantel tests (Mantel 1967) are correlation tests that determine the correlation between two matrices (rather than two variables). When using the test for microbial ecology, the matrices are often distance/dissimilarity matrices with corresponding positions (i.e. samples in the same order in both matrices). A significant Mantel test will tell you that the distances between samples in one matrix are correlated with the distances between samples in the other matrix. Therefore, as the distance between samples increases with respect to one matrix, the distances between the same samples also increases in the other matrix. There are also three distance matrix for mantel test: Species abundance dissimilarity matrix: created using a distance measure, i.e. Bray-curtis dissimilarity. This is the same type of dissimilarity matrix used when conducting an ANOSIM test or when making an NMDS plot; Environmental factors distance matrix: generally created using Euclidean Distance; Geographic distance matrix: the physical distance between sites for z_distance (i.e. Haversine distance). data(&quot;amplicon_ps&quot;) run_MantelTest(ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), z_variables = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;), method_mantel = &quot;mantel.partial&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;, &quot;jaccard&quot;) ) ## ## Partial Mantel statistic based on Spearman&#39;s rank correlation rho ## ## Call: ## vegan::mantel.partial(xdis = x_dis, ydis = y_dis, zdis = z_dis, method = method_cor, permutations = 999) ## ## Mantel statistic r: 0.3318 ## Significance: 0.001 ## ## Upper quantiles of permutations (null model): ## 90% 95% 97.5% 99% ## 0.0524 0.0822 0.1095 0.1362 ## Permutation: free ## Number of permutations: 999 Results: From the results, we could see that the y_dis (environmental factors) has a strong relationship with the OTU Bray-Curtis dissimiliarity matrix (Mantel statistic R: 0.3318, p value = 0.001) after adjusting the z_dis matrix. In other words, as samples become more dissimilar in terms of environmental factors, they also become more dissimilar in terms of microbial community composition. Options for Mantel test run_MantelTest(ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), method_mantel = &quot;mantel&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;) ) ## ## Mantel statistic based on Spearman&#39;s rank correlation rho ## ## Call: ## vegan::mantel(xdis = x_dis, ydis = y_dis, method = method_cor, permutations = 999) ## ## Mantel statistic r: 0.2935 ## Significance: 0.001 ## ## Upper quantiles of permutations (null model): ## 90% 95% 97.5% 99% ## 0.0693 0.0992 0.1306 0.1592 ## Permutation: free ## Number of permutations: 999 run_MantelTest(ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), method_mantel = &quot;mantel.randtest&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;) ) ## Monte-Carlo test ## Call: ade4::mantel.randtest(m1 = x_dis, m2 = y_dis, nrepet = 999) ## ## Observation: 0.2843383 ## ## Based on 999 replicates ## Simulated p-value: 0.001 ## Alternative hypothesis: greater ## ## Std.Obs Expectation Variance ## 6.223278099 0.002464050 0.002051504 8.7 Analysis of Similarity (ANOSIM) Analysis of Similarity (ANOSIM) is simply a modified version of the Mantel Test based on a standardized rank correlation between two distance matrices. It is a nonparametric procedure for testing the hypothesis of no difference between two or more groups of samples based on permutation test of among-and within-group similarities. The ANOSIM test statistic(R) is based on the difference of mean ranks between groups and within groups. It is given below: \\[R = \\frac{\\bar{r}_{B} - \\bar{r}_{W}}{M/2}\\] where, \\(R\\) test statistic, is an index of relative within-group dissimilarity; \\(M = N(N − 1)/2\\) number of sample pairs; \\(N\\) is the total number of samples (subjects); \\(r_{B}\\) is the mean of the ranked similarity between groups; \\(r_{W}\\) is the mean of the ranked similarity within groups. run_ANOSIM(ps = dada2_ps_rarefy, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Call: ## vegan::anosim(x = dis, grouping = datphe, permutations = 999) ## Dissimilarity: bray ## ## ANOSIM statistic R: -0.03337 ## Significance: 0.63 ## ## Permutation: free ## Number of permutations: 999 The p-value of 0.62 is more than 0.05, which indicates that within-group similarity is not greater or less than between-group similarity at 0.05 significant level. We can conclude that there is no strong evidence that the within-group samples are more different than would be expected by random chance. 8.8 Multi-response permutation procedures (MRPP) Multi-response permutation procedures (MRPP) (Mielke Jr 1991) is a nonparametric procedure for testing the hypothesis of no difference between two or more groups of samples based on permutation test of among-and within-group dissimilarities. run_MRPP(ps = dada2_ps_rarefy, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Call: ## vegan::mrpp(dat = dis, grouping = datphe, permutations = 999) ## ## Dissimilarity index: bray ## Weights for groups: n ## ## Class means and counts: ## ## AA BB ## delta 0.7736 0.785 ## n 9 14 ## ## Chance corrected within-group agreement A: 0.0006646 ## Based on observed delta 0.7805 and expected delta 0.781 ## ## Significance of delta: 0.428 ## Permutation: free ## Number of permutations: 999 The observed and expected deltas are 0.6469 and 0.851, respectively. The significance of delta is 0.001 with the chance corrected within-group agreement A of 0.2399. We conclude that there is statistically significant difference of the four SampleType at the 0.05 of significance level. 8.9 Ordination Ordination is one of the main multivariate methods to reduce the dimensions of taxa–for instance, the whole microbial community often contains too much taxa which makes the microbial profile have too large dimensions. Utilizing ordination to convert the data into two or three dimensions could have more interpretable visualization. Compared to clustering methods, ordination focuses on the dimension reduction and has explanation loss (variation). We also use a distance method to calculate the distance matrix among samples and then do ordination analysis. Here, we give five universal ordination methods. There is no one-fit-all method for all microbiota data, so please pay attention to your own ordination analysis. 8.9.1 Principal Component Analysis (PCA) Principal Component Analysis (PCA) uses a linear combination algorithm to obtain the principal components (PC) (the number of PCs according to the samples). The results have been effected by the normalization methods because different count numbers would affect the PCs. We recommend you using filtering or normalization before performing PCA. 8.9.1.1 Preprocessing phyloseq object data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others #dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] 8.9.1.2 Running PCA ordination_PCA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCA&quot;) names(ordination_PCA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; ## [6] &quot;axis_taxa_cor&quot; The object of run_ordination is comprising of several results which could be used for visualization. fit: the result of PCA functions from stats::prcomp; dat: the combination of PCs score and metadata group information; explains: the 1st and 2nd PCs’ explains; eigvalue: the eigvalues of all the PCs; PERMANOVA: the result of PERMANOVA between the whole microbial community and group; axis_taxa_cor: inherit from the XVIZ package for visualization (only for PCoA analysis). 8.9.1.3 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;) Figure 8.5: Principal Component Analysis (PCA): Ordinary pattern Results: Scatterplot showed the distribution of samples in the two groups; PERMANOVA results revealed that there was no association between the groups and the genus microbial community; Sidelinechart showed the top 3 taxa related to PCA1 and PCA2. plot with SampleID and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), sample = TRUE) Figure 8.6: Principal Component Analysis (PCA): Ordinary pattern with SampleID biplot with topN dominant taxa plot_ggbiplot(ResultList = ordination_PCA, group = &quot;Group&quot;, group_color = c(&quot;blue&quot;, &quot;red&quot;), topN = 5, ellipse = TRUE, labels = &quot;SampleID&quot;) Figure 8.7: Principal Component Analysis (PCA): biplot biplot not only shows the distribution of samples, but also displays correlation among the dominant taxa. We chose top 5 dominant taxa. The length of vector approximates standard deviation of variables (bacteria); the angles between variables (bacteria in this case) reflect their correlations: the cosine of angle approximates correlation between variables (bacteria). 8.9.2 Principal Coordinate Analysis (PCoA) Principal Coordinate Analysis (PCoA) could use different distance measures (e.g., Jaccard, Bray-Curtis, Euclidean, etc.) as input for ordination, but pay attention to the data matrix with negative values (not suitable for Bray-Curtis distance). As PCA, PCoA uses eigenvalues to measure the importance of a set of returned orthogonal axes. The dimensionality of matrix is reduced by determining each eigenvector and eigenvalue. The principal coordinates are obtained by scaling each eigenvector. 8.9.2.1 Running PCoA Different distance measures could be affected by different factors (eg, low abundance taxa for Bary Curtis distance), so we recommend users taking care for whether performing the preprocess before calculating the distance. Here, we coincided to the tactics of the PCA analysis. ordination_PCoA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCoA&quot;) names(ordination_PCoA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; ## [6] &quot;axis_taxa_cor&quot; 8.9.2.2 Visualization plot_Ordination(ordination_PCoA, group = &quot;Group&quot;) Figure 8.8: Principal Coordinate Analysis (PCoA) 8.9.3 t-distributed stochastic neighbor embedding (t-SNE) t-distributed stochastic neighbor embedding (t-SNE) is a statistical method for visualizing high-dimensional data by giving each datapoint a location in a two or three-dimensional map. It is based on Stochastic Neighbor Embedding originally developed by Sam Roweis and Geoffrey Hinton, where Laurens van der Maaten proposed the t-distributed variant. It is a nonlinear dimensionality reduction technique well-suited for embedding high-dimensional data for visualization in a low-dimensional space of two or three dimensions. Specifically, it models each high-dimensional object by a two- or three-dimensional point in such a way that similar objects are modeled by nearby points and dissimilar objects are modeled by distant points with high probability. 8.9.3.1 Running tSNE Perplexity parameter is for how many neighbors to be chosen. ordination_tSNE &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;tSNE&quot;, para =list(Perplexity=2)) names(ordination_tSNE) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; ## [6] &quot;axis_taxa_cor&quot; 8.9.3.2 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_tSNE, group = &quot;Group&quot;) Figure 8.9: t-distributed stochastic neighbor embedding (t-SNE): Ordinary pattern 8.9.4 Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) Uniform Manifold Approximation and Projection (UMAP) (McInnes et al. 2022) is a dimension reduction technique that can be used for visualisation similarly to t-SNE, but also for general non-linear dimension reduction. The algorithm is founded on three assumptions about the data. 8.9.4.1 Running UMAP ordination_UMAP &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;UMAP&quot;) names(ordination_UMAP) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; ## [6] &quot;axis_taxa_cor&quot; 8.9.4.2 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_UMAP, group = &quot;Group&quot;) Figure 8.10: Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP): Ordinary pattern 8.10 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [4] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [7] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [10] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [13] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [16] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [19] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [22] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 Hmisc_4.6-0 corrplot_0.92 ## [4] plyr_1.8.6 igraph_1.2.11 splines_4.1.2 ## [7] crosstalk_1.2.0 BiocParallel_1.28.3 TH.data_1.1-0 ## [10] digest_0.6.29 foreach_1.5.2 htmltools_0.5.2 ## [13] fansi_1.0.2 checkmate_2.0.0 magrittr_2.0.2 ## [16] memoise_2.0.1 cluster_2.1.2 limma_3.50.1 ## [19] Biostrings_2.62.0 annotate_1.72.0 sandwich_3.0-1 ## [22] askpass_1.1 metagenomeSeq_1.36.0 jpeg_0.1-9 ## [25] colorspace_2.0-3 ggrepel_0.9.1 blob_1.2.2 ## [28] xfun_0.30 crayon_1.5.0 RCurl_1.98-1.6 ## [31] jsonlite_1.8.0 libcoin_1.0-9 genefilter_1.76.0 ## [34] survival_3.3-1 zoo_1.8-9 iterators_1.0.14 ## [37] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [40] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [43] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [46] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [49] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [52] htmlTable_2.4.0 xtable_1.8-4 reticulate_1.24 ## [55] foreign_0.8-82 bit_4.0.4 Formula_1.2-4 ## [58] umap_0.2.8.0 DT_0.21 glmnet_4.1-3 ## [61] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [64] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [67] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [70] farver_2.1.0 nnet_7.3-17 sass_0.4.0 ## [73] locfit_1.5-9.5 utf8_1.2.2 labeling_0.4.2 ## [76] tidyselect_1.1.2 rlang_1.0.2 reshape2_1.4.4 ## [79] AnnotationDbi_1.56.2 munsell_0.5.0 tools_4.1.2 ## [82] visNetwork_2.1.0 cachem_1.0.6 cli_3.2.0 ## [85] generics_0.1.2 RSQLite_2.2.10 ade4_1.7-18 ## [88] broom_0.7.12 evaluate_0.15 biomformat_1.22.0 ## [91] stringr_1.4.0 fastmap_1.1.0 yaml_2.3.5 ## [94] knitr_1.37 bit64_4.0.5 caTools_1.18.2 ## [97] purrr_0.3.4 KEGGREST_1.34.0 coin_1.4-2 ## [100] compiler_4.1.2 rstudioapi_0.13 png_0.1-7 ## [103] ggsignif_0.6.3 geneplotter_1.72.0 bslib_0.3.1 ## [106] stringi_1.7.6 highr_0.9 RSpectra_0.16-0 ## [109] Matrix_1.4-0 ggsci_2.9 microbiome_1.16.0 ## [112] multtest_2.50.0 vctrs_0.3.8 pillar_1.7.0 ## [115] lifecycle_1.0.1 rhdf5filters_1.6.0 jquerylib_0.1.4 ## [118] cowplot_1.1.1 data.table_1.14.2 bitops_1.0-7 ## [121] latticeExtra_0.6-29 R6_2.5.1 bookdown_0.24 ## [124] gridExtra_2.3 KernSmooth_2.23-20 codetools_0.2-18 ## [127] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [130] Wrench_1.12.0 rhdf5_2.38.1 openssl_2.0.0 ## [133] DESeq2_1.34.0 withr_2.5.0 multcomp_1.4-18 ## [136] GenomeInfoDbData_1.2.7 mgcv_1.8-39 parallel_4.1.2 ## [139] rpart_4.1.16 grid_4.1.2 tidyr_1.2.0 ## [142] rmarkdown_2.13 carData_3.0-5 Rtsne_0.15 ## [145] base64enc_0.1-3 References "],["composition.html", "Chapter 9 Composition 9.1 Loading &amp; precessing phyloseq object 9.2 XVIZ plot_stacked_bar 9.3 Stacked barplot 9.4 Heatmaps 9.5 Systematic Information", " Chapter 9 Composition Stacked barplot is often used as a visualization way to display the microbial composition per sample. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 9.1 Loading &amp; precessing phyloseq object Using get_GroupPhyloseq to remove some samples. For instance, removing the spike-in sample QC in Group column. Rarefying counts dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] 9.2 XVIZ plot_stacked_bar plot_stacked_bar_XIVZ from XVIZ. plot_stacked_bar_XIVZ(phyloseq=dada2_ps_rarefy, level=&quot;Phylum&quot;) Figure 9.1: Stacked barplot XVIZ 9.3 Stacked barplot plot_StackBarPlot provides too many parameters for users to display the Stacked barplot of microbial composition by using ggplot2 format. Here is the ordinary pattern. More details to see help(plot_StackBarPlot). plot_StackBarPlot(ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;) Figure 9.2: Stacked barplot Ordinary pattern Please open the below buttons, if you want to see other options for stacked barplot. genus level in stacked barplot dada2_ps_rarefy_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) otu_tab &lt;- phyloseq::otu_table(dada2_ps_rarefy_genus) sam_tab &lt;- phyloseq::sample_data(dada2_ps_rarefy_genus) plot_StackBarPlot( data_otu=otu_tab, data_sam=sam_tab, cutoff = 0.01, taxa_level=&quot;Genus&quot;) Figure 9.3: Stacked barplot otu_tab and sample_table as input Metadata with Group phenotype plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;) Figure 9.4: Stacked barplot Metadata with group Metadata with Group phenotype in cluster mode plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) Figure 9.5: Stacked barplot Metadata with group in cluster mode Metadata with Group phenotype in facet plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, facet = TRUE) Figure 9.6: Stacked barplot Metadata with group in facet 9.4 Heatmaps plot_taxa_heatmap(dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, cutoff = 1e-4, colors = c(&quot;black&quot;, &quot;yellow&quot;)) Figure 9.7: Heatmaps 9.5 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [4] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [7] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [10] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [13] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [16] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [19] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [22] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] backports_1.4.1 Hmisc_4.6-0 corrplot_0.92 ## [4] plyr_1.8.6 igraph_1.2.11 splines_4.1.2 ## [7] crosstalk_1.2.0 BiocParallel_1.28.3 TH.data_1.1-0 ## [10] digest_0.6.29 foreach_1.5.2 htmltools_0.5.2 ## [13] fansi_1.0.2 checkmate_2.0.0 magrittr_2.0.2 ## [16] memoise_2.0.1 cluster_2.1.2 limma_3.50.1 ## [19] Biostrings_2.62.0 annotate_1.72.0 sandwich_3.0-1 ## [22] askpass_1.1 metagenomeSeq_1.36.0 jpeg_0.1-9 ## [25] colorspace_2.0-3 ggrepel_0.9.1 blob_1.2.2 ## [28] xfun_0.30 crayon_1.5.0 RCurl_1.98-1.6 ## [31] jsonlite_1.8.0 libcoin_1.0-9 genefilter_1.76.0 ## [34] survival_3.3-1 zoo_1.8-9 iterators_1.0.14 ## [37] glue_1.6.2 gtable_0.3.0 zlibbioc_1.40.0 ## [40] XVector_0.34.0 DelayedArray_0.20.0 car_3.0-12 ## [43] Rhdf5lib_1.16.0 shape_1.4.6 abind_1.4-5 ## [46] scales_1.1.1 mvtnorm_1.1-3 DBI_1.1.2 ## [49] edgeR_3.36.0 rstatix_0.7.0 Rcpp_1.0.8.2 ## [52] htmlTable_2.4.0 xtable_1.8-4 reticulate_1.24 ## [55] foreign_0.8-82 bit_4.0.4 Formula_1.2-4 ## [58] umap_0.2.8.0 DT_0.21 glmnet_4.1-3 ## [61] htmlwidgets_1.5.4 httr_1.4.2 DiagrammeR_1.0.9 ## [64] gplots_3.1.1 RColorBrewer_1.1-2 modeltools_0.2-23 ## [67] ellipsis_0.3.2 pkgconfig_2.0.3 XML_3.99-0.9 ## [70] farver_2.1.0 nnet_7.3-17 sass_0.4.0 ## [73] locfit_1.5-9.5 utf8_1.2.2 labeling_0.4.2 ## [76] tidyselect_1.1.2 rlang_1.0.2 reshape2_1.4.4 ## [79] AnnotationDbi_1.56.2 munsell_0.5.0 tools_4.1.2 ## [82] visNetwork_2.1.0 cachem_1.0.6 cli_3.2.0 ## [85] generics_0.1.2 RSQLite_2.2.10 ade4_1.7-18 ## [88] broom_0.7.12 evaluate_0.15 biomformat_1.22.0 ## [91] stringr_1.4.0 fastmap_1.1.0 yaml_2.3.5 ## [94] knitr_1.37 bit64_4.0.5 caTools_1.18.2 ## [97] purrr_0.3.4 KEGGREST_1.34.0 coin_1.4-2 ## [100] compiler_4.1.2 rstudioapi_0.13 png_0.1-7 ## [103] ggsignif_0.6.3 geneplotter_1.72.0 bslib_0.3.1 ## [106] stringi_1.7.6 highr_0.9 RSpectra_0.16-0 ## [109] Matrix_1.4-0 ggsci_2.9 microbiome_1.16.0 ## [112] multtest_2.50.0 vctrs_0.3.8 pillar_1.7.0 ## [115] lifecycle_1.0.1 rhdf5filters_1.6.0 jquerylib_0.1.4 ## [118] cowplot_1.1.1 data.table_1.14.2 bitops_1.0-7 ## [121] latticeExtra_0.6-29 R6_2.5.1 bookdown_0.24 ## [124] gridExtra_2.3 KernSmooth_2.23-20 codetools_0.2-18 ## [127] MASS_7.3-55 gtools_3.9.2 assertthat_0.2.1 ## [130] Wrench_1.12.0 rhdf5_2.38.1 openssl_2.0.0 ## [133] DESeq2_1.34.0 withr_2.5.0 multcomp_1.4-18 ## [136] GenomeInfoDbData_1.2.7 mgcv_1.8-39 parallel_4.1.2 ## [139] rpart_4.1.16 grid_4.1.2 tidyr_1.2.0 ## [142] rmarkdown_2.13 carData_3.0-5 Rtsne_0.15 ## [145] base64enc_0.1-3 "],["core-microbiota.html", "Chapter 10 Core microbiota 10.1 Core microbiota anlaysis 10.2 Core abundance and diversity 10.3 Core visualization 10.4 Systematic Information", " Chapter 10 Core microbiota These functions in this chapter are from (Leo Lahti 2018) package. The core microbiota are passed the parameters’ cutoff (eg. prevalence, abundance). Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 10.1 Core microbiota anlaysis Using get_GroupPhyloseq to remove some samples. For instance, removing the spike-in sample QC in Group column. Rarefying counts Genus data are from previous chapter and we will use this object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) dada2_ps_rarefy_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) Normalization: See the Chapter 6 Pre-processing dada2_ps_rarefy_genus_rb &lt;- XMAS2::normalize(dada2_ps_rarefy_genus, method = &quot;TSS&quot;) dada2_ps_rarefy_genus_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] Check for the core ASVs Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(dada2_ps_rarefy_genus_rb, detection = 0.01, prevalence = 0.8) print(core_taxa_name) ## [1] &quot;g__Bifidobacterium&quot; &quot;g__Blautia&quot; ## [3] &quot;g__Lachnospiraceae_unclassified&quot; Result: Only three genera (g__Bifidobacterium, g__Blautia and g__Lachnospiraceae_unclassified) passed the threshold of detection and prevalence which we choose. 10.2 Core abundance and diversity Total core abundance in each sample (sum of abundances of the core members): core_abundance &lt;- sample_sums(phyloseq_core_taxa(dada2_ps_rarefy_genus_rb, detection = 0.01, prevalence = 0.8)) DT::datatable(data.frame(core_abundance)) 10.3 Core visualization We display the taxa based on the prevalence and detection via two ways (heatmap or linechart plot). 10.3.1 heatmap Core with composition prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;heatmap&quot;, colours = gray(seq(0, 1, length=5)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) pl_core Figure 10.1: Core with composition in Heatmap The degree of color indicates the size of abundance and prevalence. other colors: viridis library(viridis) print(pl_core + scale_fill_viridis()) Figure 10.2: Core with composition in Heatmap (viridis) change color library(RColorBrewer) prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;heatmap&quot;, colours = rev(brewer.pal(5, &quot;Spectral&quot;)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) pl_core Figure 10.3: Core with composition in Heatmap (RColorBrewer) 10.3.2 linechart This plot show the relationship between Detection and Prevalence in a linear model. prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;lineplot&quot;, prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) pl_core Figure 10.4: Core with composition in linechart When increasing the Detection, the core size turns to low level. 10.4 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] RColorBrewer_1.1-2 viridis_0.6.2 viridisLite_0.4.0 ## [4] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [7] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [10] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [13] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [16] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [19] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [22] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [25] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.2 reticulate_1.24 tidyselect_1.1.2 ## [4] RSQLite_2.2.10 AnnotationDbi_1.56.2 htmlwidgets_1.5.4 ## [7] grid_4.1.2 BiocParallel_1.28.3 Rtsne_0.15 ## [10] munsell_0.5.0 codetools_0.2-18 DT_0.21 ## [13] umap_0.2.8.0 withr_2.5.0 colorspace_2.0-3 ## [16] highr_0.9 knitr_1.37 rstudioapi_0.13 ## [19] ggsignif_0.6.3 labeling_0.4.2 GenomeInfoDbData_1.2.7 ## [22] bit64_4.0.5 farver_2.1.0 rhdf5_2.38.1 ## [25] vctrs_0.3.8 generics_0.1.2 TH.data_1.1-0 ## [28] xfun_0.30 R6_2.5.1 locfit_1.5-9.5 ## [31] bitops_1.0-7 rhdf5filters_1.6.0 microbiome_1.16.0 ## [34] cachem_1.0.6 DelayedArray_0.20.0 assertthat_0.2.1 ## [37] scales_1.1.1 multcomp_1.4-18 nnet_7.3-17 ## [40] gtable_0.3.0 sandwich_3.0-1 rlang_1.0.2 ## [43] genefilter_1.76.0 splines_4.1.2 rstatix_0.7.0 ## [46] broom_0.7.12 checkmate_2.0.0 yaml_2.3.5 ## [49] reshape2_1.4.4 abind_1.4-5 crosstalk_1.2.0 ## [52] backports_1.4.1 Hmisc_4.6-0 DiagrammeR_1.0.9 ## [55] tools_4.1.2 bookdown_0.24 ellipsis_0.3.2 ## [58] gplots_3.1.1 jquerylib_0.1.4 biomformat_1.22.0 ## [61] Rcpp_1.0.8.2 plyr_1.8.6 base64enc_0.1-3 ## [64] visNetwork_2.1.0 zlibbioc_1.40.0 purrr_0.3.4 ## [67] RCurl_1.98-1.6 rpart_4.1.16 openssl_2.0.0 ## [70] Wrench_1.12.0 cowplot_1.1.1 zoo_1.8-9 ## [73] ggrepel_0.9.1 cluster_2.1.2 magrittr_2.0.2 ## [76] data.table_1.14.2 RSpectra_0.16-0 mvtnorm_1.1-3 ## [79] evaluate_0.15 xtable_1.8-4 XML_3.99-0.9 ## [82] jpeg_0.1-9 gridExtra_2.3 shape_1.4.6 ## [85] compiler_4.1.2 KernSmooth_2.23-20 crayon_1.5.0 ## [88] htmltools_0.5.2 mgcv_1.8-39 Formula_1.2-4 ## [91] tidyr_1.2.0 geneplotter_1.72.0 libcoin_1.0-9 ## [94] DBI_1.1.2 corrplot_0.92 MASS_7.3-55 ## [97] Matrix_1.4-0 ade4_1.7-18 car_3.0-12 ## [100] cli_3.2.0 parallel_4.1.2 igraph_1.2.11 ## [103] pkgconfig_2.0.3 coin_1.4-2 foreign_0.8-82 ## [106] foreach_1.5.2 annotate_1.72.0 bslib_0.3.1 ## [109] multtest_2.50.0 XVector_0.34.0 stringr_1.4.0 ## [112] digest_0.6.29 Biostrings_2.62.0 rmarkdown_2.13 ## [115] htmlTable_2.4.0 edgeR_3.36.0 gtools_3.9.2 ## [118] modeltools_0.2-23 lifecycle_1.0.1 jsonlite_1.8.0 ## [121] Rhdf5lib_1.16.0 carData_3.0-5 askpass_1.1 ## [124] limma_3.50.1 fansi_1.0.2 pillar_1.7.0 ## [127] ggsci_2.9 KEGGREST_1.34.0 fastmap_1.1.0 ## [130] httr_1.4.2 survival_3.3-1 glue_1.6.2 ## [133] png_0.1-7 iterators_1.0.14 glmnet_4.1-3 ## [136] bit_4.0.4 stringi_1.7.6 sass_0.4.0 ## [139] metagenomeSeq_1.36.0 blob_1.2.2 DESeq2_1.34.0 ## [142] latticeExtra_0.6-29 caTools_1.18.2 memoise_2.0.1 References "],["differential-analysis.html", "Chapter 11 Differential analysis 11.1 Amplicon sequencing microbial data (16s) 11.2 Metagenomic sequencing microbial data (metaphlan2/3) 11.3 Visualization 11.4 Dominant taxa 11.5 Multiple differential analysis by one function 11.6 Systematic Information", " Chapter 11 Differential analysis Identifying the significant taxa between case and control group is necessary. There are too many differential analysis (DA) approaches to choose (Nearing et al. 2022), we provide some of them which focusing on microbial data, including: Tool(version) Input Normalization Transformation Distribution MicrobialData ALDEx2 (1.26.0) Counts None CLR Dirichlet-multinormial 16s limma voom (3.50.1) Counts/Relative None/TMM Log; Precision weighting Normal 16s/MGS mbzinb (0.2) Counts RLE None zero-inflated negative binomial 16s omnibus (0.2) Counts GMPR(Geometric Mean of Pairwise Ratios) None zero-inflated negative binomial 16s RAIDA (1.0) Counts None zero-inflated log normal modified t-test 16s Wilcox(rare/CLR) Counts/Relative None None/CLR Non-parametric 16s/MGS LEfSe Rarefied Counts//Relative TSS None Non-parametric 16s/MGS t-test (rare) Counts//Relative None None Normal 16s/MGS metagenomeSeq (1.36.0) Counts CSS Log Zero-inflated (log) Normal 16s DESeq2 (1.34.0) Counts RLE None Negative binomial 16s edgeR (3.36.0) Counts RLE/TMM None Negative binomial 16s ANCOM-II (2.1) Counts/Relative None ALR Non-parametric 16s/MGS Corncob (0.2.0) Counts None None Beta-binomial 16s MaAslin2 (1.8.0) Counts/Relative abundance None/TSS AST Normal 16s/MGS Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 11.1 Amplicon sequencing microbial data (16s) We use the same strategy to filter phyloseq object. data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others #dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] 11.1.1 ALDEx2 ALDEx2 package is from Unifying the analysis of high-throughput sequencing datasets: characterizing RNA-seq, 16S rRNA gene sequencing and selective growth experiments by compositional data analysis (Fernandes et al. 2014), and its principle is using log-ratio transformation and statistical testing to find the significant Taxa. (Caution: the otu_table must be integers). run_aldex provides 11 parameters. For instance, norm and transform are used to normalization and transformation input data. More details to see help(run_aldex). DA_ALDEx2 &lt;- run_aldex( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; ## [9] &quot;Median CLR\\nBB&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [11] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [15] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [17] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [21] &quot;Odds Ratio (95% CI)&quot; head(DA_ALDEx2) ## TaxaID Block Enrichment EffectSize Pvalue AdjustedPvalue ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.07239664 0.6829697 0.9074981 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.13567685 0.6264621 0.9051654 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.33922392 0.3086642 0.7773584 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif -0.08944437 0.6774884 0.9159834 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif -0.08293411 0.5757626 0.8766907 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif -0.06025205 0.6819865 0.9219725 ## Median CLR \\n(All) Median CLR\\nAA Median CLR\\nBB Log2FoldChange (Median)\\nAA_vs_BB ## 1 -3.6962601 -3.933943 -3.53755567 NA ## 2 2.5968337 1.897346 3.08696471 -0.9577718 ## 3 -0.7605107 -2.145597 0.06294616 NA ## 4 5.3290908 5.767424 5.23163019 0.1524904 ## 5 -3.2358773 -3.032950 -3.37837145 NA ## 6 3.5138246 4.455583 3.34614921 -0.1085245 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB ## 1 0 0 0.0 ## 2 30 26 50.5 ## 3 0 0 9.0 ## 4 316 329 296.0 ## 5 0 0 0.0 ## 6 64 64 69.0 ## Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA ## 1 1.7051442 58.82609 101.777778 ## 2 -1.3107676 50.91304 26.777778 ## 3 -2.4683647 19.21739 5.111111 ## 4 1.7488297 996.26087 1740.444444 ## 5 -2.1676332 93.78261 30.000000 ## 6 0.2000385 163.86957 177.888889 ## Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB ## 1 31.21429 21.74 22.22 21.43 ## 2 66.42857 82.61 88.89 78.57 ## 3 28.28571 43.48 33.33 50.00 ## 4 517.85714 65.22 55.56 71.43 ## 5 134.78571 21.74 22.22 21.43 ## 6 154.85714 73.91 77.78 71.43 ## Odds Ratio (95% CI) ## 1 0.67 (-0.11;1.5) ## 2 4.1 (6.8;1.3) ## 3 8.6 (13;4.3) ## 4 0.39 (-1.4;2.2) ## 5 1.5 (2.3;0.71) ## 6 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by ALDEx2; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by ALDEx2; Median CLR (All)/(group AA)/(group BB): Median CLR (normalization by ALDEx2) in all, group AA and group BB, respectively; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in ALDEx2. run_da() pattern We also provide another function run_da to run ALDEx2 differential analysis. DA_ALDEx2 &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;aldex&quot;, method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; ## [9] &quot;Median CLR\\nBB&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [11] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [15] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [17] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [21] &quot;Odds Ratio (95% CI)&quot; otu_table or sample_table as inputdata We also provide data_otu and data_sam as input data to run run_aldex. DA_ALDEx2 &lt;- run_aldex( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; ## [9] &quot;Median CLR\\nBB&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [11] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [15] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [17] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [21] &quot;Odds Ratio (95% CI)&quot; taxa_level option We also provide taxa_level for choosing the specific taxonomic level to run run_aldex. DA_ALDEx2 &lt;- run_aldex( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; ## [9] &quot;Median CLR\\nBB&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [11] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [15] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [17] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [21] &quot;Odds Ratio (95% CI)&quot; 11.1.2 limma_voom limma package is from voom: Precision weights unlock linear model analysis tools for RNA-seq read counts (Law et al. 2014). Firstly, transforming count data to log2-counts per million (logCPM), estimate the mean-variance relationship and use this to compute appropriate observation-level weights. Secondly, fitting multiple linear models by weighted or generalized least squares. Finally, performing empirical bayes statistics for differential expression. run_limma_voom provides 11 parameters. For instance, norm and transform are used to normalization and transformation input data. More details to see help(run_limma_voom). DA_limma_voom &lt;- run_limma_voom( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_limma_voom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;logFC&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_limma_voom) ## TaxaID Block Enrichment EffectSize logFC Pvalue ## 1 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB Nonsignif 5.026490 5.026490 0.0009204053 ## 2 g__Intestinibacter 9_AA vs 14_BB Nonsignif 4.689815 4.689815 0.0015682197 ## 3 g__Romboutsia 9_AA vs 14_BB Nonsignif 4.756742 4.756742 0.0034087111 ## 4 g__Ruminococcaceae_UCG_004 9_AA vs 14_BB Nonsignif -3.933508 -3.933508 0.0188321702 ## 5 g__Lactobacillus 9_AA vs 14_BB Nonsignif 3.886899 3.886899 0.0221288616 ## 6 g__Veillonella 9_AA vs 14_BB Nonsignif 3.430915 3.430915 0.0259684765 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.07370632 NA 11 ## 2 0.07370632 NA 14 ## 3 0.10680628 -7.036174 107 ## 4 0.40047179 NA 11 ## 5 0.40047179 -3.033423 56 ## 6 0.40047179 NA 13 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 0 39.5 -4.884638 ## 2 0 58.0 -2.157952 ## 3 2 262.5 -3.131606 ## 4 104 0.0 2.275424 ## 5 24 196.5 -5.090571 ## 6 0 40.5 -0.635927 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 257.21739 14.00000 413.57143 60.87 ## 2 83.56522 26.88889 120.00000 60.87 ## 3 296.47826 51.77778 453.78571 78.26 ## 4 65.26087 126.22222 26.07143 52.17 ## 5 791.26087 37.44444 1275.85714 86.96 ## 6 65.52174 49.00000 76.14286 56.52 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 85.71 11000 (11000;11000) ## 2 22.22 85.71 4.2 (7;1.4) ## 3 55.56 92.86 37 (44;30) ## 4 77.78 35.71 0.17 (-3.3;3.6) ## 5 77.78 92.86 1.8e+08 (1.8e+08;1.8e+08) ## 6 22.22 78.57 1.3 (1.8;0.79) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by limma; logFC: LogFC from groups’ coefficient by limma; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by limma; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in limma. other options for limma-voom if(0) { DA_limma_voom &lt;- run_limma_voom( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_limma_voom &lt;- run_limma_voom( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_limma_voom &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(DA_limma_voom) } 11.1.3 mbzinb mbzinb package is from An omnibus test for differential distribution analysis of microbiome sequencing data (J. Chen et al. 2018). It uses zeroinflated negative binomial model to investigate the significant taxa. (Caution: the otu_table must be integers). DA_mbzinb &lt;- run_mbzinb( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_mbzinb) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;Pvalue&quot; ## [5] &quot;AdjustedPvalue&quot; &quot;EffectSize&quot; ## [7] &quot;base.mean&quot; &quot;mean.LFC&quot; ## [9] &quot;base.abund&quot; &quot;abund.LFC&quot; ## [11] &quot;base.prev&quot; &quot;prev.change&quot; ## [13] &quot;base.disp&quot; &quot;disp.LFC&quot; ## [15] &quot;statistic&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [17] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [19] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [21] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [23] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [25] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [27] &quot;Odds Ratio (95% CI)&quot; head(DA_mbzinb) ## TaxaID Block Enrichment Pvalue AdjustedPvalue ## 1 g__Lactobacillus 9_AA vs 14_BB Nonsignif 0.003080337 0.1719279 ## 2 g__Veillonella 9_AA vs 14_BB Nonsignif 0.005686254 0.1719279 ## 3 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB Nonsignif 0.006927761 0.1719279 ## 4 g__Ruminiclostridium_5 9_AA vs 14_BB Nonsignif 0.007316082 0.1719279 ## 5 g__Intestinibacter 9_AA vs 14_BB Nonsignif 0.014271033 0.2063066 ## 6 g__Romboutsia 9_AA vs 14_BB Nonsignif 0.015319618 0.2063066 ## EffectSize base.mean mean.LFC base.abund abund.LFC base.prev prev.change base.disp ## 1 1238.41270 33.04066 4.5637942 41.89243 4.2857354 0.7887024 0.1676483 0.87559689 ## 2 27.14286 40.19925 0.6436683 180.85020 -1.1919001 0.2222793 0.5710621 0.05956404 ## 3 399.57143 9.95499 4.6283681 43.43914 2.5028760 0.2291710 0.7708210 1.13937611 ## 4 25.62698 29.88426 0.8485199 29.88426 1.0706021 1.0000000 -0.1426729 0.11934577 ## 5 93.11111 19.19355 2.2016604 75.51123 0.4356221 0.2541814 0.6103370 2.58097390 ## 6 402.00794 38.54948 3.3294991 65.20531 2.6641701 0.5912015 0.3464026 1.66131464 ## disp.LFC statistic Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 1.2857331 13.87500 -3.0334230 56 ## 2 3.9688755 12.56199 NA 13 ## 3 1.5408637 12.13717 NA 11 ## 4 1.7731358 12.01967 -0.3289485 45 ## 5 -1.4780782 10.57342 NA 14 ## 6 -0.4193493 10.41913 -7.0361736 107 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 24 196.5 -5.0905713 ## 2 0 40.5 -0.6359270 ## 3 0 39.5 -4.8846378 ## 4 41 51.5 -0.7849381 ## 5 0 58.0 -2.1579524 ## 6 2 262.5 -3.1316062 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 791.26087 37.44444 1275.85714 86.96 ## 2 65.52174 49.00000 76.14286 56.52 ## 3 257.21739 14.00000 413.57143 60.87 ## 4 51.04348 35.44444 61.07143 91.30 ## 5 83.56522 26.88889 120.00000 60.87 ## 6 296.47826 51.77778 453.78571 78.26 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 77.78 92.86 1.8e+08 (1.8e+08;1.8e+08) ## 2 22.22 78.57 1.3 (1.8;0.79) ## 3 22.22 85.71 11000 (11000;11000) ## 4 100.00 85.71 2.4 (4.2;0.69) ## 5 22.22 85.71 4.2 (7;1.4) ## 6 55.56 92.86 37 (44;30) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by mbzinb; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by mbzinb; base.mean: fitted mean abundance parameter times the fitted prevalence in baseline group; mean.LFC: log2-fold change in fitted mean between other group and baseline; base.abund: fitted mean abundance parameter in baseline group; abund.LFC: log2-fold change in fitted mean abundance parameter between other group and baseline; base.prev: fitted prevalence in baseline group; prev.change: (linear) difference in prevalence between baseline group and other group (other-baseline); base.disp: fitted dispersion parameter in baseline group; disp.LFC: log2-fold change in fitted dispersion parameter between other group and baseline; statistic: value of likelihood ratio test statistic; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in mbzinb. other options for mbzinb if(0) { DA_mbzinb &lt;- run_mbzinb( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_mbzinb &lt;- run_mbzinb( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_mbzinb &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(DA_mbzinb) } 11.1.4 omnibus This approach is also from mbzinb (J. Chen et al. 2018) package. it uses GMPR (Geometric Mean of Pairwise Ratios) (L. Chen et al. 2018) to get the size factors. where we specify models for count (abundance), zero (prevalence) and dispersion part. We also provide likelihood ratio test (zinb.lrt) for different models. (Caution: the otu_table must be integers). DA_omnibus &lt;- run_omnibus( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) ## Start GMPR normalization ... ## Start Winsorization ... ## Perform filtering ... ## --A total of 87 taxa will be tested with a sample size of 23 ! ## --Omnibus test is selected! ## --Dispersion is treated as a parameter of interest! ## Start testing ... ## 10 % ## 20 % ## 30 % ## 40 % ## 50 % ## 60 % ## 70 % ## 80 % ## 90 % ## 100%! ## Handle failed taxa using permutation test! ## Permutation test .... ## Completed! colnames(DA_omnibus) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;Pvalue&quot; ## [5] &quot;AdjustedPvalue&quot; &quot;EffectSize&quot; ## [7] &quot;chi.stat&quot; &quot;df&quot; ## [9] &quot;abund.baseline&quot; &quot;prev.baseline&quot; ## [11] &quot;dispersion.baseline&quot; &quot;abund.LFC.CompvarBB.est&quot; ## [13] &quot;abund.LFC.CompvarBB.se&quot; &quot;prev.LOD.CompvarBB.est&quot; ## [15] &quot;prev.LOD.CompvarBB.se&quot; &quot;dispersion.LFC.CompvarBB.est&quot; ## [17] &quot;dispersion.LFC.CompvarBB.se&quot; &quot;method&quot; ## [19] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [21] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; ## [23] &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [25] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [27] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [29] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_omnibus) ## TaxaID Block Enrichment Pvalue AdjustedPvalue EffectSize ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.26993990 0.6960000 70.56349 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.14553831 0.5275764 39.65079 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.06379234 0.4269179 23.17460 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.12015581 0.5220000 1222.58730 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 0.86180157 0.9186186 104.78571 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 0.97964464 0.9800328 23.03175 ## chi.stat df abund.baseline prev.baseline dispersion.baseline abund.LFC.CompvarBB.est ## 1 3.9226381 3 0.0051278458 0.2912821 0.2037930 -0.37106147 ## 2 5.3872772 3 0.0006995458 0.8894855 3.1449736 0.72928600 ## 3 7.2692892 3 0.0003689644 0.3333678 11.4842094 1.28359134 ## 4 5.8304723 3 0.0560610913 0.5555645 1.6248619 -1.15961032 ## 5 0.7482458 3 0.0031679714 0.2351930 0.5224326 -0.85062762 ## 6 0.1870987 3 0.0049913684 0.7814974 1.0034163 0.01952004 ## abund.LFC.CompvarBB.se prev.LOD.CompvarBB.est prev.LOD.CompvarBB.se ## 1 1.4052050 -0.4101193 0.9810350 ## 2 0.3066857 -0.7729345 1.2481748 ## 3 0.3623742 0.6963880 0.8863818 ## 4 0.4774192 0.6971297 0.8947782 ## 5 1.7380445 2.3859635 1.0103235 ## 6 0.4762646 -0.3538909 1.0006899 ## dispersion.LFC.CompvarBB.est dispersion.LFC.CompvarBB.se method ## 1 2.8157726 1.1350785 omnibus ## 2 -0.5258551 0.6760915 omnibus ## 3 -1.8335068 1.5022561 omnibus ## 4 -0.5315454 0.7007912 omnibus ## 5 -2.4754249 1.0588367 omnibus ## 6 0.1699865 0.6267560 omnibus ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 NA 0 0 ## 2 -0.9577718 30 26 ## 3 NA 0 0 ## 4 0.1524904 316 329 ## 5 NA 0 0 ## 6 -0.1085245 64 64 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0 1.7051442 58.82609 ## 2 50.5 -1.3107676 50.91304 ## 3 9.0 -2.4683647 19.21739 ## 4 296.0 1.7488297 996.26087 ## 5 0.0 -2.1676332 93.78261 ## 6 69.0 0.2000385 163.86957 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 101.777778 31.21429 21.74 22.22 ## 2 26.777778 66.42857 82.61 88.89 ## 3 5.111111 28.28571 43.48 33.33 ## 4 1740.444444 517.85714 65.22 55.56 ## 5 30.000000 134.78571 21.74 22.22 ## 6 177.888889 154.85714 73.91 77.78 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.43 0.67 (-0.11;1.5) ## 2 78.57 4.1 (6.8;1.3) ## 3 50.00 8.6 (13;4.3) ## 4 71.43 0.39 (-1.4;2.2) ## 5 21.43 1.5 (2.3;0.71) ## 6 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by omnibus; chi.stat: chisquare statistics; df: degree freedom; abund.baseline: mean abundance in baseline group; prev.baseline: prevalence in baseline group; dispersion.baseline: dispersion in baseline group; abund.LFC.CompvarBB.est: log2-fold change in abundance between group BB and other group; abund.LFC.CompvarBB.se: log2-fold change of standard errors in abundance between group BB and other group; prev.LOD.CompvarBB.est: prevalence of low of detect value in group BB; prev.LOD.CompvarBB.se: prevalence’s standard errors of low of detect value in group BB; dispersion.LFC.CompvarBB.est: log2-fold change in dispersion in group BB; dispersion.LFC.CompvarBB.se: log2-fold change in dispersion’s standard errors in group BB; method: methods of test; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in omnibus. other options for omnibus if(0) { DA_omnibus &lt;- run_omnibus( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) DA_omnibus &lt;- run_omnibus( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) DA_omnibus &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;omnibus&quot;, method = &quot;omnibus&quot;) head(DA_omnibus) } 11.1.5 RAIDA RAIDA package is from A robust approach for identifying differentially abundant features in metagenomic samples (Sohn, Du, and An 2015). It uses Ratio Approach for Identifying Differential Abundance (RAIDA). (Caution: the otu_table must be integers). DA_RAIDA &lt;- run_raida( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_RAIDA) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;eta_AA&quot; &quot;mean_AA&quot; ## [9] &quot;sd_AA&quot; &quot;eta_BB&quot; ## [11] &quot;mean_BB&quot; &quot;sd_BB&quot; ## [13] &quot;mod.pool.var&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [15] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [17] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [19] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [21] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [23] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [25] &quot;Odds Ratio (95% CI)&quot; head(DA_RAIDA) ## TaxaID Block Enrichment EffectSize Pvalue ## 1 g__Megasphaera 9_AA vs 14_BB Nonsignif 409.19048 0.004581601 ## 2 g__Romboutsia 9_AA vs 14_BB Nonsignif 402.00794 0.025287679 ## 3 g__Lactobacillus 9_AA vs 14_BB Nonsignif 1238.41270 0.033492279 ## 4 g__Tyzzerella 9_AA vs 14_BB Nonsignif 75.78571 0.059752064 ## 5 g__Christensenellaceae_R_7_group 9_AA vs 14_BB Nonsignif 44.21429 0.068999409 ## 6 g__Faecalibacterium 9_AA vs 14_BB Nonsignif 2742.60317 0.077398760 ## AdjustedPvalue eta_AA mean_AA sd_AA eta_BB mean_BB sd_BB mod.pool.var ## 1 0.3848544 0.6666667 1.550194 0.4452225 0.64285714 -1.2212162 1.074673 1.185998 ## 2 0.7391453 0.4444444 -3.748832 1.5814829 0.07142857 -1.4673045 2.085972 3.260003 ## 3 0.7391453 0.2222222 -3.438359 1.7766726 0.07142857 -1.2509083 2.484244 4.276535 ## 4 0.7391453 0.4444444 -2.455253 1.3348729 0.78571429 -5.1233546 3.191661 3.081402 ## 5 0.7391453 0.6666667 -2.344046 0.5621146 0.64285714 -4.4200897 1.890465 2.021487 ## 6 0.7391453 0.3333333 1.247464 0.6483325 0.28571429 0.1846047 1.206605 1.221271 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 NA 0 0 ## 2 -7.036174 107 2 ## 3 -3.033423 56 24 ## 4 NA 0 4 ## 5 NA 0 0 ## 6 2.400169 1373 4537 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0 1.738259 335.26087 ## 2 262.5 -3.131606 296.47826 ## 3 196.5 -5.090571 791.26087 ## 4 0.0 2.433624 46.86957 ## 5 0.0 1.801549 35.08696 ## 6 859.5 1.436918 2679.47826 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 584.33333 175.14286 34.78 33.33 ## 2 51.77778 453.78571 78.26 55.56 ## 3 37.44444 1275.85714 86.96 77.78 ## 4 93.00000 17.21429 34.78 55.56 ## 5 62.00000 17.78571 34.78 33.33 ## 6 4348.88889 1606.28571 69.57 66.67 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 35.71 0.54 (-0.65;1.7) ## 2 92.86 37 (44;30) ## 3 92.86 1.8e+08 (1.8e+08;1.8e+08) ## 4 21.43 0.4 (-1.4;2.2) ## 5 35.71 0.54 (-0.65;1.7) ## 6 71.43 0.37 (-1.6;2.3) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by RAIDA; eta_AA: vector containing estimated probabilities of the false zero state for group AA; mean_AA: vector containing estimated means of log ratios for group AA; sd_AA: vector containing estimated standard deviations of log ratios for group AA; eta_BB: vector containing estimated probabilities of the false zero state for group BB; mean_BB: vector containing estimated means of log ratios for group BB; sd_BB: vector containing estimated standard deviations of log ratios for group BB; mod.pool.var: vector containing estimated posterior variances of log ratios; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in RAIDA. other options for RAIDA if (0) { DA_RAIDA &lt;- run_raida( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_RAIDA &lt;- run_raida( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_RAIDA &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;raida&quot;) head(DA_RAIDA) } 11.1.6 Wilcoxon Rank Sum and Signed Rank Tests Wilcoxon Rank Sum and Signed Rank Tests, which are nonparametric test methods, use the rank of taxa abundance to find the significant taxa. Ordinary pattern DA_wilcox &lt;- run_wilcox( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_wilcox) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; ## [15] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [17] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 70.56349 63.5 1.0000000 1.0000000 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 39.65079 44.5 0.2556616 0.7346565 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 23.17460 44.0 0.1980169 0.7346565 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 1222.58730 71.0 0.6293971 0.9192573 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 104.78571 64.5 0.9304707 0.9718249 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 23.03175 67.0 0.8239942 0.9445787 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 NA 0 0 ## 2 -0.9577718 30 26 ## 3 NA 0 0 ## 4 0.1524904 316 329 ## 5 NA 0 0 ## 6 -0.1085245 64 64 ## Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA ## 1 0.0 0.01201252 12.06 ## 2 50.5 -0.42227633 9.94 ## 3 9.0 -0.43387758 9.89 ## 4 296.0 0.17342686 12.89 ## 5 0.0 0.03358045 12.17 ## 6 69.0 0.08724541 12.44 ## Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 11.96 21.74 22.22 ## 2 13.32 82.61 88.89 ## 3 13.36 43.48 33.33 ## 4 11.43 65.22 55.56 ## 5 11.89 21.74 22.22 ## 6 11.71 73.91 77.78 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.43 0.67 (-0.11;1.5) ## 2 78.57 4.1 (6.8;1.3) ## 3 50.00 8.6 (13;4.3) ## 4 71.43 0.39 (-1.4;2.2) ## 5 21.43 1.5 (2.3;0.71) ## 6 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean Rank)_vs_BB**: Log2FoldChange (Mean Rank Abundance) between group AA and group BB; Mean Rank Abundance (All)/(group AA)/(group BB): Mean Rank Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for wilcox if (0) { DA_wilcox &lt;- run_wilcox( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_wilcox &lt;- run_wilcox( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_wilcox &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;) head(DA_wilcox) } wilcox_rarefy: random subsampling counts to the smallest library size in the data set. # summary summarize_phyloseq(dada2_ps_genus_filter_trim) ## [[1]] ## [1] &quot;1] Min. number of reads = 32359&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 49328&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1008016&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 43826.7826086957&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 45596&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.501304347826087&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? NO&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 0&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; # run DA_wilcox_rarefy &lt;- run_wilcox( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;rarefy&quot;) colnames(DA_wilcox_rarefy) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; ## [15] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [17] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for wilcox_rarefy if (0) { DA_wilcox_rarefy &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;, norm = &quot;rarefy&quot;) head(DA_wilcox_rarefy) } wilcox_CLR: centered log-ratio normalization. DA_wilcox_CLR &lt;- run_wilcox( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CLR&quot;) colnames(DA_wilcox_CLR) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; ## [15] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [17] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for wilcox_CLR if(0) { DA_wilcox_CLR &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;, norm = &quot;CLR&quot;) head(DA_wilcox_CLR) } 11.1.7 Liner discriminant analysis (LDA) effect size (LEfSe) LEfSe method is from Metagenomic biomarker discovery and explanation (Segata et al. 2011). It uses Liner discriminant analysis model to identify Differential Taxa. DA_lefse &lt;- run_lefse( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) colnames(DA_lefse) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;LDA_Score&quot; ## [5] &quot;EffectSize&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [7] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [9] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [11] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [13] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [15] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [17] &quot;Odds Ratio (95% CI)&quot; head(DA_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize ## 1 g__Parasutterella 9_AA vs 14_BB AA -0.0012113186 0.85650392 ## 2 g__Intestinibacter 9_AA vs 14_BB AA -0.0003598346 1.93147690 ## 3 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB BB 0.0005584072 1.82912951 ## 4 g__Ruminococcaceae_UCG_004 9_AA vs 14_BB BB 0.0022136965 0.90316718 ## 5 g__Odoribacter 9_AA vs 14_BB BB 0.0022496059 1.51101169 ## 6 g__Romboutsia 9_AA vs 14_BB BB 0.0025649993 0.03488245 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 4.402050 1.727713e-04 1.080357e-03 ## 2 NA 3.835091e-04 0.000000e+00 ## 3 NA 2.251192e-04 0.000000e+00 ## 4 NA 2.412492e-04 2.451905e-03 ## 5 NA 2.193175e-05 6.049999e-04 ## 6 -6.856424 2.189796e-03 5.035627e-05 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 5.109966e-05 4.481148 0.0039010977 ## 2 1.398797e-03 -1.964554 0.0018833386 ## 3 1.173882e-03 -4.746617 0.0058619051 ## 4 0.000000e+00 2.342928 0.0014432092 ## 5 0.000000e+00 2.099583 0.0005780758 ## 6 5.835026e-03 -3.334490 0.0070941306 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 0.0093203061 0.0004173209 65.22 88.89 ## 2 0.0006806440 0.0026564994 60.87 22.22 ## 3 0.0003503379 0.0094050554 60.87 22.22 ## 4 0.0028227139 0.0005563847 52.17 77.78 ## 5 0.0010839017 0.0002529020 52.17 77.78 ## 6 0.0010861419 0.0109564090 78.26 55.56 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 50.00 0.0025 (-12;12) ## 2 85.71 3.4 (5.8;1) ## 3 85.71 4900 (5000;4900) ## 4 35.71 0.14 (-3.7;4) ## 5 35.71 0.31 (-2;2.6) ## 6 92.86 76 (85;68) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by lefse; LDA_Score: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for lefse if (0) { DA_lefse &lt;- run_lefse( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) DA_lefse &lt;- run_lefse( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) DA_lefse &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;lefse&quot;, Lda = 0) head(DA_lefse) } 11.1.8 t-test T test, a parametric test method, identifies the significant taxa. Ordinary pattern DA_ttest &lt;- run_ttest( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_ttest) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (geometricmean)\\nAA_vs_BB&quot; ## [13] &quot;GeometricMean Abundance\\n(All)&quot; &quot;GeometricMean Abundance\\nAA&quot; ## [15] &quot;GeometricMean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ttest) ## TaxaID Block Enrichment EffectSize Statistic Pvalue ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 70.56349 0.6845254 0.51170983 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 39.65079 -1.9079866 0.07478702 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 23.17460 -2.1601919 0.04743155 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 1222.58730 1.4034718 0.19417159 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 104.78571 -0.7632086 0.45788140 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 23.03175 0.2691871 0.79125424 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.7287988 NA 0 ## 2 0.6684286 -0.9577718 30 ## 3 0.6684286 NA 0 ## 4 0.6684286 0.1524904 316 ## 5 0.7184909 NA 0 ## 6 0.9131904 -0.1085245 64 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (geometricmean)\\nAA_vs_BB ## 1 0 0.0 2.674648 ## 2 26 50.5 -2.270362 ## 3 0 9.0 -3.268970 ## 4 329 296.0 1.413058 ## 5 0 0.0 -3.452848 ## 6 64 69.0 -2.043760 ## GeometricMean Abundance\\n(All) GeometricMean Abundance\\nAA GeometricMean Abundance\\nBB ## 1 1.2740132 4.3847026 0.6867376 ## 2 0.6530643 0.1647934 0.7950361 ## 3 0.9776732 0.1479603 1.4262753 ## 4 0.7929084 1.0990412 0.4127063 ## 5 1.3734381 0.4150530 4.5447977 ## 6 0.4449523 0.2025430 0.8351231 ## Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.74 22.22 21.43 0.67 (-0.11;1.5) ## 2 82.61 88.89 78.57 4.1 (6.8;1.3) ## 3 43.48 33.33 50.00 8.6 (13;4.3) ## 4 65.22 55.56 71.43 0.39 (-1.4;2.2) ## 5 21.74 22.22 21.43 1.5 (2.3;0.71) ## 6 73.91 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (GeometricMean)_vs_BB**: Log2FoldChange (GeometricMean Abundance) between group AA and group BB; GeometricMean Abundance (All)/(group AA)/(group BB): GeometricMean Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for t-test if (0) { DA_ttest &lt;- run_ttest( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ttest &lt;- run_ttest( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ttest &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;) head(DA_ttest) } t-test_rarefy: random subsampling counts to the smallest library size in the data set. DA_ttest_rarefy &lt;- run_ttest( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;rarefy&quot;) colnames(DA_ttest_rarefy) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (geometricmean)\\nAA_vs_BB&quot; ## [13] &quot;GeometricMean Abundance\\n(All)&quot; &quot;GeometricMean Abundance\\nAA&quot; ## [15] &quot;GeometricMean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for ttest_rarefy if (0) { DA_ttest_rarefy &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;, norm = &quot;rarefy&quot;) head(DA_ttest_rarefy) } 11.1.9 MetagenomeSeq MetagenomeSeq package is from Differential abundance analysis for microbial marker-gene surveys (Paulson et al. 2013). It uses zero-inflated Log-Normal mixture model or Zero-inflated Gaussian mixture model to identify the significant taxa between groups. (Caution: the otu_table should be integers). DA_metagenomeseq &lt;- run_metagenomeseq( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) colnames(DA_metagenomeseq) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;logFC&quot; ## [5] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;se&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_metagenomeseq) ## TaxaID Block Enrichment logFC Pvalue ## 1 g__Romboutsia 9_AA vs 14_BB Nonsignif 1.593566 0.001706697 ## 2 g__Megasphaera 9_AA vs 14_BB Nonsignif -1.732388 0.009444791 ## 3 g__Intestinibacter 9_AA vs 14_BB Nonsignif 1.205580 0.009519124 ## 4 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB Nonsignif 1.322139 0.026099811 ## 5 g__Haemophilus 9_AA vs 14_BB Nonsignif -1.249150 0.078021778 ## 6 g__Christensenellaceae_R_7_group 9_AA vs 14_BB Nonsignif -1.319493 0.079359285 ## AdjustedPvalue se Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.1604295 0.5079860 -5.777348 98.07516 ## 2 0.2982659 0.6674533 NA 0.00000 ## 3 0.2982659 0.4649679 NA 22.00489 ## 4 0.6133456 0.5942938 NA 10.08249 ## 5 0.8128851 0.7088254 NA 0.00000 ## 6 0.8128851 0.7520983 NA 0.00000 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 5.494505 301.35861 -4.038753 ## 2 0.000000 0.00000 3.202951 ## 3 0.000000 61.41378 -3.378525 ## 4 0.000000 42.61795 -6.115136 ## 5 0.000000 0.00000 1.744289 ## 6 0.000000 0.00000 1.022398 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 426.27423 41.005304 673.94712 78.26 ## 2 923.65546 2019.331511 219.29229 34.78 ## 3 104.22978 15.506231 161.26635 60.87 ## 4 357.04757 8.384505 581.18812 60.87 ## 5 89.30805 155.863624 46.52233 34.78 ## 6 27.97375 40.485129 19.93072 34.78 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 55.56 92.86 2100 (2200;2100) ## 2 33.33 35.71 0.29 (-2.1;2.7) ## 3 22.22 85.71 49 (57;42) ## 4 22.22 85.71 1.3e+11 (1.3e+11;1.3e+11) ## 5 22.22 42.86 0.63 (-0.28;1.5) ## 6 33.33 35.71 0.7 (-0.0096;1.4) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; se: standard error; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for metagenomeseq if (0) { DA_metagenomeseq &lt;- run_metagenomeseq( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) DA_metagenomeseq &lt;- run_metagenomeseq( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) DA_metagenomeseq&lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;metagenomeseq&quot;, norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) head(DA_metagenomeseq) } 11.1.10 DESeq2 DESeq2 package is from Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2 (Love, Huber, and Anders 2014). Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution.(Caution: the otu_table must be integers). DA_deseq2 &lt;- run_deseq2( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_deseq2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;Pvalue&quot; ## [5] &quot;AdjustedPvalue&quot; &quot;logFC&quot; ## [7] &quot;Statistic&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_deseq2) ## TaxaID Block Enrichment Pvalue AdjustedPvalue logFC ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.002388944 0.01759132 3.2744732 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.100346237 0.30103871 1.4768105 ## 3 g__Adlercreutzia 9_AA vs 14_BB BB 0.007237408 0.04509462 2.4566955 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.439215961 0.71505329 -0.8626086 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 0.451454925 NA -0.4992262 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 0.653088320 0.82656490 -0.4170110 ## Statistic Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 3.0370644 NA 0 0 ## 2 1.6431774 -0.9577718 30 26 ## 3 2.6857183 NA 0 0 ## 4 -0.7735179 0.1524904 316 329 ## 5 -0.7529917 NA 0 0 ## 6 -0.4494760 -0.1085245 64 64 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0 1.7051442 58.82609 ## 2 50.5 -1.3107676 50.91304 ## 3 9.0 -2.4683647 19.21739 ## 4 296.0 1.7488297 996.26087 ## 5 0.0 -2.1676332 93.78261 ## 6 69.0 0.2000385 163.86957 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 101.777778 31.21429 21.74 22.22 ## 2 26.777778 66.42857 82.61 88.89 ## 3 5.111111 28.28571 43.48 33.33 ## 4 1740.444444 517.85714 65.22 55.56 ## 5 30.000000 134.78571 21.74 22.22 ## 6 177.888889 154.85714 73.91 77.78 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.43 0.67 (-0.11;1.5) ## 2 78.57 4.1 (6.8;1.3) ## 3 50.00 8.6 (13;4.3) ## 4 71.43 0.39 (-1.4;2.2) ## 5 21.43 1.5 (2.3;0.71) ## 6 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; Statistic: test statistic (negative binomial model); Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for deseq2 if (0) { DA_deseq2 &lt;- run_deseq2( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_deseq2 &lt;- run_deseq2( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_deseq2 &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;deseq2&quot;) head(DA_deseq2) } 11.1.11 EdgeR EdgeR package is from A scaling normalization method for differential expression analysis of RNA-seq data (Robinson and Oshlack 2010). Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution. (Caution: the otu_table must be integers). DA_edger &lt;- run_edger( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 11.1: EdgeR (BVC distance) colnames(DA_edger) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;Pvalue&quot; ## [5] &quot;AdjPval&quot; &quot;logFC&quot; ## [7] &quot;logCPM&quot; &quot;LR&quot; ## [9] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [11] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; ## [13] &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [15] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [17] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [19] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_edger) ## TaxaID Block Enrichment Pvalue AdjPval ## 1 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB BB 2.581898e-05 0.001842448 ## 2 g__Lactobacillus 9_AA vs 14_BB BB 3.920102e-05 0.001842448 ## 3 g__Romboutsia 9_AA vs 14_BB BB 2.045466e-04 0.006148673 ## 4 g__Eubacterium 9_AA vs 14_BB Nonsignif 2.616456e-04 0.006148673 ## 5 g__Parasutterella 9_AA vs 14_BB AA 1.666532e-03 0.031076999 ## 6 g__Intestinibacter 9_AA vs 14_BB BB 1.983638e-03 0.031076999 ## logFC logCPM LR Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 6.673441 13.327173 17.703216 NA 11 ## 2 7.068223 16.214640 16.909687 -3.033423 56 ## 3 4.951091 13.656544 13.788850 -7.036174 107 ## 4 -3.816812 9.210384 13.326757 NA 0 ## 5 -3.225024 11.056077 9.884761 4.321928 7 ## 6 3.628517 11.041294 9.564615 NA 14 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 0 39.5 -4.884638 ## 2 24 196.5 -5.090571 ## 3 2 262.5 -3.131606 ## 4 0 0.0 2.440393 ## 5 50 2.5 4.373725 ## 6 0 58.0 -2.157952 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 257.217391 14.00000 413.571429 60.87 ## 2 791.260870 37.44444 1275.857143 86.96 ## 3 296.478261 51.77778 453.785714 78.26 ## 4 9.173913 18.22222 3.357143 30.43 ## 5 167.565217 398.33333 19.214286 65.22 ## 6 83.565217 26.88889 120.000000 60.87 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 85.71 11000 (11000;11000) ## 2 77.78 92.86 1.8e+08 (1.8e+08;1.8e+08) ## 3 55.56 92.86 37 (44;30) ## 4 44.44 21.43 0.34 (-1.8;2.5) ## 5 88.89 50.00 0.0066 (-9.8;9.9) ## 6 22.22 85.71 4.2 (7;1.4) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; logCPM: is the average expression of all samples for that particular gene across all samples on the log-scale expressed in counts per million (cpm, as calculated by edgeR after normalization); LR: the signed likelihood ratio test statistic; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for EdgeR if (0) { DA_edger &lt;- run_edger( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_edger &lt;- run_edger( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_edger &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;edger&quot;) head(DA_edger) } 11.1.12 ANCOM ANCOM (Analysis of composition of microbiomes) is from Analysis of composition of microbiomes: a novel method for studying microbial composition”, Microbial Ecology in Health (Mandal et al. 2015). ANCOM makes no distributional assumptions and can be implemented in a linear model framework. (Caution: the otu_table must be integers). DA_ancom &lt;- run_ancom( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 11.2: ANCOM (Structure Zero) colnames(DA_ancom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;(W)q-values &lt; alpha&quot; &quot;W_ratio&quot; ## [7] &quot;detected_0.7&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ancom) ## TaxaID Block Enrichment EffectSize (W)q-values &lt; alpha W_ratio ## 1 g__Acidaminococcus 9_AA vs 14_BB BB 0.01994016 0 0 ## 2 g__Actinomyces 9_AA vs 14_BB BB 0.68528127 0 0 ## 3 g__Adlercreutzia 9_AA vs 14_BB BB 0.27451133 0 0 ## 4 g__Agathobacter 9_AA vs 14_BB AA -0.52328657 0 0 ## 5 g__Akkermansia 9_AA vs 14_BB AA -0.08062438 0 0 ## 6 g__Alistipes 9_AA vs 14_BB AA -0.03107782 0 0 ## detected_0.7 Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 FALSE NA 0 ## 2 FALSE -0.9577718 30 ## 3 FALSE NA 0 ## 4 FALSE 0.1524904 316 ## 5 FALSE NA 0 ## 6 FALSE -0.1085245 64 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 0 0.0 1.7051442 ## 2 26 50.5 -1.3107676 ## 3 0 9.0 -2.4683647 ## 4 329 296.0 1.7488297 ## 5 0 0.0 -2.1676332 ## 6 64 69.0 0.2000385 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 58.82609 101.777778 31.21429 21.74 ## 2 50.91304 26.777778 66.42857 82.61 ## 3 19.21739 5.111111 28.28571 43.48 ## 4 996.26087 1740.444444 517.85714 65.22 ## 5 93.78261 30.000000 134.78571 21.74 ## 6 163.86957 177.888889 154.85714 73.91 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 21.43 0.67 (-0.11;1.5) ## 2 88.89 78.57 4.1 (6.8;1.3) ## 3 33.33 50.00 8.6 (13;4.3) ## 4 55.56 71.43 0.39 (-1.4;2.2) ## 5 22.22 21.43 1.5 (2.3;0.71) ## 6 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size by ANCOM; (W)q-values &lt; alpha: q-values less than alpha; W_ratio: the ratio of W values; detected_0.7: W_ratio more than 0.7; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for ANCOM if (0) { DA_ancom &lt;- run_ancom( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ancom &lt;- run_ancom( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ancom &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ancom&quot;) head(DA_ancom) } 11.1.13 Corncob Corncob package is from Modeling microbial abundances and dysbiosis with beta-binomial regression”, Microbial Ecology in Health (Martin, Witten, and Willis 2020). Corncob is based on beta-binomial regression. (Caution: the otu_table must be integers). if (0) { DA_corncob &lt;- run_corncob( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) colnames(DA_ancom) head(DA_ancom) } other options for Corncob if (0) { DA_corncob &lt;- run_corncob( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) DA_corncob &lt;- run_corncob( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) DA_corncob &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;corncob&quot;, method = &quot;Wald&quot;) head(DA_corncob) } 11.1.14 Maaslin2 (Microbiome Multivariable Association with Linear Models) Maaslin2 package is from Multivariable association discovery in population-scale meta-omics studies (Mallick et al. 2021). Maaslin2 relies on general linear models to accommodate most modern epidemiological study designs, including cross-sectional and longitudinal, along with a variety of filtering, normalization, and transform methods. if (0) { DA_maaslin2 &lt;- run_maaslin2( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_maaslin2( dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_maaslin2( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;maaslin2&quot;, transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) head(DA_maaslin2) } 11.2 Metagenomic sequencing microbial data (metaphlan2/3) We use the same strategy to filter phyloseq object. data(&quot;metaphlan2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) # step2: Extracting specific taxa phyloseq-class object metaphlan2_ps_genus &lt;- summarize_taxa(metaphlan2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) # step3: Aggregating low relative abundance or unclassified taxa into others #dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(dada2_ps_genus, cutoff = 10, unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold metaphlan2_ps_genus_filter &lt;- run_filter(metaphlan2_ps_genus, cutoff = 1e-4, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold metaphlan2_ps_genus_filter_trim &lt;- run_trim(metaphlan2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) metaphlan2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 54 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 54 taxa by 6 taxonomic ranks ] 11.2.1 limma_voom limma package is from voom: Precision weights unlock linear model analysis tools for RNA-seq read counts (Law et al. 2014). Firstly, transforming count data to log2-counts per million (logCPM), estimate the mean-variance relationship and use this to compute appropriate observation-level weights. Secondly, fitting multiple linear models by weighted or generalized least squares. Finally, performing empirical bayes statistics for differential expression. DA_limma_voom_mgs &lt;- run_limma_voom( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_limma_voom_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;logFC&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_limma_voom_mgs) ## TaxaID Block Enrichment EffectSize logFC Pvalue ## 1 g__Ruminococcus 7_AA vs 15_BB BB 0.2233696 0.2233696 1.548665e-07 ## 2 g__Faecalibacterium 7_AA vs 15_BB BB 0.3063850 0.3063850 1.854506e-07 ## 3 g__Blautia 7_AA vs 15_BB BB 0.1619875 0.1619875 1.187496e-05 ## 4 g__Lactobacillus 7_AA vs 15_BB BB 0.1399117 0.1399117 5.287895e-05 ## 5 g__Bifidobacterium 7_AA vs 15_BB BB 0.3779862 0.3779862 9.644339e-05 ## 6 g__Roseburia 7_AA vs 15_BB BB 0.1275366 0.1275366 1.728128e-04 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 3.894463e-06 -2.906486 0.02141570 ## 2 3.894463e-06 -4.011562 0.05346880 ## 3 1.662495e-04 -3.182422 0.02000425 ## 4 5.552289e-04 NA 0.00155690 ## 5 8.101244e-04 -6.549698 0.03731980 ## 6 1.209690e-03 -4.442582 0.00752330 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB ## 1 0.0044236 0.0331677 -2.892349 ## 2 0.0047826 0.0771373 -3.992131 ## 3 0.0036769 0.0333800 -2.265551 ## 4 0.0000000 0.0024249 -5.399318 ## 5 0.0009090 0.0851568 -3.394708 ## 6 0.0008393 0.0182502 -2.451452 ## Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 0.03578485 0.0066508000 0.04938074 81.82 ## 2 0.05750352 0.0051489857 0.08193563 77.27 ## 3 0.02431008 0.0067591429 0.03250052 100.00 ## 4 0.02118822 0.0007282714 0.03073619 72.73 ## 5 0.10730063 0.0143274857 0.15068810 100.00 ## 6 0.02013462 0.0049745857 0.02720931 81.82 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 57.14 93.33 270 (280;260) ## 2 57.14 86.67 75 (83;66) ## 3 100.00 100.00 90 (99;81) ## 4 42.86 86.67 5.3e+10 (5.3e+10;5.3e+10) ## 5 100.00 100.00 130 (140;120) ## 6 57.14 93.33 12 (17;7.2) limma_voom Metagenomic sequencing in run_da if (0) { DA_limma_voom_mgs &lt;- run_da( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;limma_voom&quot;) } 11.2.2 Wilcoxon Rank Sum and Signed Rank Tests Wilcoxon Rank Sum and Signed Rank Tests, which are nonparameter test methods, use the rank of taxa abundance to find the significant taxa. DA_wilcox_mgs &lt;- run_wilcox( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_wilcox_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; ## [15] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [17] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_wilcox_mgs) ## TaxaID Block Enrichment EffectSize Statistic Pvalue ## 1 g__Alistipes 7_AA vs 15_BB Nonsignif 1.7499838 71.0 0.201934650 ## 2 g__Anaerostipes 7_AA vs 15_BB Nonsignif 0.2384009 31.0 0.138345605 ## 3 g__Anaerotruncus 7_AA vs 15_BB Nonsignif 0.9439864 47.5 0.712887079 ## 4 g__Bacteroides 7_AA vs 15_BB Nonsignif 1.1135266 85.0 0.021284830 ## 5 g__Bifidobacterium 7_AA vs 15_BB BB 4.2421190 11.0 0.002122619 ## 6 g__Bilophila 7_AA vs 15_BB Nonsignif 0.2514869 60.0 0.616070968 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.53007846 2.061604 0.00711780 ## 2 0.38736769 -4.964322 0.00031435 ## 3 0.83170159 NA 0.00000000 ## 4 0.07947442 1.229057 0.24894650 ## 5 0.04028636 -6.549698 0.03731980 ## 6 0.77874024 1.177523 0.00104585 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB ## 1 0.0236665 0.0056693 0.4613459 ## 2 0.0000229 0.0007149 -0.6171177 ## 3 0.0000000 0.0000000 -0.1327552 ## 4 0.4568864 0.1949060 0.7906916 ## 5 0.0009090 0.0851568 -1.3572361 ## 6 0.0020513 0.0009069 0.1924811 ## Mean Rank Abundance\\nAA Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) ## 1 14.14 10.27 77.27 ## 2 8.43 12.93 86.36 ## 3 10.79 11.83 36.36 ## 4 16.14 9.33 100.00 ## 5 5.57 14.27 100.00 ## 6 12.57 11.00 68.18 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 71.43 80.00 0.22 (-2.7;3.2) ## 2 71.43 93.33 6 (9.5;2.5) ## 3 28.57 40.00 1.3 (1.8;0.78) ## 4 100.00 100.00 0.31 (-2;2.6) ## 5 100.00 100.00 130 (140;120) ## 6 71.43 66.67 0.4 (-1.4;2.2) wilcox Metagenomic sequencing in run_da if (0) { DA_wilcox_mgs &lt;- run_da( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;) } 11.2.3 Liner discriminant analysis (LDA) effect size (LEfSe) LEfSe method is from Metagenomic biomarker discovery and explanation (Segata et al. 2011). It uses Liner discriminant analysis model to identify Differential Taxa. DA_lefse_mgs &lt;- run_lefse( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) colnames(DA_lefse_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;LDA_Score&quot; ## [5] &quot;EffectSize&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [7] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [9] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [11] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [13] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [15] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [17] &quot;Odds Ratio (95% CI)&quot; head(DA_lefse_mgs) ## TaxaID Block Enrichment LDA_Score EffectSize ## 1 g__Bacteroides 7_AA vs 15_BB AA -0.0602187543 1.1046645 ## 2 g__Fusobacterium 7_AA vs 15_BB AA -0.0020446026 1.5964384 ## 3 g__Eggerthella 7_AA vs 15_BB BB 0.0005111183 0.1603892 ## 4 g__Granulicatella 7_AA vs 15_BB BB 0.0010171270 2.3130396 ## 5 g__Collinsella 7_AA vs 15_BB BB 0.0020158083 0.7691861 ## 6 g__Dorea 7_AA vs 15_BB BB 0.0040778399 1.0444611 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 1.190750 2.541675e-01 0.4646148499 ## 2 NA 0.000000e+00 0.0001238325 ## 3 NA 5.913424e-04 0.0000000000 ## 4 NA 2.566255e-05 0.0000000000 ## 5 NA 7.735890e-03 0.0000000000 ## 6 -5.725323 8.554293e-03 0.0002705150 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 2.035362e-01 1.141368 0.2916739273 ## 2 0.000000e+00 6.941519 0.0098919128 ## 3 7.714712e-04 -3.764280 0.0022319872 ## 4 5.235042e-05 -3.071984 0.0000641451 ## 5 1.164172e-02 -2.928116 0.0124959911 ## 6 1.431151e-02 -3.454344 0.0113394984 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 4.649894e-01 2.107934e-01 100.00 100.00 ## 2 3.055616e-02 2.485956e-04 40.91 85.71 ## 3 2.329148e-04 3.164888e-03 63.64 42.86 ## 4 1.059936e-05 8.913311e-05 72.73 42.86 ## 5 2.268860e-03 1.726865e-02 68.18 42.86 ## 6 1.455315e-03 1.595212e-02 90.91 71.43 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 100.00 0.32 (-1.9;2.5) ## 2 20.00 0.0032 (-11;11) ## 3 73.33 430 (450;420) ## 4 86.67 220 (230;210) ## 5 80.00 20 (25;14) ## 6 100.00 28 (34;21) lefse Metagenomic sequencing in run_da if(0) { DA_lefse_mgs &lt;- run_da( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;lefse&quot;, Lda = 0) } 11.2.4 t-test T test, a parametric test method, identifies the significant taxa. DA_ttest_mgs &lt;- run_ttest( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_ttest_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (geometricmean)\\nAA_vs_BB&quot; ## [13] &quot;GeometricMean Abundance\\n(All)&quot; &quot;GeometricMean Abundance\\nAA&quot; ## [15] &quot;GeometricMean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ttest_mgs) ## TaxaID Block Enrichment EffectSize Statistic Pvalue ## 1 g__Alistipes 7_AA vs 15_BB Nonsignif 1.7499838 1.5963681 0.15951558 ## 2 g__Anaerostipes 7_AA vs 15_BB Nonsignif 0.2384009 -1.6970563 0.10937430 ## 3 g__Anaerotruncus 7_AA vs 15_BB Nonsignif 0.9439864 -0.5871152 0.56369794 ## 4 g__Bacteroides 7_AA vs 15_BB Nonsignif 1.1135266 2.2882319 0.04545820 ## 5 g__Bifidobacterium 7_AA vs 15_BB Nonsignif 4.2421190 -2.7252006 0.01523564 ## 6 g__Bilophila 7_AA vs 15_BB Nonsignif 0.2514869 1.2030139 0.27277490 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.4674316 2.061604 0.00711780 ## 2 0.3828101 -4.964322 0.00031435 ## 3 0.6398733 NA 0.00000000 ## 4 0.1909244 1.229057 0.24894650 ## 5 0.1089140 -6.549698 0.03731980 ## 6 0.5565431 1.177523 0.00104585 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (geometricmean)\\nAA_vs_BB ## 1 0.0236665 0.0056693 2.05528762 ## 2 0.0000229 0.0007149 NA ## 3 0.0000000 0.0000000 -0.05926392 ## 4 0.4568864 0.1949060 1.60721398 ## 5 0.0009090 0.0851568 NA ## 6 0.0020513 0.0009069 3.17465522 ## GeometricMean Abundance\\n(All) GeometricMean Abundance\\nAA GeometricMean Abundance\\nBB ## 1 0.3989446 0.7346341 0.1767534 ## 2 1.8882218 NaN 1.8882218 ## 3 1.0212861 0.9903011 1.0318284 ## 4 0.3871167 0.6044631 0.1984039 ## 5 0.1936930 NaN 0.1936930 ## 6 0.6988408 2.6168456 0.2898089 ## Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 77.27 71.43 80.00 0.22 (-2.7;3.2) ## 2 86.36 71.43 93.33 6 (9.5;2.5) ## 3 36.36 28.57 40.00 1.3 (1.8;0.78) ## 4 100.00 100.00 100.00 0.31 (-2;2.6) ## 5 100.00 100.00 100.00 130 (140;120) ## 6 68.18 71.43 66.67 0.4 (-1.4;2.2) ttest Metagenomic sequencing in run_da if(0) { DA_ttest_mgs &lt;- run_da( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;) } 11.2.5 Maaslin2 (Microbiome Multivariable Association with Linear Models) Maaslin2 package is from Multivariable association discovery in population-scale meta-omics studies (Mallick et al. 2021). Maaslin2 relies on general linear models to accommodate most modern epidemiological study designs, including cross-sectional and longitudinal, along with a variety of filtering, normalization, and transform methods. if (0) { DA_maaslin2_mgs &lt;- run_maaslin2( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;NONE&quot;, norm = &quot;NONE&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) head(DA_maaslin2_mgs) } maaslin2 Metagenomic sequencing in run_da if (0) { DA_maaslin2_mgs &lt;- run_da( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;maaslin2&quot;, transform = &quot;NONE&quot;, norm = &quot;NONE&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) } 11.3 Visualization The Volcano plot is used to display differential analysis. plot_volcano provides multiple parameters for plotting volcano. More details to see help(plot_volcano). The barplot is used to display the lefse results. 11.3.1 Volcano plot The X and Y coordinate axis are flexible to choose for Volcano. Here, we choose logFC and AdjustedPvalue to visualize the results DA_limma_voom &lt;- run_limma_voom( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_limma_voom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; ## [3] &quot;Enrichment&quot; &quot;EffectSize&quot; ## [5] &quot;logFC&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [9] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [11] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [15] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [17] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; DA_limma_voom_volcano &lt;- plot_volcano( DA_limma_voom, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;logFC&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) DA_limma_voom_volcano Figure 11.3: Volcano (limma-voom: logFC and AdjustedPvalue) DA_limma_voom_volcano effectsize plot_volcano( DA_limma_voom, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;EffectSize&quot;, x_index_cutoff = 1, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 8) Figure 11.4: Volcano (limma-voom: EffectSize and Pvalue) The logFC and EffectSize are the same values in limma-voom. 11.3.2 barplot in lefse DA_lefse &lt;- run_lefse( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) # don&#39;t run this code when you do lefse in reality DA_lefse$LDA_Score &lt;- DA_lefse$LDA_Score * 1000 plot_lefse( da_res = DA_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 1, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 11.5: Barplot (Lefse) 11.4 Dominant taxa Display the significant taxa with selection using boxplot. DA_wilcox &lt;- run_wilcox( metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) plot_topN_boxplot( ps = metaphlan2_ps_genus_filter_trim, da_res = DA_wilcox, x_index = &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot;, x_index_cutoff = 0.2, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.3, topN = 3, taxa_name = &quot;s__Ruminococcus_torques&quot;, group = &quot;Group&quot;) Figure 11.6: Dominant Taxa 11.5 Multiple differential analysis by one function here, we provide the run_multiple_da for obtaining the results list from multiple differential analysis methods. multiple_res &lt;- run_multiple_da( dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = c(&quot;aldex&quot;, &quot;limma_voom&quot;, &quot;mbzinb&quot;, &quot;omnibus&quot;), p_adjust = &quot;none&quot;) ## |------------(25%)----------(50%)----------(75%)----------| ## Start GMPR normalization ... ## Start Winsorization ... ## Perform filtering ... ## --A total of 87 taxa will be tested with a sample size of 23 ! ## --Omnibus test is selected! ## --Dispersion is treated as a parameter of interest! ## Start testing ... ## 10 % ## 20 % ## 30 % ## 40 % ## 50 % ## 60 % ## 70 % ## 80 % ## 90 % ## 100%! ## Handle failed taxa using permutation test! ## Permutation test .... ## Completed! names(multiple_res) ## [1] &quot;aldex&quot; &quot;limma_voom&quot; &quot;mbzinb&quot; &quot;omnibus&quot; plot results plot_multiple_DA( Multip_DA_res = multiple_res, x_index_list = c(&quot;EffectSize&quot;, &quot;logFC&quot;, &quot;mean.LFC&quot;, &quot;abund.LFC.CompvarBB.est&quot;), x_index_cutoff = 0, y_index = &quot;AdjustedPvalue&quot;, y_index_cutoff = 0.5, cellwidth = 50, cellheight = 10) Figure 11.7: Multiple DA results 11.6 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] RColorBrewer_1.1-2 viridis_0.6.2 viridisLite_0.4.0 ## [4] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [7] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [10] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [13] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [16] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [19] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [22] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [25] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.2 reticulate_1.24 tidyselect_1.1.2 ## [4] RSQLite_2.2.10 AnnotationDbi_1.56.2 htmlwidgets_1.5.4 ## [7] grid_4.1.2 BiocParallel_1.28.3 Rtsne_0.15 ## [10] munsell_0.5.0 codetools_0.2-18 DT_0.21 ## [13] umap_0.2.8.0 withr_2.5.0 colorspace_2.0-3 ## [16] highr_0.9 knitr_1.37 rstudioapi_0.13 ## [19] pscl_1.5.5 robustbase_0.93-9 bayesm_3.1-4 ## [22] ggsignif_0.6.3 labeling_0.4.2 mbzinb_0.2 ## [25] GenomeInfoDbData_1.2.7 pheatmap_1.0.12 bit64_4.0.5 ## [28] farver_2.1.0 rhdf5_2.38.1 vctrs_0.3.8 ## [31] generics_0.1.2 TH.data_1.1-0 xfun_0.30 ## [34] R6_2.5.1 locfit_1.5-9.5 RcppZiggurat_0.1.6 ## [37] bitops_1.0-7 rhdf5filters_1.6.0 microbiome_1.16.0 ## [40] cachem_1.0.6 DelayedArray_0.20.0 assertthat_0.2.1 ## [43] scales_1.1.1 multcomp_1.4-18 nnet_7.3-17 ## [46] gtable_0.3.0 sandwich_3.0-1 rlang_1.0.2 ## [49] genefilter_1.76.0 splines_4.1.2 protoclust_1.6.3 ## [52] rstatix_0.7.0 broom_0.7.12 checkmate_2.0.0 ## [55] yaml_2.3.5 reshape2_1.4.4 abind_1.4-5 ## [58] crosstalk_1.2.0 backports_1.4.1 Rfast_2.0.6 ## [61] qvalue_2.26.0 Hmisc_4.6-0 DiagrammeR_1.0.9 ## [64] tensorA_0.36.2 tools_4.1.2 bookdown_0.24 ## [67] zCompositions_1.4.0 ellipsis_0.3.2 gplots_3.1.1 ## [70] jquerylib_0.1.4 biomformat_1.22.0 Rcpp_1.0.8.2 ## [73] plyr_1.8.6 base64enc_0.1-3 visNetwork_2.1.0 ## [76] zlibbioc_1.40.0 purrr_0.3.4 RCurl_1.98-1.6 ## [79] rpart_4.1.16 openssl_2.0.0 Wrench_1.12.0 ## [82] cowplot_1.1.1 zoo_1.8-9 ggrepel_0.9.1 ## [85] cluster_2.1.2 magrittr_2.0.2 data.table_1.14.2 ## [88] RSpectra_0.16-0 truncnorm_1.0-8 mvtnorm_1.1-3 ## [91] ALDEx2_1.26.0 RAIDA_1.0 evaluate_0.15 ## [94] xtable_1.8-4 XML_3.99-0.9 jpeg_0.1-9 ## [97] gridExtra_2.3 shape_1.4.6 compiler_4.1.2 ## [100] KernSmooth_2.23-20 crayon_1.5.0 htmltools_0.5.2 ## [103] mgcv_1.8-39 Formula_1.2-4 tidyr_1.2.0 ## [106] geneplotter_1.72.0 libcoin_1.0-9 DBI_1.1.2 ## [109] corrplot_0.92 MASS_7.3-55 compositions_2.0-4 ## [112] Matrix_1.4-0 ade4_1.7-18 car_3.0-12 ## [115] cli_3.2.0 parallel_4.1.2 igraph_1.2.11 ## [118] pkgconfig_2.0.3 coin_1.4-2 foreign_0.8-82 ## [121] foreach_1.5.2 annotate_1.72.0 bslib_0.3.1 ## [124] multtest_2.50.0 XVector_0.34.0 NADA_1.6-1.1 ## [127] stringr_1.4.0 digest_0.6.29 Biostrings_2.62.0 ## [130] rmarkdown_2.13 htmlTable_2.4.0 edgeR_3.36.0 ## [133] gtools_3.9.2 modeltools_0.2-23 lifecycle_1.0.1 ## [136] jsonlite_1.8.0 Rhdf5lib_1.16.0 carData_3.0-5 ## [139] askpass_1.1 limma_3.50.1 fansi_1.0.2 ## [142] pillar_1.7.0 ggsci_2.9 DEoptimR_1.0-10 ## [145] KEGGREST_1.34.0 fastmap_1.1.0 httr_1.4.2 ## [148] survival_3.3-1 glue_1.6.2 png_0.1-7 ## [151] iterators_1.0.14 glmnet_4.1-3 bit_4.0.4 ## [154] stringi_1.7.6 sass_0.4.0 metagenomeSeq_1.36.0 ## [157] blob_1.2.2 DESeq2_1.34.0 latticeExtra_0.6-29 ## [160] caTools_1.18.2 memoise_2.0.1 References "],["visualization-5.html", "Chapter 12 Visualization 12.1 plot_boxplot 12.2 plot_barplot 12.3 plot_dotplot 12.4 plot_correlation_boxplot 12.5 plot_correlation_density 12.6 plot_Ordination 12.7 plot_ggbiplot 12.8 plot_corrplot 12.9 plot_2DA_venn 12.10 plot_stacked_bar_XIVZ 12.11 plot_StackBarPlot 12.12 Systematic Information", " Chapter 12 Visualization XMAS 2.0 provides functions for visualization. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 12.1 plot_boxplot data(&quot;amplicon_ps&quot;) dat_alpha &lt;- run_alpha_diversity(ps=amplicon_ps, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) head(dat_alpha) ## TempRowNames SampleType Year Month Day Subject ReportedAntibioticUsage ## 1 L1S140 gut 2008 10 28 2 Yes ## 2 L1S208 gut 2009 1 20 2 No ## 3 L1S8 gut 2008 10 28 1 Yes ## 4 L1S281 gut 2009 4 14 2 No ## 5 L3S242 right palm 2008 10 28 1 Yes ## 6 L2S309 left palm 2009 1 20 2 No ## DaysSinceExperimentStart Description Observed Chao1 se.chao1 Shannon ## 1 0 2_Fece_10_28_2008 451 689.4070 44.91230 3.307548 ## 2 84 2_Fece_1_20_2009 606 997.2371 64.64807 3.857186 ## 3 0 1_Fece_10_28_2008 329 514.0968 40.45151 3.014101 ## 4 168 2_Fece_4_14_2009 551 888.3656 58.04358 4.031350 ## 5 0 1_R_Palm_10_28_2008 120 278.8824 54.21486 2.911609 ## 6 84 2_L_Palm_1_20_2009 399 765.4429 68.07293 4.591979 plot_boxplot has many parameters, and help you enjoy it. single measure plot_boxplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) Figure 12.1: boxplot(single measure) single measure with significant results plot_boxplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) Figure 12.2: boxplot(single measure with significant results) single measure with significant results of pairwises plot_boxplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) Figure 12.3: boxplot(single measure with significant results of pairwises) single measure with significant results of pairwises and outlier plot_boxplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;)), outlier = TRUE) Figure 12.4: boxplot(single measure with significant results of pairwises and outlier) single measure with significant results of ref_group plot_boxplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) Figure 12.5: boxplot(single measure with significant results of ref_group) multiple measures plot_boxplot(data=dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), ref_group = &quot;gut&quot;, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 12.6: boxplot(multiple measure with group number) 12.2 plot_barplot plot_barplot has many parameters, and help you enjoy it. single measure plot_barplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) Figure 12.7: barplot(single measure) single measure with significant results plot_barplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) Figure 12.8: barplot(single measure with significant results) single measure with significant results of pairwises plot_barplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) Figure 12.9: barplot(single measure with significant results of pairwises) single measure with significant results of ref_group plot_barplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) Figure 12.10: barplot(single measure with significant results of ref_group) multiple index plot_barplot(data=dat_alpha, y_index=c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group=&quot;SampleType&quot;, do_test=TRUE, method=&quot;wilcox.test&quot;) Figure 12.11: barplot(multiple index) 12.3 plot_dotplot plot_dotplot has many parameters, and help you enjoy it. single measure plot_dotplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.12: dotplot(single measure) single measure with significant results plot_dotplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.13: dotplot(single measure with significant results) single measure with significant results of pairwises plot_dotplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.14: dotplot(single measure with significant results of pairwises) single measure with significant results of ref_group plot_dotplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.15: dotplot(single measure with significant results of ref_group) dot size and median size plot_dotplot(data=dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;, dotsize = 0.5, mediansize = 2) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.16: dotplot(dot size and median size) multiple index plot_dotplot(data=dat_alpha, y_index=c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group=&quot;SampleType&quot;, do_test=TRUE, method=&quot;wilcox.test&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.17: dotplot(multiple index) multiple index with errorbar plot_dotplot(data=dat_alpha, y_index=c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group=&quot;SampleType&quot;, do_test=TRUE, show_type=&quot;errorbar&quot;, method=&quot;wilcox.test&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 12.18: dotplot(multiple index errorbar) 12.4 plot_correlation_boxplot Help you enjoy plot_correlation_boxplot. plot_correlation_boxplot(data=dat_alpha, x_index=&quot;Chao1&quot;, y_index=&quot;Shannon&quot;, group=&quot;SampleType&quot;) Figure 12.19: correlation with boxplot 12.5 plot_correlation_density Help you enjoy plot_correlation_density. plot_correlation_density(data=dat_alpha, x_index=&quot;Chao1&quot;, y_index=&quot;Shannon&quot;, group=&quot;SampleType&quot;) Figure 12.20: correlation with density 12.6 plot_Ordination plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others #dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] ordination_PCA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCA&quot;) names(ordination_PCA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; ## [6] &quot;axis_taxa_cor&quot; Ordinary pattern plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;) Figure 12.21: plot_Ordination (Ordinary pattern) plot with SampleID and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse&quot;, sample = TRUE) Figure 12.22: plot_Ordination (Ordinary pattern with SampleID) ellipse with 95% confidence interval plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_CI&quot;, sample = TRUE) Figure 12.23: plot_Ordination (ellipse with 95% confidence interval) ellipse with groups plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_groups&quot;, sample = TRUE) Figure 12.24: plot_Ordination (ellipse with groups) ellipse with border line plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_line&quot;, sample = TRUE) Figure 12.25: plot_Ordination (ellipse with border line) plot with SampleID and sideboxplot and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 12.26: plot_Ordination (Ordinary pattern with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 2 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_CI&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 12.27: plot_Ordination (ellipse_CI with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 3 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_groups&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 12.28: plot_Ordination (ellipse_groups with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 4 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_line&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 12.29: plot_Ordination (ellipse_line with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors and shape data(&quot;amplicon_ps&quot;) amplicon_ps_genus &lt;- summarize_taxa(amplicon_ps, taxa_level = &quot;Genus&quot;) amplicon_res_ordination &lt;- run_ordination( ps = amplicon_ps_genus, group = &quot;SampleType&quot;, method = &quot;PCoA&quot;) plot_Ordination(ResultList = amplicon_res_ordination, group = &quot;SampleType&quot;, shape_column = &quot;ReportedAntibioticUsage&quot;, shape_values = c(16, 17), circle_type = &quot;ellipse_line&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 12.30: plot_Ordination (ellipse_line with SampleID sideboxplot) 12.7 plot_ggbiplot biplot with topN dominant taxa plot_ggbiplot(ResultList = ordination_PCA, group = &quot;Group&quot;, group_color = c(&quot;blue&quot;, &quot;red&quot;), topN = 5, ellipse = TRUE, labels = &quot;SampleID&quot;) Figure 12.31: plot_ggbiplot (biplot) 12.8 plot_corrplot dada2_beta &lt;- run_beta_diversity(ps=dada2_ps_rarefy, method = &quot;bray&quot;) plot_distance_corrplot(dada2_beta$BetaDistance) Figure 12.32: plot_corrplot (distance) 12.9 plot_2DA_venn da_wilcox &lt;- run_wilcox(dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) da_ttest &lt;- run_ttest(dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_venn_res &lt;- plot_2DA_venn( daTest1 = da_wilcox, daTest2 = da_ttest, datType1 = &quot;AA vs BB(wilcox)&quot;, datType2 = &quot;AA vs BB(t-test)&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Pvalue_name = &quot;Pvalue&quot;, logFc_name1 = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, logFc_name2 = &quot;Log2FoldChange (geometricmean)\\nAA_vs_BB&quot;, Pvalue_cutoff = 0.8, logFC_cutoff = 0.2) DA_venn_res$pl Figure 12.33: plot_2DA_venn (wilcox vs t_test) 12.10 plot_stacked_bar_XIVZ Minimum usage: plot in relative abundance plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;) Figure 12.34: plot_stacked_bar_XIVZ (test1) Set feature parameter to show feature information plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, feature = &quot;Group&quot;) Figure 12.35: plot_stacked_bar_XIVZ (test2) Pass ordered sample names to order parameter to plot in specific order metadata &lt;- phyloseq::sample_data(dada2_ps_rarefy) %&gt;% data.frame() %&gt;% dplyr::arrange(Group) plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, feature = &quot;Group&quot;, order = rownames(metadata)) Figure 12.36: plot_stacked_bar_XIVZ (test3) Use facet_wrap(vars(), scale=“free”) funciton to facet stacked barplot plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, relative_abundance = TRUE, order = rownames(metadata)) + facet_wrap(vars(Group), scale=&quot;free&quot;) Figure 12.37: plot_stacked_bar_XIVZ (test4) 12.11 plot_StackBarPlot plot_StackBarPlot provides too many parameters for users to display the Stacked barplot of microbial composition by using ggplot2 format. Here is the ordinary pattern. More details to see help(plot_StackBarPlot). Ordinary pattern plot_StackBarPlot(ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;) Figure 12.38: plot_StackBarPlot(Ordinary pattern) Metadata with Group phenotype plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;) Figure 12.39: plot_StackBarPlot (Metadata with group) Metadata with Group phenotype in cluster mode plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) Figure 12.40: plot_StackBarPlot (Metadata with group in cluster mode) Metadata with Group phenotype in facet plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, facet = TRUE) Figure 12.41: plot_StackBarPlot (Metadata with group in facet) 12.12 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] RColorBrewer_1.1-2 viridis_0.6.2 viridisLite_0.4.0 ## [4] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [7] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [10] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [13] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [16] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [19] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [22] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [25] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.2 reticulate_1.24 tidyselect_1.1.2 ## [4] RSQLite_2.2.10 AnnotationDbi_1.56.2 htmlwidgets_1.5.4 ## [7] grid_4.1.2 BiocParallel_1.28.3 Rtsne_0.15 ## [10] munsell_0.5.0 units_0.8-0 codetools_0.2-18 ## [13] DT_0.21 umap_0.2.8.0 withr_2.5.0 ## [16] colorspace_2.0-3 highr_0.9 knitr_1.37 ## [19] rstudioapi_0.13 pscl_1.5.5 robustbase_0.93-9 ## [22] bayesm_3.1-4 ggsignif_0.6.3 labeling_0.4.2 ## [25] mbzinb_0.2 GenomeInfoDbData_1.2.7 pheatmap_1.0.12 ## [28] bit64_4.0.5 farver_2.1.0 rhdf5_2.38.1 ## [31] vctrs_0.3.8 generics_0.1.2 TH.data_1.1-0 ## [34] xfun_0.30 R6_2.5.1 RVenn_1.1.0 ## [37] locfit_1.5-9.5 RcppZiggurat_0.1.6 bitops_1.0-7 ## [40] rhdf5filters_1.6.0 microbiome_1.16.0 cachem_1.0.6 ## [43] DelayedArray_0.20.0 assertthat_0.2.1 scales_1.1.1 ## [46] multcomp_1.4-18 nnet_7.3-17 gtable_0.3.0 ## [49] sandwich_3.0-1 rlang_1.0.2 genefilter_1.76.0 ## [52] splines_4.1.2 protoclust_1.6.3 rstatix_0.7.0 ## [55] broom_0.7.12 checkmate_2.0.0 yaml_2.3.5 ## [58] reshape2_1.4.4 abind_1.4-5 crosstalk_1.2.0 ## [61] backports_1.4.1 Rfast_2.0.6 qvalue_2.26.0 ## [64] Hmisc_4.6-0 DiagrammeR_1.0.9 tensorA_0.36.2 ## [67] tools_4.1.2 bookdown_0.24 zCompositions_1.4.0 ## [70] ellipsis_0.3.2 gplots_3.1.1 jquerylib_0.1.4 ## [73] biomformat_1.22.0 proxy_0.4-26 Rcpp_1.0.8.2 ## [76] plyr_1.8.6 base64enc_0.1-3 visNetwork_2.1.0 ## [79] zlibbioc_1.40.0 classInt_0.4-3 purrr_0.3.4 ## [82] RCurl_1.98-1.6 rpart_4.1.16 openssl_2.0.0 ## [85] Wrench_1.12.0 cowplot_1.1.1 zoo_1.8-9 ## [88] ggrepel_0.9.1 cluster_2.1.2 magrittr_2.0.2 ## [91] data.table_1.14.2 RSpectra_0.16-0 truncnorm_1.0-8 ## [94] mvtnorm_1.1-3 ALDEx2_1.26.0 RAIDA_1.0 ## [97] evaluate_0.15 xtable_1.8-4 XML_3.99-0.9 ## [100] jpeg_0.1-9 gridExtra_2.3 shape_1.4.6 ## [103] compiler_4.1.2 KernSmooth_2.23-20 crayon_1.5.0 ## [106] htmltools_0.5.2 mgcv_1.8-39 ggVennDiagram_1.2.1 ## [109] Formula_1.2-4 tidyr_1.2.0 geneplotter_1.72.0 ## [112] libcoin_1.0-9 DBI_1.1.2 corrplot_0.92 ## [115] MASS_7.3-55 sf_1.0-7 compositions_2.0-4 ## [118] Matrix_1.4-0 ade4_1.7-18 car_3.0-12 ## [121] cli_3.2.0 parallel_4.1.2 igraph_1.2.11 ## [124] pkgconfig_2.0.3 coin_1.4-2 foreign_0.8-82 ## [127] foreach_1.5.2 annotate_1.72.0 bslib_0.3.1 ## [130] multtest_2.50.0 XVector_0.34.0 NADA_1.6-1.1 ## [133] stringr_1.4.0 digest_0.6.29 Biostrings_2.62.0 ## [136] rmarkdown_2.13 htmlTable_2.4.0 edgeR_3.36.0 ## [139] gtools_3.9.2 modeltools_0.2-23 lifecycle_1.0.1 ## [142] jsonlite_1.8.0 Rhdf5lib_1.16.0 carData_3.0-5 ## [145] askpass_1.1 limma_3.50.1 fansi_1.0.2 ## [148] pillar_1.7.0 ggsci_2.9 DEoptimR_1.0-10 ## [151] KEGGREST_1.34.0 fastmap_1.1.0 httr_1.4.2 ## [154] survival_3.3-1 glue_1.6.2 png_0.1-7 ## [157] iterators_1.0.14 glmnet_4.1-3 bit_4.0.4 ## [160] class_7.3-20 stringi_1.7.6 sass_0.4.0 ## [163] metagenomeSeq_1.36.0 blob_1.2.2 DESeq2_1.34.0 ## [166] latticeExtra_0.6-29 caTools_1.18.2 memoise_2.0.1 ## [169] e1071_1.7-9 "],["principals-of-differential-analysis-methods.html", "Chapter 13 Principals of Differential Analysis methods 13.1 ALDEx2 13.2 ANCOM-II 13.3 corncob 13.4 DESeq2 13.5 edgeR 13.6 LEfSe 13.7 limma voom 13.8 MaAsLin2 13.9 metagenomeSeq 13.10 t-test 13.11 Wilcoxon test 13.12 RAIDA 13.13 Summary 13.14 Advantages and disadvantages", " Chapter 13 Principals of Differential Analysis methods (Nearing et al. 2022) has showed that the multiple DA methods have different performances on microbiota (16s). Here, we integrated the its methods’ part and our own understandings to give a draft whole picture for users who using DA of XMAS2. Microbiota data have the following characteristics: Compositional: Mathematically, a data is defined as compositional, if it contains D multiple parts of nonnegative numbers whose sum is 1 or any constant-sum constraint. It can be formally stated as: \\[S^{D} = \\left \\{ X = [x_{1}, x_{2}, ..., x_{D}] | x_{i} &gt; 0, i = 1, 2, ..., D; \\sum^{D}_{i=1} x_{i} = K \\right \\}\\] Over-Dispersed: The variance are generally greater than the mean. There are several possible causes of overdispersion: correlated taxa counts, clustering of subjects, and within group heterogeneity. Negative Binomial Model addresses overdispersion by by explicitly modeling the correlated and sparse events via a latent variable. Sparsity: Microbiome data typically is overdispersed and sparse with many zeros. When the number of zeros is excess than the standard distributions (e.g., normal, Poisson, binomial, NB, beta or gamma) can be readily fit, the data set is considered as ’zero inflate. 13.1 ALDEx2 ALDEx2 R package use the main aldex. Monte Carlo samples of Dirichlet distributions for each sample, using a uniform prior; (Sparsity) Performing CLR (log-ratio) transformation of each realization; (Compositional &amp; Overdispersion) Performing Wilcoxon tests on the transformed realizations. Finally, the function returned the expected Benjamini-Hochberg (BH) FDR-corrected p-value for each feature based on the results the different across Monte Carlo samples. ALDEx2’s conservative nature is most likely due to its Monte Carlo Dirichlet sampling approach which down weights low abundance ASVs. 13.2 ANCOM-II ANCOM-II (version 2.1) : feature_table_pre_process firstly identify outlier zeros and structural zeros; Outlier zeros, identified by finding outliers in the distribution of taxon counts within each sample grouping, were ignored during differential abundance analysis, and replaced with NA. Structural zeros, taxa that were absent in one grouping but present in the other, were ignored during data analysis and automatically called as differential abundant. additive log-ratios for transformation with a pseudo count of 1; Wilcoxon rank-sum tests for significance, and p-values were FDR-corrected using the BH method; Detection threshold for Ajusted-pvalue per taxa, if the number (ratio) of Ajusted-pvalue reaches nominal significance would be called as DA taxa. 13.3 corncob Taxon count abundance fit to a beta-binomial model, using logit link functions for both the mean and overdispersion. Wald tests for significance testing, and BH for FDR-corrected p-values. 13.4 DESeq2 estimation of size factors, which are used to normalize library sizes in a model-based fashion; estimation of dispersions from the negative binomial likelihood for each feature, and subsequent shrinkage of each dispersion estimate towards the parametric (default) trendline by empirical Bayes; fitting each feature to the specified class groupings with negative binomial generalized linear models and performing hypothesis testing, for which we chose the default Wald test; Finally, using the results function to obtain the resulting BH FDR-corrected p-values. 13.5 edgeR Add a pseudocount of 1 to the non-rarefied feature table and used the function calcNormFactors from the edgeR package to compute relative log expression normalization factors; Negative binomial dispersion parameters were then estimated using the functions estimateCommonDisp followed by estimateTagwiseDisp to shrink feature-wise dispersion estimates through an empirical Bayes approach; exactTest for negative binomial data to identify features that differ between the specified groups; The resulting p-values were then corrected for multiple testing with the BH method with the function topTags. 13.6 LEfSe Normalizing the counts data using total sum scaling, which divides each feature count by the total library size; Performing a Kruskal-Wallis (which in our two-group case reduces to the Wilcoxon rank-sum) hypothesis test to identify potential differentially abundant features; Using differentially abundant features to perform linear discriminant analysis (LDA) of class labels on abundances to estimate the effect sizes for sig- nificant features. Only features with scaled LDA analysis scores above the threshold (default: 2.0) were called as DA. 13.7 limma voom Normalizing table by the trimmed mean of M-values (TMM) or TMM with singleton pairing (TMMwsp) option via calcNormFactors function (highly sparse data); After normalization, using the limma R package function voom to convert normalized counts to log2-counts-per-million and assign precision weights to each observation based on the mean-variance trend; Using the functions lmFit, eBayes, and topTable in the limma R package to fit weighted linear regression models, perform tests based on an empirical Bayes moderated t-statistic76 and obtain BH FDR-corrected p-values. 13.8 MaAsLin2 using arcsine square-root transformation (AST) for transformation and total sum scaling normalization (TSS) for normalization; The function fit a linear model (without random effects chosen) to each feature’s transformed abundance on the specified sample grouping, tested significance using a Wald test, and output BH FDR-corrected p-values; 13.9 metagenomeSeq Converting the counts and sample information into newMRexperiment object by the function newMRexperiment from the metagenomeSeq R package; Using cumNormStat and cumNorm to apply cumulative sum-scaling normalization (CSS), which attempts to normalize sequence counts based on the lower-quartile abundance of features; Using fitFeatureModel to fit normalized feature counts with zero-inflated log-normal models (with pseudo-counts of 1 added prior to log2 transformation) and perform empirical Bayes moderated t-tests, and MRfulltable to obtain BH FDR-corrected p-values. 13.10 t-test Applying total sum scaling normalization (TSS) or not to the feature table; Performing an unpaired Welch’s t-test for each feature to compare the specified groups; Correcting the resulting p-values with the BH method. 13.11 Wilcoxon test CLR (after applying a pseudocount of 1) transforms or not to abundances; Performing Wilcoxon rank-sum tests for each feature to compare the specified sample groupings; Correcting the resulting p-values with the BH method. 13.12 RAIDA Approach for Identifying Differential Abundance (RAIDA) - is a robust approach for identifying differentially abundant features in metagenomic samples across different conditions. It utilizes the ratio between features in a modified zero-inflated log-normal model. Utilizing the ratios between the counts of features in each sample, eliminating possible problems associated with counts on different scales within and between conditions; To fit ratios with zeros by EM algorithm, using a modified ZIL (zero-inflated log normal: sparsity); Constructing a moderated t-statistics for the log ratio of each feature \\(y_{ij}\\) using the estimated mean \\(\\mu\\) and variance \\(r^2\\) and obtain \\(P\\) values for the null hypotheses for all features; Adjust \\(P\\) values using a multiple testing correction method 13.13 Summary The most commonly assumed data distribution was the negative binomial distribution (DESeq2, edgeR, omnibus, mbzinb). No data transformations were performed for negative binomial methods, or metagenomeSeq methods, to try and bring the data to normality as non-normality of data is taken into account in their statistical models. The remaining parametric methods (ALDEx2 t-test, t-test, limma-voom) all used statistical tests that assumed a Gaussian distribution of the data, therefore, transformations were needed before analysis, which here included a log transform of some kind. Three methods (ALDEx2 Wilcoxon, ANCOM-II, LEfSe) were considered non-parametric (assumes no underlying distribution of data) as they used statistical tests that transformed data to ranks. Two of the four negative binomial methods (DESeq2, edgeR) calculated scaling factors for each sample to account for uneven sequence count. Cumulative sum scaling (CSS) was used for both metagenomeSeq and MaAsLin2. Total sum scaling (TSS; also referred to as relative abundance) was performed for LEfSe, and for method that did not have a built-in normalization function (t-test) as this strategy is commonly used in the literature. Log-ratio based transformations were used for ALDEx2 methods, ANCOM, and, in addition to TSS, were applied to methods without a built-in normalization function. 13.14 Advantages and disadvantages limma-voom, edgeR, Wilcoxon (CLR), and LEfSe output a high number of significant ASVs on average, while ALDEx2 and ANCOM-II tended to identify only a relatively small number of ASVs as significant; limma-voom, edgeR, Wilcoxon (CLR), and LEfSe methods have been previously found to exhibit a high FDR, in contrast, ANCOM appropriately controls the FDR; We can clearly recommend that users avoid using edgeR (a tool primarily intended for RNA-seq data) as well as LEfSe (without p-value correction) for conducting DA testing with 16S rRNA gene data. Users should also be aware that limma voom and the Wilcoxon (CLR) approaches may perform poorly on unfiltered data that is highly sparse. More generally, we recommend that users employ several methods and focus on significant features identified by most tools. References "],["examples.html", "Chapter 14 Examples 14.1 Workflow description 14.2 Amplicon sequencing (16s) 14.3 Metagenomics 14.4 Systematic Information", " Chapter 14 Examples Here, we give users two examples to practice the data analysis workflow by XMAS 2.0. By the way, we also recommend users handling your own microbiota data in a reasonable manner when you utilize this package or workflow. Pay attention to whether your data fit the methods this package provided. Loading packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 14.1 Workflow description The standard data analysis of 16S and MGS data by XMAS 2.0. Figure 14.1: Functions of XMAS 2.0 in 16s and MGS 14.2 Amplicon sequencing (16s) The upstream process is performed by in-house pipeline. and this example just shows how to perform downstream data analysis. In briefly, the example comprises the following steps: Converting inputs into phyloseq object; Quality Evaluation; Pre-Processing Data; Diversity analysis; Ordination analysis; Composition analysis; Differential analysis. 14.2.1 Converting inputs into phyloseq-class object dada2 result from standardized_analytics_workflow_R_function. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt # dada2 results from in-house 16s pipeline dada2_res &lt;- readRDS( system.file( &quot;extdata&quot;, &quot;dada2_res.rds&quot;, package = &quot;XMAS2&quot; ) ) # the metadata matches to dada2 result sam_tab &lt;- read.table( system.file( &quot;extdata&quot;, &quot;dada2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) # tree file from dada2 reference data silva tree &lt;- phyloseq::read_tree( system.file( &quot;extdata&quot;, &quot;tree.nwk&quot;, package = &quot;XMAS2&quot; ) ) tax_tab &lt;- import_dada2_taxa(dada2_res$tax_tab) otu_tab &lt;- dada2_res$seq_tab sam_tab &lt;- sam_tab %&gt;% tibble::column_to_rownames(&quot;seqID&quot;) # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(otu_tab) &lt;- paste0(&quot;S&quot;, rownames(otu_tab)) rownames(sam_tab) &lt;- paste0(&quot;S&quot;, rownames(sam_tab)) dada2_ps &lt;- get_dada2_phyloseq(seq_tab = otu_tab, tax_tab = tax_tab, sam_tab = sam_tab, phy_tree = tree) dada2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 24 samples ] ## sample_data() Sample Data: [ 24 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] Here, the phyloseq object comprises five components (OTU Table, Sample Data, Taxonomy Table, Phylogenetic Tree and DNAStringSet). 14.2.1.1 Summarize phyloseq-class object summarize_phyloseq(dada2_ps) ## Compositional = NO2 ## 1] Min. number of reads = 511812] Max. number of reads = 936223] Total number of reads = 15025374] Average number of reads = 62605.70833333335] Median number of reads = 619157] Sparsity = 0.8653738839285716] Any OTU sum to 1 or less? NO8] Number of singletons = 09] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 1Group2 ## [[1]] ## [1] &quot;1] Min. number of reads = 51181&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 93622&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1502537&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 62605.7083333333&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 61915&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.865373883928571&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? NO&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 0&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; The minus account of the OTU counts is 51181 in the phyloseq object, and we can use it as the threshold to rarefy. Notice the Sparsity (0.865), indicating the data has many zeros and pay attention to the downstream data analysis. A common property of amplicon based microbiota data generated by sequencing. 14.2.2 Quality Control Quality control of DADA2 results will help us have more rational determinations on the further data analysis. 14.2.2.1 Reads’ track by DADA2 plot_Dada2Track(data=dada2_res$reads_track) Figure 14.2: Reads’ track by DADA2 (16s example) The percentage of the final remained read counts approximate 70%, indicating that we should consider the sequence depth for analysis when we build the sequence library. 14.2.2.2 Spike-in sample (BRS) assessment Extract the genus level phyloseq and getting the BRS_ID dada2_ps_genus &lt;- summarize_taxa(ps = dada2_ps, taxa_level = &quot;Genus&quot;) sample_data(dada2_ps_genus) ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA ## S6040 BB ## S6043 AA ## S6045 BB ## S6046 BB ## S6048 BB ## S6049 AA ## S6050 BB ## S6054 BB ## S6055 BB ## S6058 BB ## S6059 AA ## S6060 AA ## S6061 AA ## S6063 BB ## S6065 AA ## S6066 AA ## S6068 BB ## S8005 QC The BRS_ID is S8005 . Run run_RefCheck run_RefCheck( ps=dada2_ps_genus, BRS_ID=&quot;S8005&quot;, Reference=NULL, Ref_type=&quot;16s&quot;, Save=NULL) ## Noting: the Reference Matrix is for 16s ## S8005 is in the Reference Matrix&#39;s samples and remove it to run ## ## #########Matched baterica of the Spike-in sample########### ## Identifying some taxa of the Reference Matrix are not in the dataset ## g__Escherichia/Shigella ## ## Checking out the additional Taxa are in the sequencing dataset ## ########################################################### ## ## ##############Value of the Reference sample############### ## Correlation Coefficient of the Reference sample is: 0.9692 ## Bray Curtis of the Reference sample is: 0.0808 ## Impurity of the Reference sample is: 14.1 ## ########################################################### ## #####Final Evaluation Results of the Spike-in sample####### ## The spike-in sample&#39;s 14.1 is more than the Cutoff of Impurity (0.1565) ## ########################################################### ## 8002 8003 8004 8006 8007 8008 ## Bifidobacterium 31.11079015 30.88310969 32.31232692 18.4930259 20.20409870 17.96225391 ## Bacteroides 20.44753484 14.46581958 24.57151411 26.7370147 25.85863655 27.51353663 ## Faecalibacterium 0.79850615 0.62937893 1.05531023 1.7487249 1.64282727 1.96346413 ## Lactobacillus 2.61732573 3.36856272 3.44379163 5.9292703 5.78000836 5.78189064 ## Parabacteroides 7.11124408 7.45952579 5.36075144 8.7149995 8.01840234 8.74899584 ## Collinsella 0.12792605 0.88271385 0.55665744 1.2764130 0.67921372 1.89356397 ## Coprococcus_3 1.00380683 0.97969362 0.80270938 1.6693557 1.56419908 1.67969035 ## Dorea 2.80715148 3.45564660 2.46613277 3.9684605 3.99163530 3.81529666 ## Streptococcus 2.91960260 3.43387563 2.59149764 3.4818362 3.31409452 3.51378702 ## Roseburia 0.03404484 0.04750030 0.02806676 0.0338295 0.03178586 0.02503886 ## Anaerostipes 0.32291011 0.43245062 0.31528329 0.5386697 0.44500209 0.53416240 ## Enterococcus 14.51444842 14.66472707 11.04239952 13.1674820 12.07360937 12.88771113 ## Prevotella_9 0.77374627 3.07465463 2.75709154 2.9145415 2.52446675 3.04952478 ## Eggerthella 0.04951976 0.15437596 0.27131203 0.4840221 0.43998327 0.47365181 ## Impurity_level 0.08562792 0.06531291 0.05987576 0.0000000 0.00000000 0.00000000 ## 8009 8005 mean ## Bifidobacterium 18.03588291 27.22437034 24.52823232 ## Bacteroides 26.99272343 24.23896093 23.85321759 ## Faecalibacterium 1.81219797 1.04035376 1.33634542 ## Lactobacillus 6.32672332 3.87088505 4.63980722 ## Parabacteroides 8.62634005 5.61833757 7.45732457 ## Collinsella 1.26367828 0.45502126 0.89189845 ## Coprococcus_3 1.71221463 0.87586251 1.28594151 ## Dorea 3.69382881 2.34880690 3.31836988 ## Streptococcus 3.37721491 2.68740253 3.16491388 ## Roseburia 0.02499583 0.03311188 0.03229673 ## Anaerostipes 0.48047548 0.32471000 0.42420796 ## Enterococcus 12.84924735 11.61906390 12.85233610 ## Prevotella_9 2.84952508 5.40257632 2.91826586 ## Eggerthella 0.35549631 0.16128688 0.29870601 ## Impurity_level 0.00000000 14.10000000 1.78885207 ## Evaluation ## Bifidobacterium S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Bacteroides S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Faecalibacterium S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Lactobacillus S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Parabacteroides S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Collinsella S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Coprococcus_3 S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Dorea S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Streptococcus S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Roseburia S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Anaerostipes S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Enterococcus S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Prevotella_9 S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Eggerthella S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). ## Impurity_level S8005 didn&#39;t pass the threshold (2022-06-17 11:19:53). 14.2.2.3 Spike-in sample’s remove dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] 14.2.2.4 Rarefaction curves plot_RarefCurve(ps = dada2_ps_remove_BRS, taxa_level = &quot;OTU&quot;, step = 400, label = &quot;Group&quot;, color = &quot;Group&quot;) ## rarefying sample S6030 ## rarefying sample S6032 ## rarefying sample S6033 ## rarefying sample S6035 ## rarefying sample S6036 ## rarefying sample S6037 ## rarefying sample S6040 ## rarefying sample S6043 ## rarefying sample S6045 ## rarefying sample S6046 ## rarefying sample S6048 ## rarefying sample S6049 ## rarefying sample S6050 ## rarefying sample S6054 ## rarefying sample S6055 ## rarefying sample S6058 ## rarefying sample S6059 ## rarefying sample S6060 ## rarefying sample S6061 ## rarefying sample S6063 ## rarefying sample S6065 ## rarefying sample S6066 ## rarefying sample S6068 Figure 14.3: Rarefaction curves (16s example) The result showed that all the samples had different sequence depth but had the full sample richness. 14.2.3 Data processing This part has too may procedures and we only choose some of them. Please go to Chapter 6 to see more approaches and details for being familiar with this part. 14.2.3.1 Rarefy otu counts From previous results of quality evaluation, the sequence depth of samples are different which have effects on the downstream analysis. Here, choosing the rarefy (Normaliztion method: random subsampling counts to the smallest library size) to get the equal sample sums. dada2_ps_rarefy &lt;- norm_rarefy(dada2_ps_remove_BRS, size = 51181, rng_seed = 123) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] In addition, we could also perform some other normalization methods on the rarefied phyloseq object. By the way, we didn’t transform the data by using log algorithm because the count matrix is required by the following data analysis methods. 14.2.3.2 Extracting specific taxonomic level dada2_ps_rare_genus &lt;- summarize_taxa(dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) dada2_ps_rare_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] 14.2.3.3 Filtering the low relative abundance or unclassified taxa by the threshold (total counts &lt; 10) dada2_ps_rare_genus_filter &lt;- run_filter(dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) dada2_ps_rare_genus_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 149 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 149 taxa by 6 taxonomic ranks ] 14.2.3.4 Trimming the taxa with low occurrence less than threshold dada2_ps_rare_genus_filter_trim &lt;- run_trim(dada2_ps_rare_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_rare_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] Finally, we obtained the final phyloseq-class object dada2_ps_rare_genus_filter_trim and changed its name. 14.2.4 Diversity analysis 14.2.4.1 Alpha diveristy Calculate the alpha diversity Notes: the otu table must be counts matrix (rarefied but not trim counts matrix) when you choose Observed etc measures. dada_ps_rare_genus_alpha &lt;- run_alpha_diversity(ps=dada2_ps_rare_genus, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) print(dada_ps_rare_genus_alpha) ## TempRowNames Group Observed Chao1 se.chao1 Shannon ## 1 S6030 BB 74 74.00000 0.0000000 2.622800 ## 2 S6032 BB 38 38.00000 0.0000000 1.711068 ## 3 S6033 BB 80 80.16667 0.5431879 2.719495 ## 4 S6035 AA 35 35.00000 0.1232013 1.953807 ## 5 S6036 BB 95 95.00000 0.0000000 2.942657 ## 6 S6037 AA 35 35.00000 0.0000000 1.933007 ## 7 S6040 BB 58 58.00000 0.0000000 2.490198 ## 8 S6043 AA 65 65.33333 0.9246628 2.098003 ## 9 S6045 BB 60 60.00000 0.0000000 2.920363 ## 10 S6046 BB 71 71.00000 0.1241166 2.264433 ## 11 S6048 BB 66 66.00000 0.0000000 2.630421 ## 12 S6049 AA 60 60.00000 0.0000000 2.506885 ## 13 S6050 BB 53 53.00000 0.0000000 2.431334 ## 14 S6054 BB 84 84.00000 0.0000000 2.769973 ## 15 S6055 BB 75 75.00000 0.0000000 2.297388 ## 16 S6058 BB 37 37.00000 0.2465985 2.262059 ## 17 S6059 AA 71 71.00000 0.0000000 2.682960 ## 18 S6060 AA 48 48.00000 0.0000000 1.883809 ## 19 S6061 AA 80 80.00000 0.0000000 3.088651 ## 20 S6063 BB 38 38.00000 0.0000000 1.543267 ## 21 S6065 AA 77 77.00000 0.0000000 2.877568 ## 22 S6066 AA 67 67.00000 0.0000000 2.638564 ## 23 S6068 BB 40 40.00000 0.0000000 2.100363 visualization plot_boxplot(data=dada_ps_rare_genus_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;red&quot;, &quot;blue&quot;), method = &quot;wilcox.test&quot;) Figure 14.4: Alpha diversity (16s example) 14.2.4.2 Beta diversity beta dipersion dada2_ps_beta &lt;- run_beta_diversity(ps=dada2_ps_rare_genus_filter_trim, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.01412 0.0141198 1.6675 999 0.201 ## Residuals 21 0.17783 0.0084679 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.21 ## BB 0.21063 dada2_ps_beta$BetaDispersion Figure 14.5: Beta diversity (16s example) 14.2.5 PERMANOVA + Ordination 14.2.5.1 PERMANOVA dada2_ps_per &lt;- run_permanova(ps=dada2_ps_rare_genus_filter_trim, method = &quot;bray&quot;, columns = &quot;Group&quot;) print(dada2_ps_per) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 23 1 0.2290643 0.2290643 1.331995 0.05964515 0.225 0.225 The PERMANOVA result of the Group (Pr(&gt;F) &gt; 0.05) revealed that the two groups had not the distinct patterns of microbial community. 14.2.5.2 Ordination We performed ordination by using Principal Coordinate Analysis (PCoA). If you want to try other methods please go to see Chapter 8 for more details. dada2_ps_ordination &lt;- run_ordination( ps = dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCoA&quot;) plot_Ordination(ResultList = dada2_ps_ordination, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;)) Figure 14.6: PCoA (16s example) 14.2.6 Microbial composition A whole picture of the microbial composition. 14.2.6.1 Stacked barplot XMAS package plot_StackBarPlot( ps=dada2_ps_rarefy, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) Figure 14.7: Microbial composition (16s example) XVIZ package plot_stacked_bar_XIVZ( phyloseq=dada2_ps_rarefy, level=&quot;Phylum&quot;, feature = &quot;Group&quot;) Figure 14.8: Microbial composition (16s example) XVIZ 14.2.6.2 Core microbiota convert absolute abundance into relative abundance dada2_ps_rare_genus_filter_trim_rb &lt;- XMAS2::normalize(dada2_ps_rare_genus_filter_trim, method = &quot;TSS&quot;) dada2_ps_rare_genus_filter_trim_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] visualization prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(0.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rare_genus_filter_trim_rb, plot.type = &quot;heatmap&quot;, colours = gray(seq(0, 1, length=5)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) pl_core Figure 14.9: Core taxa (16s example) The degree of color indicates the size of abundance and prevalence. Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(dada2_ps_rare_genus_filter_trim_rb, detection = 0.01, prevalence = 0.8) print(core_taxa_name) ## [1] &quot;g__Bifidobacterium&quot; &quot;g__Blautia&quot; Result: Only 2 genera (g__Bifidobacterium and g__Blautia) passed the threshold of detection and prevalence which we choose. 14.2.7 Differential Analysis There are more than 10 approaches to perform differential analysis. Here, we choose two of them and recommend users going to Chapter 10 to see more detials. 14.2.7.1 Liner discriminant analysis (LDA) effect size (LEfSe) Calculation dada2_ps_lefse &lt;- run_lefse( dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) head(dada2_ps_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize ## 1 g__Parasutterella 9_AA vs 14_BB AA -0.0016591047 0.85650392 ## 2 g__Intestinibacter 9_AA vs 14_BB AA -0.0006908416 1.93147690 ## 3 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB BB 0.0015775708 1.82912951 ## 4 g__Ruminococcaceae_UCG_004 9_AA vs 14_BB BB 0.0022272123 0.90316718 ## 5 g__Odoribacter 9_AA vs 14_BB BB 0.0024493354 1.51101169 ## 6 g__Romboutsia 9_AA vs 14_BB BB 0.0025243365 0.03488245 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 4.402050 1.727713e-04 1.080357e-03 ## 2 NA 3.835091e-04 0.000000e+00 ## 3 NA 2.251192e-04 0.000000e+00 ## 4 NA 2.412492e-04 2.451905e-03 ## 5 NA 2.193175e-05 6.049999e-04 ## 6 -6.856424 2.189796e-03 5.035627e-05 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 5.109966e-05 4.481148 0.0039010977 ## 2 1.398797e-03 -1.964554 0.0018833386 ## 3 1.173882e-03 -4.746617 0.0058619051 ## 4 0.000000e+00 2.342928 0.0014432092 ## 5 0.000000e+00 2.099583 0.0005780758 ## 6 5.835026e-03 -3.334490 0.0070941306 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 0.0093203061 0.0004173209 65.22 88.89 ## 2 0.0006806440 0.0026564994 60.87 22.22 ## 3 0.0003503379 0.0094050554 60.87 22.22 ## 4 0.0028227139 0.0005563847 52.17 77.78 ## 5 0.0010839017 0.0002529020 52.17 77.78 ## 6 0.0010861419 0.0109564090 78.26 55.56 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 50.00 0.0025 (-12;12) ## 2 85.71 3.4 (5.8;1) ## 3 85.71 4900 (5000;4900) ## 4 35.71 0.14 (-3.7;4) ## 5 35.71 0.31 (-2;2.6) ## 6 92.86 76 (85;68) Visualization # don&#39;t run this code when you do lefse in reality dada2_ps_lefse$LDA_Score &lt;- dada2_ps_lefse$LDA_Score * 1000 plot_lefse( da_res = dada2_ps_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 1, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 14.10: Lefse analysis (16s example) 14.2.7.2 Wilcoxon Rank-Sum test Calculation dada2_ps_wilcox &lt;- run_wilcox( dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(dada2_ps_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 70.56349 63.5 1.0000000 1.0000000 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 39.65079 44.5 0.2556616 0.7346565 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 23.17460 44.0 0.1980169 0.7346565 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 1222.58730 71.0 0.6293971 0.9192573 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 104.78571 64.5 0.9304707 0.9718249 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 23.03175 67.0 0.8239942 0.9445787 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 NA 0 0 ## 2 -0.9577718 30 26 ## 3 NA 0 0 ## 4 0.1524904 316 329 ## 5 NA 0 0 ## 6 -0.1085245 64 64 ## Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA ## 1 0.0 0.01201252 12.06 ## 2 50.5 -0.42227633 9.94 ## 3 9.0 -0.43387758 9.89 ## 4 296.0 0.17342686 12.89 ## 5 0.0 0.03358045 12.17 ## 6 69.0 0.08724541 12.44 ## Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 11.96 21.74 22.22 ## 2 13.32 82.61 88.89 ## 3 13.36 43.48 33.33 ## 4 11.43 65.22 55.56 ## 5 11.89 21.74 22.22 ## 6 11.71 73.91 77.78 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.43 0.67 (-0.11;1.5) ## 2 78.57 4.1 (6.8;1.3) ## 3 50.00 8.6 (13;4.3) ## 4 71.43 0.39 (-1.4;2.2) ## 5 21.43 1.5 (2.3;0.71) ## 6 71.43 0.88 (0.64;1.1) Volcano plot_volcano( dada2_ps_wilcox, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) Figure 14.11: Wilcoxon Rank-Sum test (16s example) 14.3 Metagenomics The metagenomic data analysis pipeline is just the same as 16s. In briefly, the example comprises the following steps: Converting inputs into phyloseq object; Quality Evaluation; Pre-Processing Data; Diversity analysis; Ordination analysis; Composition analysis; 14.3.1 Converting inputs into phyloseq-class object The result of the in-house Metaphlan2/3 pipeline: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt metaphlan2_res &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_merged.tsv&quot;, package = &quot;XMAS2&quot; ), header = TRUE, stringsAsFactors = FALSE ) metaphlan2_sam &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) metaphlan2_res_list &lt;- import_metaphlan_taxa(metaphlan2_res, taxa_level = &quot;Species&quot;) otu_tab &lt;- metaphlan2_res_list$abu_tab tax_tab &lt;- metaphlan2_res_list$tax_tab sam_tab &lt;- metaphlan2_sam %&gt;% tibble::column_to_rownames(&quot;SampleID&quot;) metaphlan2_ps &lt;- get_metaphlan_phyloseq(otu_tab = otu_tab, sam_tab = sam_tab, tax_tab = tax_tab) metaphlan2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] Here, the phyloseq object comprises three components (OTU Table, Sample Data and Taxonomy Table). 14.3.1.1 Summarize phyloseq-class object summarize_phyloseq(metaphlan2_ps) ## Compositional = NO2 ## 1] Min. number of reads = 0.98218212] Max. number of reads = 1.00000053] Total number of reads = 22.94511414] Average number of reads = 0.9976136565217395] Median number of reads = 0.99980247] Sparsity = 0.7131234995998936] Any OTU sum to 1 or less? YES8] Number of singletons = 3239] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 2Groupphynotype2 ## [[1]] ## [1] &quot;1] Min. number of reads = 0.9821821&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 1.0000005&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 22.9451141&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 0.997613656521739&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 0.9998024&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.713123499599893&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? YES&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 323&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 2&quot; ## ## [[11]] ## [1] &quot;Group&quot; &quot;phynotype&quot; Notice the Sparsity (0.713), indicating the data has many zeros and pay attention to the downstream data analysis. 14.3.2 Quality Control 14.3.2.1 Spike-in sample (BRS) assessment Extract the species level phyloseq and obtain the BRS_ID metaphlan2_ps_species &lt;- summarize_taxa(metaphlan2_ps, taxa_level = &quot;Species&quot;) metaphlan2_ps_species@sam_data ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 ## s7 BB 8.75 ## s8 BB 0.00 ## s9 BB 3.75 ## s10 BB 2.50 ## s11 BB 15.00 ## s12 BB 2.50 ## s13 BB 2.50 ## s14 BB 0.00 ## s15 BB 1.07 ## s16 BB 2.50 ## s17 AA 5.00 ## s18 BB 35.00 ## s19 BB 7.50 ## s20 BB 15.00 ## s21 AA 3.75 ## s22 AA 3.75 ## refE QC NA Run run_RefCheck run_RefCheck( ps=metaphlan2_ps_species, BRS_ID=&quot;refE&quot;, Reference=NULL, Ref_type=&quot;MGS&quot;, Save=NULL) ## Noting: the Reference Matrix is for MGS ## ## #########Matched baterica of the Spike-in sample########### ## Identifying some taxa of the Reference Matrix are not in the dataset ## s__Lactobacillus_salivarius ## s__Bacteroides_fragilis ## s__Parabacteroides_goldsteinii ## s__Escherichia_coli ## s__Enterococcus_faecalis ## s__Bifidobacterium_bifidum ## s__Lactobacillus_pentosus ## s__Bacteroides_intestinalis ## s__Eggerthella_unclassified ## ## Checking out the additional Taxa are in the sequencing dataset ## ########################################################### ## ## ##############Value of the Reference sample############### ## Correlation Coefficient of the Reference sample is: -0.06471 ## Bray Curtis of the Reference sample is: 0.8752 ## Impurity of the Reference sample is: 32.69 ## ########################################################### ## #####Final Evaluation Results of the Spike-in sample####### ## The spike-in sample of sequencing dataset didn&#39;t pass the cutoff of the Reference Matrix ## ########################################################### ## 7682 7683 7684 7685 7842 7843 ## Bifidobacterium_longum 10.31563 9.25812 9.69184 7.76031 11.03311 11.61484 ## Bacteroides_uniformis 2.24195 2.24035 1.92015 2.18435 2.43230 2.38180 ## Faecalibacterium_prausnitzii 0.65615 0.60153 0.60112 0.62079 0.54147 0.55383 ## Bifidobacterium_adolescentis 7.05426 6.28460 6.57297 6.25448 4.69357 4.80628 ## Bacteroides_thetaiotaomicron 3.25076 3.31897 3.22418 3.43809 3.35611 3.38323 ## Collinsella_aerofaciens 0.56220 0.53249 0.60476 0.47934 0.65513 0.68833 ## Coprococcus_comes 2.28581 2.42978 2.25227 2.82904 1.21527 1.16485 ## Dorea_formicigenerans 4.83509 5.02149 5.18268 5.56891 3.34720 3.09877 ## Streptococcus_salivarius 3.54266 3.74119 3.62036 4.01546 2.90216 2.70193 ## Bacteroides_xylanisolvens 1.55648 1.84824 1.91166 1.85273 1.75220 1.74002 ## Bacteroides_ovatus 3.08489 3.27226 3.10904 3.24565 3.51376 3.50063 ## Roseburia_hominis 0.04383 0.04183 0.04107 0.02304 0.03853 0.03464 ## Bacteroides_vulgatus 3.06713 3.20369 3.14979 3.15352 3.24822 3.09280 ## Prevotella_copri 2.03128 1.99619 1.92504 2.15422 1.57638 1.60584 ## Bifidobacterium_pseudocatenulatum 6.89310 6.36177 7.39605 5.76804 6.19464 6.47094 ## Lachnospiraceae_bacterium_5_1_63FAA 0.22002 0.26062 0.28058 0.33329 0.07093 0.06778 ## Impurity_level 7.33876 7.34799 7.14891 6.47250 8.88190 9.72198 ## 7844 7845 refE mean ## Bifidobacterium_longum 12.29030 11.69019 0.01646 9.29675556 ## Bacteroides_uniformis 2.13830 2.41437 0.21061 2.01824222 ## Faecalibacterium_prausnitzii 0.58806 0.54655 1.61939 0.70321000 ## Bifidobacterium_adolescentis 4.94943 4.84278 0.04649 5.05609556 ## Bacteroides_thetaiotaomicron 3.29098 3.30355 1.47422 3.11556556 ## Collinsella_aerofaciens 0.76063 0.66896 0.07251 0.55826111 ## Coprococcus_comes 1.07160 1.07834 0.01444 1.59348889 ## Dorea_formicigenerans 3.08677 2.70732 0.02775 3.65288667 ## Streptococcus_salivarius 2.61760 2.57348 0.02846 2.86036667 ## Bacteroides_xylanisolvens 1.69811 1.67676 0.32466 1.59565111 ## Bacteroides_ovatus 3.37872 3.42300 0.25782 2.97619667 ## Roseburia_hominis 0.03532 0.03597 0.01307 0.03414444 ## Bacteroides_vulgatus 3.13038 3.06113 2.14684 3.02816667 ## Prevotella_copri 1.57913 1.59224 60.84109 8.36682333 ## Bifidobacterium_pseudocatenulatum 7.41615 6.27837 0.15023 5.88103222 ## Lachnospiraceae_bacterium_5_1_63FAA 0.05229 0.04781 0.06825 0.15573000 ## Impurity_level 9.72162 10.57600 32.69000 11.09996222 ## Evaluation ## Bifidobacterium_longum refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bacteroides_uniformis refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Faecalibacterium_prausnitzii refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bifidobacterium_adolescentis refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bacteroides_thetaiotaomicron refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Collinsella_aerofaciens refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Coprococcus_comes refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Dorea_formicigenerans refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Streptococcus_salivarius refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bacteroides_xylanisolvens refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bacteroides_ovatus refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Roseburia_hominis refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bacteroides_vulgatus refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Prevotella_copri refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Bifidobacterium_pseudocatenulatum refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Lachnospiraceae_bacterium_5_1_63FAA refE didn&#39;t pass the threshold (2022-06-17 11:20:09). ## Impurity_level refE didn&#39;t pass the threshold (2022-06-17 11:20:09). The spike-in samples didn’t pass the cutoff and failed to add the the Reference Matrix. 14.3.2.2 Spike-in sample’s remove metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 14.3.3 Data processing This part has too may procedures and we only choose some of them. Please go to Chapter 6 to see more approaches and details for being familiar with this part. 14.3.3.1 Extracting specific taxonomic level metaphlan2_ps_species &lt;- summarize_taxa(metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_species ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 325 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 325 taxa by 7 taxonomic ranks ] 14.3.3.2 Filtering the low relative abundance or unclassified taxa by the threshold (total counts &lt; 1e-4) metaphlan2_ps_species_filter &lt;- run_filter(metaphlan2_ps_species, cutoff = 1e-4, unclass = TRUE) metaphlan2_ps_species_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 233 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 233 taxa by 7 taxonomic ranks ] 14.3.3.3 Trimming the taxa with low occurrence less than threshold metaphlan2_ps_species_filter_trim &lt;- run_trim(metaphlan2_ps_species_filter, cutoff = 0.2, trim = &quot;feature&quot;) metaphlan2_ps_species_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 144 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 144 taxa by 7 taxonomic ranks ] Finally, we obtained the final phyloseq-class object metaphlan2_ps_species_filter_trim and changed its name. 14.3.4 Diversity analysis 14.3.4.1 Alpha diveristy Calculate the alpha diversity Notes: choosing the measures (Shannon, Simpson and InvSimpson) only for relative abundance. metaphlan2_ps_genus_alpha &lt;- run_alpha_diversity(ps=metaphlan2_ps_remove_BRS, measures = c(&quot;Shannon&quot;, &quot;Simpson&quot;, &quot;InvSimpson&quot;)) head(metaphlan2_ps_genus_alpha) ## TempRowNames Group phynotype Shannon Simpson InvSimpson ## 1 s1 BB 0.00 2.876002 0.9108857 11.221549 ## 2 s2 AA 2.50 2.045392 0.8105742 5.279111 ## 3 s3 BB 0.00 3.441176 0.9439371 17.837114 ## 4 s4 AA 1.25 2.746917 0.8290768 5.850579 ## 5 s5 AA 30.00 1.450722 0.6412178 2.787207 ## 6 s6 AA 15.00 2.619951 0.8950369 9.527154 visualization plot_boxplot(data=metaphlan2_ps_genus_alpha, y_index = c(&quot;Shannon&quot;, &quot;Simpson&quot;, &quot;InvSimpson&quot;), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;red&quot;, &quot;blue&quot;), method = &quot;wilcox.test&quot;) Figure 14.12: Alpha diversity (MGS example) 14.3.4.2 Beta diversity beta dipersion metaphlan2_ps_beta &lt;- run_beta_diversity(ps=metaphlan2_ps_species_filter_trim, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.00725 0.0072500 0.8423 999 0.362 ## Residuals 20 0.17215 0.0086076 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.37 ## BB 0.36968 metaphlan2_ps_beta$BetaDispersion Figure 14.13: Beta diversity (MGS example) 14.3.5 PERMANOVA + Ordination 14.3.5.1 PERMANOVA metaphlan2_ps_per &lt;- run_permanova(ps=metaphlan2_ps_species_filter_trim, method = &quot;bray&quot;, columns = &quot;Group&quot;) head(metaphlan2_ps_per) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 22 1 0.864659 0.864659 2.880195 0.1258816 0.002 0.002 The PERMANOVA result of the Group (AdjustedPvalue &lt; 0.05) revealed that the two groups had the distinct patterns of microbial community. 14.3.5.2 Ordination We performed ordination by using Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP). If you want to try other methods please go to see Chapter 8 for more details. metaphlan2_ps_ordination &lt;- run_ordination( ps = metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, method = &quot;UMAP&quot;) plot_Ordination(ResultList = metaphlan2_ps_ordination, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), sample = TRUE, sidelinechart = FALSE, circle_type = &quot;ellipse_line&quot;, sideboxplot = TRUE) Figure 14.14: PCoA (MGS example) 14.3.6 Microbial composition 14.3.6.1 Stacked barplot XMAS package plot_StackBarPlot( ps=metaphlan2_ps_species, taxa_level=&quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) Figure 14.15: Microbial composition (MGS example) XVIZ package plot_stacked_bar_XIVZ( phyloseq = metaphlan2_ps_species, level = &quot;Phylum&quot;, feature = &quot;Group&quot;) Figure 14.16: Microbial composition (MGS) XVIZ 14.3.6.2 Core microbiota visualization library(RColorBrewer) prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) plot_core_taxa(metaphlan2_ps_species_filter_trim, plot.type = &quot;heatmap&quot;, colours = rev(brewer.pal(5, &quot;Spectral&quot;)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) Figure 14.17: Core taxa (MGS example) The degree of color indicates the size of abundance and prevalence. Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(metaphlan2_ps_species_filter_trim, detection = 0.001, prevalence = 0.5) print(core_taxa_name) ## [1] &quot;s__Bacteroides_ovatus&quot; &quot;s__Bacteroides_thetaiotaomicron&quot; ## [3] &quot;s__Bacteroides_uniformis&quot; &quot;s__Bacteroides_vulgatus&quot; ## [5] &quot;s__Bifidobacterium_longum&quot; &quot;s__Bifidobacterium_pseudocatenulatum&quot; ## [7] &quot;s__Collinsella_aerofaciens&quot; &quot;s__Escherichia_coli&quot; ## [9] &quot;s__Eubacterium_eligens&quot; &quot;s__Eubacterium_hallii&quot; ## [11] &quot;s__Faecalibacterium_prausnitzii&quot; &quot;s__Roseburia_inulinivorans&quot; ## [13] &quot;s__Ruminococcus_gnavus&quot; &quot;s__Ruminococcus_obeum&quot; ## [15] &quot;s__Ruminococcus_sp_5_1_39BFAA&quot; &quot;s__Ruminococcus_torques&quot; ## [17] &quot;s__Streptococcus_salivarius&quot; Result: 17 species passed the threshold of detection and prevalence which we choose. 14.3.7 Differential Analysis There are more than 10 approaches to perform differential analysis. Here, we choose two of them and recommend users going to Chapter 10 to see more detials. 14.3.7.1 Liner discriminant analysis (LDA) effect size (LEfSe) Calculation metaphlan2_ps_lefse &lt;- run_lefse( metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Lda = 0) head(metaphlan2_ps_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize ## 1 s__Bacteroides_thetaiotaomicron 7_AA vs 15_BB AA -0.0116335575 1.7060104 ## 2 s__Dorea_longicatena 7_AA vs 15_BB BB 0.0001815435 1.8150746 ## 3 s__Clostridium_bartlettii 7_AA vs 15_BB BB 0.0002684431 0.5568581 ## 4 s__Eggerthella_lenta 7_AA vs 15_BB BB 0.0007727734 1.3782640 ## 5 s__Megamonas_rupellensis 7_AA vs 15_BB BB 0.0015165676 0.6588019 ## 6 s__Eubacterium_hallii 7_AA vs 15_BB BB 0.0022815951 0.9344746 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 5.381835 3.626626e-03 0.046672380 ## 2 NA 8.307987e-04 0.000000000 ## 3 NA 3.015399e-04 0.000000000 ## 4 NA 4.814304e-05 0.000000000 ## 5 NA 0.000000e+00 0.000696179 ## 6 NA 4.971583e-03 0.000000000 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0011193508 3.179359 0.0243515081 ## 2 0.0095340308 -7.282836 0.0075759073 ## 3 0.0005010011 -3.798289 0.0013792627 ## 4 0.0001997106 -2.851660 0.0002119311 ## 5 0.0000000000 5.427947 0.0012634286 ## 6 0.0122431283 -3.926701 0.0107446245 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 6.189295e-02 6.832171e-03 90.91 100.00 ## 2 7.114010e-05 1.107813e-02 63.64 42.86 ## 3 1.406860e-04 1.957265e-03 68.18 42.86 ## 4 4.044677e-05 2.919571e-04 54.55 28.57 ## 5 3.782499e-03 8.786256e-05 31.82 57.14 ## 6 1.005405e-03 1.528959e-02 63.64 42.86 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 86.67 0.058 (-5.5;5.6) ## 2 73.33 7.8e+16 (7.8e+16;7.8e+16) ## 3 80.00 620 (630;610) ## 4 66.67 10 (15;5.9) ## 5 20.00 0.00044 (-15;15) ## 6 73.33 170 (180;160) Visualization # don&#39;t run this code when you do lefse in reality metaphlan2_ps_lefse$LDA_Score &lt;- metaphlan2_ps_lefse$LDA_Score * 100 plot_lefse( da_res = metaphlan2_ps_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 0, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 14.18: Lefse analysis (MGS example) 14.3.7.2 Wilcoxon Rank-Sum test Calculation metaphlan2_ps_wilcox &lt;- run_wilcox( metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(metaphlan2_ps_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue ## 1 s__Alistipes_finegoldii 7_AA vs 15_BB Nonsignif 1.0408198 73.5 0.1145448 ## 2 s__Alistipes_indistinctus 7_AA vs 15_BB Nonsignif 0.6121359 66.0 0.2677815 ## 3 s__Alistipes_onderdonkii 7_AA vs 15_BB Nonsignif 0.9447780 63.5 0.4370143 ## 4 s__Alistipes_putredinis 7_AA vs 15_BB Nonsignif 1.2379874 54.0 0.9409918 ## 5 s__Alistipes_senegalensis 7_AA vs 15_BB Nonsignif 0.2194185 53.5 0.9641827 ## 6 s__Alistipes_shahii 7_AA vs 15_BB Nonsignif 0.8582355 71.0 0.1751506 ## AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 0.4903434 NA 0.00000000 ## 2 0.7432693 NA 0.00000000 ## 3 0.8178636 5.819157 0.00000825 ## 4 1.0000000 NA 0.00016915 ## 5 1.0000000 NA 0.00000000 ## 6 0.6286778 NA 0.00012580 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB ## 1 0.0027362 0.0e+00 0.52169761 ## 2 0.0000000 0.0e+00 0.34139504 ## 3 0.0002823 5.0e-06 0.27924089 ## 4 0.0000000 2.2e-04 0.03870725 ## 5 0.0000000 0.0e+00 0.02626565 ## 6 0.0062474 0.0e+00 0.46134594 ## Mean Rank Abundance\\nAA Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) ## 1 14.50 10.10 45.45 ## 2 13.43 10.60 31.82 ## 3 13.07 10.77 54.55 ## 4 11.71 11.40 54.55 ## 5 11.64 11.43 27.27 ## 6 14.14 10.27 50.00 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 57.14 40.00 0.0028 (-12;12) ## 2 42.86 26.67 0.067 (-5.2;5.4) ## 3 57.14 53.33 0.38 (-1.5;2.3) ## 4 42.86 60.00 0.47 (-0.99;1.9) ## 5 28.57 26.67 1 (1;1) ## 6 57.14 46.67 0.17 (-3.2;3.6) Volcano plot_volcano( metaphlan2_ps_wilcox, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) Figure 14.19: Wilcoxon Rank-Sum test (MGS example) 14.4 Systematic Information sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Monterey 12.2.1 ## ## Matrix products: default ## LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] RColorBrewer_1.1-2 viridis_0.6.2 viridisLite_0.4.0 ## [4] picante_1.8.2 nlme_3.1-155 vegan_2.5-7 ## [7] lattice_0.20-45 permute_0.9-7 ape_5.6-2 ## [10] conflicted_1.1.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [13] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [16] S4Vectors_0.32.3 BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [19] matrixStats_0.61.0 ggpubr_0.4.0 ggplot2_3.3.5 ## [22] phyloseq_1.38.0 tibble_3.1.6 dplyr_1.0.8 ## [25] XMAS2_2.1.4 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.2 reticulate_1.24 tidyselect_1.1.2 ## [4] RSQLite_2.2.10 AnnotationDbi_1.56.2 htmlwidgets_1.5.4 ## [7] grid_4.1.2 BiocParallel_1.28.3 Rtsne_0.15 ## [10] munsell_0.5.0 units_0.8-0 codetools_0.2-18 ## [13] DT_0.21 umap_0.2.8.0 withr_2.5.0 ## [16] colorspace_2.0-3 highr_0.9 knitr_1.37 ## [19] rstudioapi_0.13 pscl_1.5.5 robustbase_0.93-9 ## [22] bayesm_3.1-4 ggsignif_0.6.3 labeling_0.4.2 ## [25] mbzinb_0.2 GenomeInfoDbData_1.2.7 pheatmap_1.0.12 ## [28] bit64_4.0.5 farver_2.1.0 rhdf5_2.38.1 ## [31] vctrs_0.3.8 generics_0.1.2 TH.data_1.1-0 ## [34] xfun_0.30 R6_2.5.1 RVenn_1.1.0 ## [37] locfit_1.5-9.5 RcppZiggurat_0.1.6 bitops_1.0-7 ## [40] rhdf5filters_1.6.0 microbiome_1.16.0 cachem_1.0.6 ## [43] DelayedArray_0.20.0 assertthat_0.2.1 scales_1.1.1 ## [46] multcomp_1.4-18 nnet_7.3-17 gtable_0.3.0 ## [49] sandwich_3.0-1 rlang_1.0.2 genefilter_1.76.0 ## [52] splines_4.1.2 protoclust_1.6.3 rstatix_0.7.0 ## [55] broom_0.7.12 checkmate_2.0.0 yaml_2.3.5 ## [58] reshape2_1.4.4 abind_1.4-5 crosstalk_1.2.0 ## [61] backports_1.4.1 Rfast_2.0.6 qvalue_2.26.0 ## [64] Hmisc_4.6-0 DiagrammeR_1.0.9 tensorA_0.36.2 ## [67] tools_4.1.2 bookdown_0.24 zCompositions_1.4.0 ## [70] ellipsis_0.3.2 gplots_3.1.1 jquerylib_0.1.4 ## [73] biomformat_1.22.0 proxy_0.4-26 Rcpp_1.0.8.2 ## [76] plyr_1.8.6 base64enc_0.1-3 visNetwork_2.1.0 ## [79] zlibbioc_1.40.0 classInt_0.4-3 purrr_0.3.4 ## [82] RCurl_1.98-1.6 rpart_4.1.16 openssl_2.0.0 ## [85] Wrench_1.12.0 cowplot_1.1.1 zoo_1.8-9 ## [88] ggrepel_0.9.1 cluster_2.1.2 magrittr_2.0.2 ## [91] data.table_1.14.2 RSpectra_0.16-0 truncnorm_1.0-8 ## [94] mvtnorm_1.1-3 ALDEx2_1.26.0 RAIDA_1.0 ## [97] evaluate_0.15 xtable_1.8-4 XML_3.99-0.9 ## [100] jpeg_0.1-9 gridExtra_2.3 shape_1.4.6 ## [103] compiler_4.1.2 KernSmooth_2.23-20 crayon_1.5.0 ## [106] htmltools_0.5.2 mgcv_1.8-39 ggVennDiagram_1.2.1 ## [109] Formula_1.2-4 tidyr_1.2.0 geneplotter_1.72.0 ## [112] libcoin_1.0-9 DBI_1.1.2 corrplot_0.92 ## [115] MASS_7.3-55 sf_1.0-7 compositions_2.0-4 ## [118] Matrix_1.4-0 ade4_1.7-18 car_3.0-12 ## [121] cli_3.2.0 parallel_4.1.2 igraph_1.2.11 ## [124] pkgconfig_2.0.3 coin_1.4-2 foreign_0.8-82 ## [127] foreach_1.5.2 annotate_1.72.0 bslib_0.3.1 ## [130] multtest_2.50.0 XVector_0.34.0 NADA_1.6-1.1 ## [133] stringr_1.4.0 digest_0.6.29 Biostrings_2.62.0 ## [136] rmarkdown_2.13 htmlTable_2.4.0 edgeR_3.36.0 ## [139] gtools_3.9.2 modeltools_0.2-23 lifecycle_1.0.1 ## [142] jsonlite_1.8.0 Rhdf5lib_1.16.0 carData_3.0-5 ## [145] askpass_1.1 limma_3.50.1 fansi_1.0.2 ## [148] pillar_1.7.0 ggsci_2.9 DEoptimR_1.0-10 ## [151] KEGGREST_1.34.0 fastmap_1.1.0 httr_1.4.2 ## [154] survival_3.3-1 glue_1.6.2 png_0.1-7 ## [157] iterators_1.0.14 glmnet_4.1-3 bit_4.0.4 ## [160] class_7.3-20 stringi_1.7.6 sass_0.4.0 ## [163] metagenomeSeq_1.36.0 blob_1.2.2 DESeq2_1.34.0 ## [166] latticeExtra_0.6-29 caTools_1.18.2 memoise_2.0.1 ## [169] e1071_1.7-9 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
