[["index.html", "XMAS 2.0 Tutorial Chapter 1 Introduction 1.1 Overview of the design of XMAS 1.2 Input data 1.3 Methods 1.4 Outline of this Tutorial 1.5 Key publications 1.6 Citation 1.7 Change log", " XMAS 2.0 Tutorial Hua Zou 2023-04-12 Chapter 1 Introduction The next generation sequencing (NGS) technology have flourished the microbial research. More and more uncultured microbiota have been sequenced and identified, and their roles on host also have been investigated. According to the sequenced DNA parts, there are several methods including Amplicon sequencing (16s rRNA) and Whole genome shotgun sequencing (Metagenomics) to obtain the bacteria. Amplicon sequencing (16s rRNA): uses the V3/V4 of bacteria 16s rRNA to sequence the bacteria. The in-house 16s sequencing pipeline uses QIIME2 platform wrapped DADA2 algorithm to acquire the amplicon sequence variants (ASVs) which is the same meaning of operational taxonomic units (OTUs). Whole genome shotgun sequencing (Metagenomics): could detect the whole DNA of the microbial community. The in-house metagenomic sequencing pipeline uses the metaphlan2 or metaphlan3 algorithm which is based on marker genes of microbiome to obtain the microbial profiles. We provide the universal data analysis framework on microbial data for in-house use when you use XMAS 2.0, and some specific data analysis modules should be performed by yourself in a different way. If you have no any background on microbiota data analysis, please go to the example of Chapter 15 to get familiar with the SOP of data analysis. Alternatively, you can also go to the following websites: 16s DataAnalysis template by XMAS 2.0 MGS DataAnalysis template by XMAS 2.0 This tutorial requires that the users should have basic knowledge on R language and statistics. If you are new to microbial research, we recommend the Statistical Analysis of Microbiome Data with R (Xia et al. 2018) as guide book. We suggest users using local laptop because our own server have not deployed XMAS 2.0 package yet. In addition, installing the following software before using XMAS 2.0. R 3.6.3 or later release Download link. Rstudio Desktop Download link. 1.1 Overview of the design of XMAS Figure 1.1: The Overview of the design of XMAS package 1.2 Input data Note the data pre-processing requirements before analysing data with XMAS 2.0: Types of data. Different types of sequencing data can be explored and integrated with XMAS 2.0. Our methods can handle not only 16s sequencing data by DADA2 but also metagenomic sequencing data by Metaphlan software. All the data should from the in-house pipeline. dada2 result from standardized_analytics_workflow_R_function. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt The result of the in-house Metaphlan2/3 pipeline. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt Transformation. The package handles transformation by log with 10. Normalization. The package handles Normalization by providing many appropriate normalization methods. Filtering or Trimming. While XMAS 2.0 methods can handle large data sets, we recommend pre-filtering the data to less than the threshold by features or samples. Such step aims to lessen the computational time and reduce the false positive rate during the downstream data analysis. Data format. Our methods use phyloseq object as inputdata format. Therefore, the phyloseq object must be generated by our own methods (otu_table, sample_data or taxa_table). Multiple groups’ comparison. In the current version of XMAS 2.0, it doesn’t provide the methods for Multiple groups’ comparison. 1.3 Methods Generalized UniFrac Distance Metrics: Associating microbiome composition with environmental covariates using generalized UniFrac distances (J. Chen et al. 2012). PERMANOVA: Permutational multivariate analysis of variance (PERMANOVA) (Anderson 2014). Mantel Test: The detection of disease clustering and a generalized regression approach (Mantel 1967). Multi-response permutation procedures (MRPP): The application of multivariate permutation methods based on distance functions in the earth sciences (Mielke Jr 1991). ALDEx2: Unifying the analysis of high-throughput sequencing datasets: characterizing RNA-seq, 16S rRNA gene sequencing and selective growth experiments by compositional data analysis (Fernandes et al. 2014). limma: voom: Precision weights unlock linear model analysis tools for RNA-seq read counts (Law et al. 2014). mbzinb: An omnibus test for differential distribution analysis of microbiome sequencing data (J. Chen et al. 2018). RAIDA: A robust approach for identifying differentially abundant features in metagenomic samples (Sohn, Du, and An 2015). LEfSe: Metagenomic biomarker discovery and explanation (Segata et al. 2011). MetagenomeSeq: Differential abundance analysis for microbial marker-gene surveys (Paulson et al. 2013). DESeq2: Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2 (Love, Huber, and Anders 2014). edgeR: A scaling normalization method for differential expression analysis of RNA-seq data (Robinson and Oshlack 2010). Analysis of composition of microbiomes (ANCOM): Analysis of composition of microbiomes: a novel method for studying microbial composition”, Microbial Ecology in Health (Mandal et al. 2015). Corncob: Modeling microbial abundances and dysbiosis with beta-binomial regression”, Microbial Ecology in Health (Martin, Witten, and Willis 2020). Maaslin2: Multivariable association discovery in population-scale meta-omics studies (Mallick et al. 2021). LOCOM: A logistic regression model for testing differential abundance in compositional microbiome data with false discovery rate control (Hu, Satten, and Hu 2022). 1.4 Outline of this Tutorial This tutorial was organized according to the XMAS 2.0 functions. In the beginning two chapters, we specially provided the basic requirements of bioinformatics and overview on microbiota, and the installation of XMAS. In Chapter 3, we convert the results from in-house pipeline into phyloseq-class object for downstream data analysis. In Chapter 4 provided the functions to evaluate the data quality. In Chapter 5, we introduced the preprocessing methods on microbiota data before differential analysis. In Chapter 6 provided the alpha diversity analysis. In Chapter 7 provided the beta diversity analysis. In Chapter 8 provided the microbiota composition analysis. In Chapter 9 provided the core microbiota analysis. In Chapter 10 provided the differential analysis. In Chapter 11 provided some functions for visualization. In Chapter 12 provided the association analysis. In Chapter 13 showed the principals of the differential analysis methods. In Chapter 14 provided the examples by using XMAS 2.0 on microbiota data. 1.5 Key publications phyloseq object. (McMurdie and Holmes 2013) phyloseq: an R package for reproducible interactive analysis and graphics of microbiome census data. Generalized UniFrac Distance Metrics. (J. Chen et al. 2012) Associating microbiome composition with environmental covariates using generalized UniFrac distances. Permutational Multivariate Analysis of Variance (PERMANOVA). (Anderson 2014) Permutational multivariate analysis of variance (PERMANOVA). ALDEx2. (Fernandes et al. 2014) Unifying the analysis of high-throughput sequencing datasets: characterizing RNA-seq, 16S rRNA gene sequencing and selective growth experiments by compositional data analysis. 1.6 Citation Kindly cite by using citation(\"XMAS\") if you think XAMS helps you. Alternative way is Tong B, Zou H (2022). XMAS: A set of tools for statistical analysis in metagenomics. R package version 2.1.7, &lt;URL:https://gitlab.xbiome.com/Analytics/xmas/&gt;. 1.7 Change log Arrange the Categories of Tutorial (2022-08-31). Update Cross-references (2022-09-08). Update how to run plot_metaphlanTrack (2022-10-08). References "],["how-to-install-xmas.html", "Chapter 2 How to install XMAS 2.1 Description 2.2 Installation of dependencies 2.3 Installation 2.4 Vignette 2.5 Authors 2.6 Future plan", " Chapter 2 How to install XMAS XMAS 2.0 contains several modules, such as preprocessing, actions, methods and visualization. Furthermore, the extended parts of actions module give this package more flexible ability to add new parts. We also separate scripts into calculation and visualization parts by their names. The functions’ prefix with run is used for calculation, and the functions’ prefix with plot is used for visualization. Outline of this Chapter: Description Installation of dependencies Installation Vignette Authors Future plan Figure 2.1: The Overview of the design of XMAS package 2.1 Description XMAS 2.0 is comprised of R functions for in-house use, including functions for statistical, functional, and visual analysis of microbiol data, and is still underdevelopment. Here, we provide the XMAS 2.0 releases and users can download it. 2.2 Installation of dependencies Requiring the R-base version more than 3.6.3. Some of the dependencies are uploaded to CRAN or bioconductor website, but others, which are underdevelopment are only obtained from github website. Dependencies version (optional but not required): Biostrings (&gt;= 2.22.0) BiocGenerics (&gt;= 0.32.0) phyloseq (&gt;= 1.30.0) forcats (&gt;= 0.5.1) stringr (&gt;= 1.4.0) ggplot2 (&gt;= 3.3.5) readr (&gt;= 1.4.0) ALDEx2 (&gt;= 1.18.0) dplyr (&gt;= 1.0.8) tibble (&gt;= 3.1.6) DT (&gt;= 0.18) purrr (&gt;= 0.3.4) metagenomeSeq (&gt;= 1.28.0) edgeR (&gt;= 3.28.1) DESeq2 (&gt;= 1.26.0) limma (&gt;= 3.42.2) mbzinb (&gt;= 0.2) pscl (&gt;= 1.5.5) methods (&gt;= 3.6.3) matrixStats (&gt;= 0.58.0) RAIDA (&gt;= 1.0) compositions (&gt;= 2.0-4) vegan (&gt;= 2.5-7) coin (&gt;= 1.4-2) SummarizedExperiment (&gt;= 1.16.1) MASS (&gt;= 7.3-53.1) Biobase (&gt;= 2.46.0) nlme (&gt;= 3.1-152) tidyr (&gt;= 1.1.3) corncob (&gt;= 0.2.0) Maaslin2 (&gt;= 1.7.3) ggrepel (&gt;= 0.9.1) ggpubr (&gt;= 0.4.0) ggalluvial (&gt;= 0.12.3) Hmisc (&gt;= 4.5-0) RColorBrewer (&gt;= 1.1-2) umap (&gt;= 0.2.8.0) ape (&gt;= 5.6-2) cowplot (&gt;= 1.1.1) Rtsne (&gt;= 0.15) ade4 (&gt;= 1.7-18) scales (&gt;= 1.1.1) ggVennDiagram (&gt;= 1.2.1) impute (&gt;= 1.68.0) pheatmap (&gt;= 1.0.12) There are two methods to install the aforementioned packages. 2.2.1 Packages in CRAN &amp; Bioconductor install.packages(&quot;pacman&quot;) library(pacman) pacman::p_load(Biostrings, BiocGenerics, phyloseq, forcats, stringr, ggplot2, readr, ALDEx2, dplyr, tibble, DT, purrr, metagenomeSeq, stats, edgeR, DESeq2, methods, limma, pscl, matrixStats, compositions, vegan, coin, SummarizedExperiment, MASS, Biobase, nlme, tidyr, Maaslin2, ggrepel, ggpubr, ggalluvial, Hmisc, umap, Rtsne, ape, cowplot, scales, ade4, ggVennDiagram, impute, pheatmap) 2.2.2 Packages in github # Step 1: Install devtools if (!requireNamespace(c(&quot;remotes&quot;, &quot;devtools&quot;), quietly=TRUE)) { install.packages(c(&quot;devtools&quot;, &quot;remotes&quot;)) } library(devtools) #library(remotes) # Step 2: install corncob package devtools::install_github(&quot;bryandmartin/corncob&quot;) # remotes::install_github(&quot;bryandmartin/corncob&quot;) 2.2.3 Packages from website Manual download of RAIDA_1.0.tar.gz from here and install locally R CMD INSTALL RAIDA_*.tar.gz install.packages(&quot;RAIDA_1.0.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) Manual download of mbzinb_0.2.tar.gz from here and install locally R CMD INSTALL mbzinb_*.tar.gz install.packages(&quot;mbzinb_0.2.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) 2.3 Installation Get the XMAS released version from Release version 2.3.1 Installation in linux or Mac os through command line Using git command to download the whole repository and then install this package by linux command line. git clone git@gitlab.xbiome.com:Analytics/xmas.git R CMD build xmas R CMD INSTALL XMAS_*.tar.gz 2.3.2 Installation by R from gitlab # Step 1: Install devtools install.packages(c(&quot;devtools&quot;, &quot;remotes&quot;)) library(devtools) #library(remotes) # Step 2: install xmas package devtools::install_gitlab(&quot;BangzhuoTong/xmas&quot;) # remotes::install_github(&quot;BangzhuoTong/xmas&quot;) 2.3.3 Installation by R from local XMAS*.tar.gz file Downloading the tar.gz file from the gitlab website, and then use the following command to install it. install.packages(&quot;XMAS*.tar.gz&quot;, repos = NULL, type = &quot;source&quot;) 2.4 Vignette For detailed tutorials on how to use XMAS, please refer to the R package vignettes. Choosing the html format to do a practice. Hope you have fun with XMAS. utils::browseVignettes(package=&quot;XMAS&quot;) 2.5 Authors Bangzhuo Tong Hua Zou 2.6 Future plan XMAS 2.0, which developed for standard data analysis workflow, is part of the X-therapia platform and we will update it with more and more data analysis modules and also add new functions according to the in-house requirements to support the company. We welcome any comments and requirements and hope users give issues on the gitlab issues module. "],["convert-inputdata-into-phyloseq-object.html", "Chapter 3 Convert inputdata into phyloseq object 3.1 Loading Packages 3.2 Importing Data 3.3 Systematic Information", " Chapter 3 Convert inputdata into phyloseq object r Biocpkg(“phyloseq”) (McMurdie and Holmes 2013) is the most popular Biocondcutor package used by the microbiome research field, and phyloseq-class objects are a great data-standard for microbiota data in R. Therefore, the core functions in XMAS take phyloseq-class object as input. In the phyloseq object, information on OTU abundances, taxonomy of OTUs, the phylogenetic tree and metadata is stored. This tutorial will introduce you the basic steps to convert results from the in-house pipeline into phyloseq-class object. More importantly on how to look at your data and filter appropriately. We will use the inputs from /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/. Outline of this Chapter: Loading Packages Importing Data Result from dada2 Result from Metaphlan 3.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) 3.2 Importing Data 3.2.1 Result from dada2 dada2 results from standardized_analytics_workflow_R_function: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt dada2_res &lt;- readRDS( system.file( &quot;extdata&quot;, &quot;dada2_res.rds&quot;, package = &quot;XMAS2&quot; ) ) sam_tab &lt;- read.table( system.file( &quot;extdata&quot;, &quot;dada2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) tree &lt;- phyloseq::read_tree( system.file( &quot;extdata&quot;, &quot;tree.nwk&quot;, package = &quot;XMAS2&quot; ) ) 3.2.1.1 taxa table We use import_dada2_taxa to convert dada2_res$tax_tab into our own taxa table tax_tab &lt;- import_dada2_taxa(dada2_taxa = dada2_res$tax_tab) head(tax_tab, 1) ## Kingdom ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;k__Bacteria&quot; ## Phylum ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;p__Firmicutes&quot; ## Class ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;c__Clostridia&quot; ## Order ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;o__Clostridiales&quot; ## Family ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;f__Lachnospiraceae&quot; ## Genus ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;g__Blautia&quot; ## Species ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG &quot;s__Blautia_unclassified&quot; 3.2.1.2 otu table otu_tab &lt;- dada2_res$seq_tab # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(otu_tab) &lt;- paste0(&quot;S&quot;, rownames(otu_tab)) head(otu_tab[, 1, F]) ## TAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGTAGACGGTGTGGCAAGTCTGATGTGAAAGGCATGGGCTCAACCTGTGGACTGCATTGGAAACTGTCATACTTGAGTGCCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCAGTGGCGAAGGCGGCTTACTGGACGGTAACTGACGTTGAGGCTCGAAAGCGTGGGGAGCAAACAGG ## S6030 1253 ## S6032 14677 ## S6033 2929 ## S6035 0 ## S6036 3548 ## S6037 8484 3.2.1.3 metadata table sam_tab &lt;- sam_tab %&gt;% tibble::column_to_rownames(&quot;seqID&quot;) # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(sam_tab) &lt;- paste0(&quot;S&quot;, rownames(sam_tab)) head(sam_tab) ## Group ## S6065 AA ## S6049 AA ## S6043 AA ## S6037 AA ## S6059 AA ## S6060 AA 3.2.1.4 phyloseq object dada2_ps &lt;- get_dada2_phyloseq( seq_tab = otu_tab, tax_tab = tax_tab, sam_tab = sam_tab, phy_tree = tree) dada2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 24 samples ] ## sample_data() Sample Data: [ 24 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] we obtain the phyloseq-class object and then use it to perform data analysis. otu_table dada2_ps@otu_table %&gt;% data.frame() %&gt;% head() ## S6030 S6032 S6033 S6035 S6036 S6037 S6040 S6043 S6045 S6046 S6048 S6049 S6050 S6054 S6055 S6058 S6059 S6060 S6061 S6063 S6065 ## ASV_1 1253 14677 2929 0 3548 8484 11727 5218 4942 7347 3503 3803 14593 4275 2812 0 6847 17893 2956 3328 6302 ## ASV_2 2810 1558 1839 11885 0 5632 631 7326 1809 4781 3476 108 3100 39 3879 6389 298 4995 196 45061 542 ## ASV_3 7107 2915 2200 0 1232 19675 0 1617 839 9362 4815 0 0 1121 13472 0 1421 0 0 0 9694 ## ASV_4 0 2280 94 13775 0 4456 937 746 3730 273 85 64 562 448 18 611 96 5976 0 837 0 ## ASV_5 6983 15963 1172 256 12140 874 1722 120 210 0 111 802 994 1971 18 517 808 443 48 109 7 ## ASV_6 489 0 199 0 836 0 8565 0 0 1257 0 5998 0 3093 2091 0 10572 0 8495 0 2703 ## S6066 S6068 S8005 ## ASV_1 8414 0 0 ## ASV_2 357 10870 7325 ## ASV_3 4387 0 14797 ## ASV_4 706 17977 0 ## ASV_5 122 546 2516 ## ASV_6 0 0 974 tax_table dada2_ps@tax_table %&gt;% data.frame() %&gt;% head() ## Kingdom Phylum Class Order Family Genus ## ASV_1 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales f__Lachnospiraceae g__Blautia ## ASV_2 k__Bacteria p__Actinobacteria c__Actinobacteria o__Bifidobacteriales f__Bifidobacteriaceae g__Bifidobacterium ## ASV_3 k__Bacteria p__Actinobacteria c__Actinobacteria o__Bifidobacteriales f__Bifidobacteriaceae g__Bifidobacterium ## ASV_4 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales f__Lachnospiraceae g__Lachnospiraceae_unclassified ## ASV_5 k__Bacteria p__Firmicutes c__Bacilli o__Lactobacillales f__Streptococcaceae g__Streptococcus ## ASV_6 k__Bacteria p__Firmicutes c__Clostridia o__Clostridiales f__Ruminococcaceae g__Faecalibacterium ## Species ## ASV_1 s__Blautia_unclassified ## ASV_2 s__Bifidobacterium_unclassified ## ASV_3 s__Bifidobacterium_unclassified ## ASV_4 s__Lachnospiraceae_unclassified ## ASV_5 s__Streptococcus_unclassified ## ASV_6 s__Faecalibacterium_unclassified sample_table dada2_ps@sam_data %&gt;% data.frame() %&gt;% head() ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA 3.2.2 Result from Metaphlan The result of the in-house Metaphlan2/3 pipeline: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt metaphlan2_res &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_merged.tsv&quot;, package = &quot;XMAS2&quot; ), header = TRUE, stringsAsFactors = FALSE ) metaphlan2_sam &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) 3.2.2.1 taxa table metaphlan2_res_list &lt;- import_metaphlan_taxa( object = metaphlan2_res, taxa_level = &quot;Species&quot;, trim = TRUE) tax_tab &lt;- metaphlan2_res_list$tax_tab head(tax_tab) ## Kingdom Phylum Class Order Family Genus ## s__Actinomyces_graevenitzii k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_johnsonii k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_massiliensis k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_odontolyticus k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_oris k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## s__Actinomyces_viscosus k__Bacteria p__Actinobacteria c__Actinobacteria o__Actinomycetales f__Actinomycetaceae g__Actinomyces ## Species ## s__Actinomyces_graevenitzii s__Actinomyces_graevenitzii ## s__Actinomyces_johnsonii s__Actinomyces_johnsonii ## s__Actinomyces_massiliensis s__Actinomyces_massiliensis ## s__Actinomyces_odontolyticus s__Actinomyces_odontolyticus ## s__Actinomyces_oris s__Actinomyces_oris ## s__Actinomyces_viscosus s__Actinomyces_viscosus 3.2.2.2 otu table otu_tab &lt;- metaphlan2_res_list$abu_tab head(otu_tab) ## s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 ## s__Actinomyces_graevenitzii 3.58e-05 0 0.0e+00 0 0 0 7.20e-06 0.0e+00 0.0000000 0 1.40e-05 0e+00 0.00e+00 0.0e+00 0 0 ## s__Actinomyces_johnsonii 0.00e+00 0 0.0e+00 0 0 0 0.00e+00 0.0e+00 0.0000000 0 0.00e+00 0e+00 1.15e-05 0.0e+00 0 0 ## s__Actinomyces_massiliensis 0.00e+00 0 0.0e+00 0 0 0 2.95e-05 0.0e+00 0.0000000 0 0.00e+00 0e+00 0.00e+00 0.0e+00 0 0 ## s__Actinomyces_odontolyticus 7.70e-05 0 1.7e-06 0 0 0 2.47e-05 5.8e-06 0.0001175 0 6.16e-05 0e+00 1.66e-05 3.9e-06 0 0 ## s__Actinomyces_oris 0.00e+00 0 0.0e+00 0 0 0 2.81e-05 0.0e+00 0.0000135 0 0.00e+00 0e+00 0.00e+00 0.0e+00 0 0 ## s__Actinomyces_viscosus 4.60e-06 0 0.0e+00 0 0 0 0.00e+00 0.0e+00 0.0000039 0 6.20e-06 7e-06 1.10e-06 0.0e+00 0 0 ## s17 s18 s19 s20 s21 s22 refE ## s__Actinomyces_graevenitzii 0 6.1e-06 1.60e-06 0 0 0.00e+00 0 ## s__Actinomyces_johnsonii 0 0.0e+00 0.00e+00 0 0 0.00e+00 0 ## s__Actinomyces_massiliensis 0 0.0e+00 0.00e+00 0 0 2.52e-05 0 ## s__Actinomyces_odontolyticus 0 0.0e+00 4.19e-05 0 0 0.00e+00 0 ## s__Actinomyces_oris 0 0.0e+00 0.00e+00 0 0 7.40e-06 0 ## s__Actinomyces_viscosus 0 0.0e+00 0.00e+00 0 0 7.28e-05 0 3.2.2.3 metadata table sam_tab &lt;- metaphlan2_sam %&gt;% tibble::column_to_rownames(&quot;SampleID&quot;) head(sam_tab) ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 3.2.2.4 phyloseq object metaphlan2_ps &lt;- get_metaphlan_phyloseq( otu_tab = otu_tab, sam_tab = sam_tab, tax_tab = tax_tab) metaphlan2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 322 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 322 taxa by 7 taxonomic ranks ] 3.3 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggplot2 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["quality-evaluation.html", "Chapter 4 Quality Evaluation 4.1 Loading Packages 4.2 Importing Data 4.3 Reads track 4.4 Spike-in (BRS) sample assessment 4.5 Removing BRS 4.6 Rarefaction Curves 4.7 Summarize phyloseq-class object 4.8 Variability 4.9 Systematic Information", " Chapter 4 Quality Evaluation Quality control of DADA2 results will help us have more rational determinations on the further data analysis. Firstly, the reads’ track of DADA2 could show us the Changed Ratio of reads through the in-house standard amplicon sequencing data upstream pipeline. Then, the Evaluation of the spike-in samples from the Reference Matrix will reflect the quality of sequencing data. Thirdly, we suggest you that utilizing the rarefaction curves to assess the sequence depth per sample and choose the rational cutoff of OTU Number to do rarefy. Finally, obtaining a whole picture on the final phyloseq object. Outline of this Chapter: Loading Packages Importing Data Reads track Plotting DAD2 Plotting Metaphlan Spike-in (BRS) sample assessment 16s data Metagenomic data Removing BRS Rarefaction Curves Summarize phyloseq-class object Variability Coefficient of variation Distribution of number of sequences 4.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 4.2 Importing Data dada2_res &lt;- readRDS( system.file( &quot;extdata&quot;, &quot;dada2_res.rds&quot;, package = &quot;XMAS2&quot; ) ) data(&quot;dada2_ps&quot;) data(&quot;metaphlan2_ps&quot;) data(&quot;metaphlan_ReadsQC&quot;) 4.3 Reads track 4.3.1 Plotting DAD2 this procedure only perform in 16s data plot_Dada2Track(data = dada2_res$reads_track) Figure 4.1: Reads’ track of DADA2 4.3.2 Plotting Metaphlan This procedure only perform in metagenomic data How to obtain the input data (use ?plot_metaphlanTrack to get the details) /share/projects/Engineering/pipeline_output/PipelineJob_141157_20220823: the pipeline output BJ_RoundG_ReadsQC: prefix of results result: output of directory python /share/projects/Analytics/IO/zouhua/Script/obtain_metaphlan_ReadsQC.py \\ -f /share/projects/Engineering/pipeline_output/PipelineJob_141157_20220823 \\ -p BJ_RoundG_ReadsQC \\ -o result the results of Reads QC head(metaphlan_ReadsQC) ## SeqID Raw_read1 Raw_read2 fastp_trim1 fastp_trim2 trimmomatic_trim1 trimmomatic_trim2 kneaddata_rmhost1 kneaddata_rmhost2 ## 1: 18067 45077982 45077982 44862250 44862250 41821866 41821866 41097049 41097049 ## 2: 17849 41421167 41421167 41295206 41295206 40053357 40053357 39210455 39210455 ## 3: 18022 42814142 42814142 42610037 42610037 40187608 40187608 39552557 39552557 ## 4: 17962 42950934 42950934 42485249 42485249 40274876 40274876 39692768 39692768 ## 5: 17912 44754250 44754250 44551046 44551046 41557190 41557190 40830893 40830893 ## 6: 17909 42698262 42698262 42491213 42491213 39526119 39526119 38695718 38695718 plotting plot_metaphlanTrack(data = metaphlan_ReadsQC) ## [1] &quot;This palatte have 19 colors!&quot; Figure 4.2: Reads’ track of Metaphlan2 4.4 Spike-in (BRS) sample assessment The spike-in sample is use to evaluate the consistent quality on bacteria when we have multiple sequence batches data. We devised an evaluation system containing the Correlation Coefficient, Bray Curtis Distance and Impurity Level to assess the sequencing data quality. Please use the default Reference and Save directory to obtain and save the spike-in sample matrix when you run run_RefCheck. 4.4.1 16s data The taxonomic levels of spike-in sample’s bacteria is genus. Firstly, using the summarize_taxa to get the genus level phyloseq object and get the BRS_ID. dada2_ps_genus &lt;- summarize_taxa(ps = dada2_ps, taxa_level = &quot;Genus&quot;) dada2_ps_genus@sam_data ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA ## S6040 BB ## S6043 AA ## S6045 BB ## S6046 BB ## S6048 BB ## S6049 AA ## S6050 BB ## S6054 BB ## S6055 BB ## S6058 BB ## S6059 AA ## S6060 AA ## S6061 AA ## S6063 BB ## S6065 AA ## S6066 AA ## S6068 BB ## S8005 QC do run_RefCheck under the optimal parameters. BRS_ID: the ID of BRS sample; Reference: the directory of the latest spike-in sample matrix (default: /share/projects/Analytics/analytics/XMAS/RefCheck/); Save: the directory to save the latest spike-in sample matrix (default: /share/projects/Analytics/analytics/XMAS/RefCheck/). To see more details to use ?run_RefCheck. dada2_ps_genus_brs_res &lt;- run_RefCheck( ps = dada2_ps_genus, BRS_ID = &quot;S8005&quot;, Reference = NULL, Ref_type = &quot;16s&quot;, Save = NULL) head(dada2_ps_genus_brs_res) ## Noting: the Reference Matrix is for 16s ## S8005 is in the Reference Matrix&#39;s samples and remove it to run ## ## ############Matched baterica of the BRS sample############# ## The number of BRS&#39; bacteria matched the Reference Matrix is [15] ## g__Bifidobacterium ## g__Bacteroides ## g__Faecalibacterium ## g__Lactobacillus ## g__Parabacteroides ## g__Collinsella ## g__Coprococcus_3 ## g__Dorea ## g__Streptococcus ## g__Roseburia ## g__Anaerostipes ## g__Escherichia_Shigella ## g__Enterococcus ## g__Prevotella_9 ## g__Eggerthella ## ## The number of the additional bacteria compared to Reference Matrix is [1] ## ########################################################### ## ## ##################Status of the BRS sample################## ## Whether the BRS has the all bateria of Reference Matrix: TRUE ## Correlation Coefficient of the BRS is: 0.9714 ## Bray Curtis of the BRS is: 0.07607 ## Impurity of the BRS is: 0.06409 ## ########################################################### ## #####Final Evaluation Results of the BRS ####### ## The BRS of sequencing dataset passed the cutoff of the Reference Matrix ## Cutoff of Coefficient is 0.8946 ## Cutoff of BrayCurtis is 0.3878 ## Cutoff of Impurity is 0.1565 ## ########################################################### ## 8002 8003 8004 8006 8007 8008 8009 8005 mean ## Bifidobacterium 31.1107901 30.8831097 32.3123269 18.493026 20.2040987 17.962254 18.035883 27.2243703 24.5282323 ## Bacteroides 20.4475348 14.4658196 24.5715141 26.737015 25.8586366 27.513537 26.992723 24.2389609 23.8532176 ## Faecalibacterium 0.7985062 0.6293789 1.0553102 1.748725 1.6428273 1.963464 1.812198 1.0403538 1.3363454 ## Lactobacillus 2.6173257 3.3685627 3.4437916 5.929270 5.7800084 5.781891 6.326723 3.8708850 4.6398072 ## Parabacteroides 7.1112441 7.4595258 5.3607514 8.714999 8.0184023 8.748996 8.626340 5.6183376 7.4573246 ## Collinsella 0.1279261 0.8827139 0.5566574 1.276413 0.6792137 1.893564 1.263678 0.4550213 0.8918984 We could see that the messages are comprised of four parts. the 1st part showed the type of reference matrix and whether the spike-in sample had been added to reference matrix; the 2nd part revealed that what and how many the matched bacterica of the spike-in sample are; the 3nd part showed that the value of evaluation system in the spike-in sample; the 4nd part showed that whether the spike-in sample passes the cutoff of evaluation system. 4.4.2 Metagenomic data The taxonomic levels of spike-in sample’s bacteria is species. Firstly, using the summarize_taxa to get the species level phyloseq object and then do run_RefCheck under the optimal parameters. Quality Control by spike-in sample in metagenomic get the BRS_ID metaphlan2_ps_species &lt;- summarize_taxa(ps = metaphlan2_ps, taxa_level = &quot;Species&quot;) metaphlan2_ps_species@sam_data ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 ## s7 BB 8.75 ## s8 BB 0.00 ## s9 BB 3.75 ## s10 BB 2.50 ## s11 BB 15.00 ## s12 BB 2.50 ## s13 BB 2.50 ## s14 BB 0.00 ## s15 BB 1.07 ## s16 BB 2.50 ## s17 AA 5.00 ## s18 BB 35.00 ## s19 BB 7.50 ## s20 BB 15.00 ## s21 AA 3.75 ## s22 AA 3.75 ## refE QC NA run run_RefCheck metaphlan2_ps_species_brs_res &lt;- run_RefCheck( ps = metaphlan2_ps_species, BRS_ID = &quot;refE&quot;, Reference = NULL, Ref_type = &quot;MGS&quot;, Save = NULL) head(metaphlan2_ps_species_brs_res) ## Noting: the Reference Matrix is for MGS ## ## ############Matched baterica of the BRS sample############# ## The number of BRS&#39; bacteria matched the Reference Matrix is [16] ## s__Bifidobacterium_longum ## s__Bacteroides_ovatus ## s__Coprococcus_comes ## s__Bacteroides_vulgatus ## s__Bifidobacterium_adolescentis ## s__Bacteroides_thetaiotaomicron ## s__Streptococcus_salivarius ## s__Dorea_formicigenerans ## s__Bifidobacterium_pseudocatenulatum ## s__Bacteroides_uniformis ## s__Bacteroides_xylanisolvens ## s__Prevotella_copri ## s__Faecalibacterium_prausnitzii ## s__Collinsella_aerofaciens ## s__Lachnospiraceae_bacterium_5_1_63FAA ## s__Roseburia_hominis ## The number of bacteria unmatched the Reference Matrix is [11] ## s__Enterococcus_faecalis ## s__Escherichia_coli ## s__Bacteroides_fragilis ## s__Parabacteroides_goldsteinii ## s__Lactobacillus_salivarius ## s__Enterococcus_faecium ## s__Bifidobacterium_bifidum ## s__Lactobacillus_pentosus ## s__Eggerthella_unclassified ## s__Propionibacterium_acnes ## s__Bacteroides_intestinalis ## The number of the additional bacteria compared to the Reference Matrix is [56] ## ########################################################### ## ## ##################Status of the BRS sample################## ## Whether the BRS has the all bateria of Reference Matrix: FALSE ## Correlation Coefficient of the BRS is: -0.04118 ## Bray Curtis of the BRS is: 0.8735 ## Impurity of the BRS is: 32.69 ## ########################################################### ## #####Final Evaluation Results of the BRS ####### ## The BRS of sequencing dataset didn&#39;t pass the cutoff of the Reference Matrix ## ########################################################### ## 10471 10636 10637 10639 10640 10769 11115 11708 12592 13164 13331 13837 ## Bifidobacterium_longum 8.11381 7.67316 7.50927 5.70807 4.86413 11.54558 13.32375 12.83483 8.31626 12.25656 11.64168 12.64388 ## Bacteroides_ovatus 3.96168 3.92905 3.86741 4.44106 4.15994 2.99928 2.88927 2.74802 3.05585 2.78285 2.30211 3.17694 ## Coprococcus_comes 4.16280 4.18702 4.65603 4.40718 5.15653 1.73091 1.44618 1.57966 1.78718 1.34019 1.50536 1.50964 ## Bacteroides_vulgatus 3.35465 3.47741 3.43735 4.01041 3.92425 2.84171 2.73213 2.52132 3.08322 2.66631 2.21000 2.96186 ## Bifidobacterium_adolescentis 5.11369 5.10202 5.16323 3.75219 3.55822 7.14673 7.12725 7.89869 5.49066 6.57327 8.94479 5.61210 ## Bacteroides_thetaiotaomicron 3.24092 3.21696 3.20104 3.49194 3.50958 2.97032 3.00366 2.75088 3.22968 2.92743 2.43185 3.08880 ## 13864 13883 14294 14353 14514 14692 15043 15377 15378 15919 16048 16316 ## Bifidobacterium_longum 11.36085 9.62482 14.35451 16.63263 9.93664 9.47707 7.11444 10.55997 9.07591 10.01176 9.69043 7.52306 ## Bacteroides_ovatus 2.66994 3.27074 2.79573 2.87388 2.76674 3.46729 3.61227 3.49421 3.03110 2.76744 3.03531 3.32437 ## Coprococcus_comes 2.40314 1.57698 1.80259 0.90812 2.26324 1.14835 2.96786 1.63088 2.32643 3.01294 2.96924 3.59466 ## Bacteroides_vulgatus 2.72145 3.14976 2.63946 2.48610 1.13907 3.31856 3.57799 3.09254 2.91354 2.74777 3.09935 3.44793 ## Bifidobacterium_adolescentis 8.56589 4.65487 10.81433 7.48894 6.53874 3.67914 5.04893 4.97484 6.27492 7.89443 6.52876 5.88728 ## Bacteroides_thetaiotaomicron 2.69349 3.16444 2.91993 2.85340 2.73612 3.35522 3.27933 3.31300 2.86402 2.80401 3.13347 3.04083 ## 16319 16347 16379 16416 16643 17346 17358 17367 17447 17574 17614 17907 ## Bifidobacterium_longum 7.55665 9.70590 6.84815 9.89749 11.31632 7.66734 9.86840 10.87283 3.25866 9.70406 12.12046 11.29858 ## Bacteroides_ovatus 3.45295 3.62218 3.75943 2.96599 3.02706 3.40560 3.41400 3.08738 6.09596 3.54582 3.36962 3.43196 ## Coprococcus_comes 3.57862 1.76048 2.61452 2.04108 1.76011 3.69207 2.09069 2.24782 2.02841 2.65329 1.61138 1.25244 ## Bacteroides_vulgatus 3.53090 3.23231 3.49744 2.82052 3.00506 3.46903 3.43126 3.08539 6.05372 3.56764 3.17270 3.06646 ## Bifidobacterium_adolescentis 5.87504 4.35779 4.40074 5.76228 5.49289 6.01398 5.36079 6.43311 2.12800 6.20718 5.07402 4.43160 ## Bacteroides_thetaiotaomicron 3.11459 3.14863 3.26102 3.08699 3.02583 3.08416 3.41487 3.08820 5.93408 3.56745 3.27350 3.26772 ## 18003 18123 18158 18254 18652 18748 18883 19025 19151 19175 7682 7683 ## Bifidobacterium_longum 12.01189 12.41898 4.70889 9.50685 8.61060 10.72595 2.23603 11.74855 12.83975 9.35652 10.61692 9.70452 ## Bacteroides_ovatus 3.25432 3.33751 4.70126 3.99162 3.65097 3.61472 4.00635 3.48854 3.42018 3.75385 3.09351 3.31482 ## Coprococcus_comes 1.16593 1.32943 1.40043 1.30588 2.02912 1.43181 1.89141 1.34869 1.07983 1.49248 2.25102 2.31762 ## Bacteroides_vulgatus 2.90266 2.94911 4.49320 3.65775 1.26550 3.17810 4.38594 3.23491 3.14217 3.41299 3.05040 3.30423 ## Bifidobacterium_adolescentis 4.60358 4.28572 1.30207 2.33770 3.42930 4.09908 0.94154 3.49924 3.48965 3.62408 7.16903 6.45453 ## Bacteroides_thetaiotaomicron 3.23674 3.41009 4.11730 3.64058 3.49090 3.39957 3.64130 3.39626 3.24309 3.31257 3.27164 3.33818 ## 7684 7685 7842 7843 7844 7845 8108 8635 8952 9456 9474 refE ## Bifidobacterium_longum 10.26646 7.90970 11.09287 11.49847 12.31085 11.76466 9.55827 11.16770 4.86230 6.59407 10.18399 0.01646 ## Bacteroides_ovatus 3.12081 3.31232 3.53564 3.46157 3.38687 3.44778 3.66184 3.98663 4.11944 3.92516 2.55709 0.25782 ## Coprococcus_comes 2.12264 2.45777 1.21536 1.14849 1.07774 1.08142 1.32528 1.15150 1.33169 1.19713 2.89442 0.01444 ## Bacteroides_vulgatus 3.22814 3.27619 3.28027 3.18516 3.11734 3.07863 3.52520 3.62765 4.19069 3.80546 2.61231 2.14684 ## Bifidobacterium_adolescentis 6.70040 6.27837 4.72418 4.74670 4.96916 4.86254 4.15176 2.92750 1.96201 2.61821 9.42034 0.04649 ## Bacteroides_thetaiotaomicron 3.30218 3.46399 3.39208 3.37336 3.33352 3.35704 3.39183 3.96140 4.19124 3.99868 2.51572 1.47422 ## mean Evaluation ## Bifidobacterium_longum 9.560319 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). ## Bacteroides_ovatus 3.383351 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). ## Coprococcus_comes 2.057759 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). ## Bacteroides_vulgatus 3.192290 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). ## Bifidobacterium_adolescentis 5.166908 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). ## Bacteroides_thetaiotaomicron 3.262347 refE didn&#39;t pass the threshold (2023-04-12 14:39:20). 4.5 Removing BRS After evaluating the sequencing quality, we remove the BRS. dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] 4.6 Rarefaction Curves Rarefaction curves are often used when calculating alpha diversity indices, because increasing numbers of sequenced taxa allow increasingly accurate estimates of total population diversity. Rarefaction curves can therefore be used to estimate the full sample richness, as compared to the observed sample richness. plot_RarefCurve(ps = dada2_ps_remove_BRS, taxa_level = &quot;OTU&quot;, step = 400, label = &quot;Group&quot;, color = &quot;Group&quot;) ## rarefying sample S6030 ## rarefying sample S6032 ## rarefying sample S6033 ## rarefying sample S6035 ## rarefying sample S6036 ## rarefying sample S6037 ## rarefying sample S6040 ## rarefying sample S6043 ## rarefying sample S6045 ## rarefying sample S6046 ## rarefying sample S6048 ## rarefying sample S6049 ## rarefying sample S6050 ## rarefying sample S6054 ## rarefying sample S6055 ## rarefying sample S6058 ## rarefying sample S6059 ## rarefying sample S6060 ## rarefying sample S6061 ## rarefying sample S6063 ## rarefying sample S6065 ## rarefying sample S6066 ## rarefying sample S6068 Figure 4.3: Rarefaction Curves The result showed that all the samples had different sequencing depth but had the full sample richness. 4.7 Summarize phyloseq-class object Summarizing the phyloseq-class object by using summarize_phyloseq. It displayed that briefly introduction of the object. summarize_phyloseq(ps = dada2_ps_remove_BRS) ## Compositional = NO2 ## 1] Min. number of reads = 511812] Max. number of reads = 716673] Total number of reads = 14089154] Average number of reads = 61257.17391304355] Median number of reads = 614357] Sparsity = 0.8610248447204976] Any OTU sum to 1 or less? YES8] Number of singletons = 49] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 1Group2 ## [[1]] ## [1] &quot;1] Min. number of reads = 51181&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 71667&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1408915&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 61257.1739130435&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 61435&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.861024844720497&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? YES&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 4&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; The minus account of the OTU counts is 51181 in the phyloseq object, and we can use it as the threshold to rarefy. Notice the Sparsity (0.865), indicating the data has many zeros and pay attention to the downstream data analysis. A common property of amplicon based microbiota data generated by sequencing. 4.8 Variability We use the variability to measure measure heterogeneity in OTU/ASV abundance data. \\[Variability_{X} = \\frac{sd(X)}{mean(X)}\\] 4.8.1 Coefficient of variation Coefficient of variation (C.V), i.e. sd(x)/mean(x) is a widely used approach to measure heterogeneity in OTU/ASV abundance data. The plot below shows CV-mean(relaive mean abundance) relationship in the scatter plot, where variation is calculated for each OTU/ASV across samples versus mean relative abundance. Now plot C.V. pl &lt;- plot_taxa_cv(ps = dada2_ps_remove_BRS, plot.type = &quot;scatter&quot;) Figure 4.4: Density of the Taxa Mean abundance pl + scale_x_log10() Figure 4.5: Coefficient of variation From the above two plots, we see that there are several OTUs which have high C.V. and low mean. 4.8.2 Distribution of number of sequences Checking for distribution of number of sequences plot_read_distribution(ps = dada2_ps_remove_BRS, group=&quot;Group&quot;, plot.type = &quot;density&quot;) Figure 4.6: Distribution of number of sequences Different distribution between group AA and BB. 4.9 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["pre-processing.html", "Chapter 5 Pre-processing 5.1 Loading Packages 5.2 Importing Data 5.3 Transformation 5.4 Normalization 5.5 Filtering 5.6 Trimming 5.7 Imputation 5.8 Extracting specific taxa phyloseq-class object 5.9 Aggregating low relative abundance or unclassified taxa into others 5.10 Transform the abundance of taxa whose relative abundance under Limit Of Detection (LOD) into Zeros (only in metaphlan2/3) 5.11 Systematic Information", " Chapter 5 Pre-processing Performing the pre-processing steps on the phyloseq-class object. Data Processing is a critical procedure in data analysis. In this chapter, we would use the following steps to transform, normalize, and trim microbiota data. Outline of this Chapter: Loading Packages Importing Data Transformation Normalization Filtering Trimming Imputation Extracting specific taxa phyloseq-class object Aggregating low relative abundance or unclassified taxa into others Transform the abundance of taxa whose relative abundance under Limit Of Detection (LOD) into Zeros (only in metaphlan2/3) 5.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(conflicted) conflicted::conflict_prefer(&quot;normalize&quot;, &quot;XMAS2&quot;) 5.2 Importing Data data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] metagenomic sequencing (metaphlan2/3) data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 5.3 Transformation Transforming the taxa abundances in otu_table by sample, which means the counts of each sample will be transformed individually. The options include: “identity”, return the original data without any transformation; “log10”, the transformation is log10(object), and if the data contains zeros the transformation is log10(1 + object); “log10p”, the transformation is log10(1 + object). dada2_ps_genus &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) dada2_ps_transform &lt;- transform_abundances(object = dada2_ps_genus, transform = &quot;log10&quot;) head(dada2_ps_transform@otu_table@.Data, 3) ## S6030 S6032 S6033 S6035 S6036 S6037 S6040 S6043 S6045 S6046 S6048 S6049 S6050 S6054 S6055 S6058 ## g__Acetanaerobacterium 0 0 0 0 0.000000 0.000000 0 0 0.000000 0 0 0.00000 0 0.30103 0 0 ## g__Acidaminococcus 0 0 0 0 2.481443 3.066326 0 0 2.326336 0 0 0.00000 0 0.00000 0 0 ## g__Acinetobacter 0 0 0 0 0.000000 0.000000 0 0 0.000000 0 0 0.69897 0 0.00000 0 0 ## S6059 S6060 S6061 S6063 S6065 S6066 S6068 ## g__Acetanaerobacterium 0 0.00000 0 0.000000 0 0 0 ## g__Acidaminococcus 0 0.60206 0 1.812913 0 0 0 ## g__Acinetobacter 0 0.00000 0 0.000000 0 0 0 transforming metagenomic sequencing metaphlan2_ps_species &lt;- summarize_taxa(ps = metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_transform_mgs &lt;- transform_abundances(object = metaphlan2_ps_species, transform = &quot;log10&quot;) head(metaphlan2_ps_transform_mgs@otu_table@.Data, 3) ## s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 ## s__Abiotrophia_defectiva -4.610834 0 0 0 0 0 0.000000 0.000000 0.000000 0 0 0 0 0 0 0.000000 0 0 0 ## s__Acidaminococcus_fermentans 0.000000 0 0 0 0 0 0.000000 -2.957621 -2.180555 0 0 0 0 0 0 -2.326583 0 0 0 ## s__Acidaminococcus_intestini -5.376751 0 0 0 0 0 -3.222573 -2.997748 0.000000 0 0 0 0 0 0 0.000000 0 0 0 ## s20 s21 s22 ## s__Abiotrophia_defectiva 0 0 0.000000 ## s__Acidaminococcus_fermentans 0 0 -2.616418 ## s__Acidaminococcus_intestini 0 0 -2.831945 5.4 Normalization Normalizing the OTU_table in phyloseq-class object. It is critical to normalize the feature table to eliminate any bias due to differences in the sampling sequencing depth. This function implements 7 widely-used normalization methods for microbial compositional data. rarefy: random subsampling counts to the smallest library size in the data set. Caution: the default library size is 25000 according to our own results(Rarefaction Curves). XMAS2::normalize(object = dada2_ps_genus, method = &quot;rarefy&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] # norm_rarefy(dada2_ps_genus, size = 50000) TSS: total sum scaling, also referred to as “relative abundance”, the abundances were normalized by dividing the corresponding sample library size XMAS2::normalize(object = dada2_ps_genus, method = &quot;TSS&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] TMM: trimmed mean of m-values. First, a sample is chosen as reference. The scaling factor is then derived using a weighted trimmed mean over the differences of the log-transformed gene-count fold-change between the sample and the reference. XMAS2::normalize(object = dada2_ps_genus, method = &quot;TMM&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] RLE: relative log expression, RLE uses a pseudo-reference calculated using the geometric mean of the gene-specific abundances over all samples. The scaling factors are then calculated as the median of the gene counts ratios between the samples and the reference. XMAS2::normalize(object = dada2_ps_genus, method = &quot;RLE&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CSS: cumulative sum scaling, calculates scaling factors as the cumulative sum of gene abundances up to a data-derived threshold. While standard relative abundance (fraction/percentage) normalization re-scales all samples to the same total sum (100%), CSS keeps a variation in total counts between samples. CSS re-scales the samples based on a subset (quartile) of lower abundant taxa (relatively constant and independent), thereby excluding the impact of (study dominating) high abundant taxa. XMAS2::normalize(object = dada2_ps_genus, method = &quot;CSS&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CLR: centered log-ratio normalization. XMAS2::normalize(object = dada2_ps_genus, method = &quot;CLR&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] CPM: pre-sample normalization of the sum of the values to 1e+06. XMAS2::normalize(object = dada2_ps_genus, method = &quot;CPM&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] 5.5 Filtering Whether to filter the low relative abundance or unclassified taxa by the threshold. ps_genus_rb &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;, absolute = FALSE) ps_genus_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] ps_genus_rb_filter &lt;- run_filter(ps = ps_genus_rb, cutoff = 1e-04, unclass = TRUE) ps_genus_rb_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 160 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 160 taxa by 6 taxonomic ranks ] 39 genus’s relative abundance or attributes were below 1e-04 or unclassified and they were removed by the cutoff. 5.6 Trimming The previous function (run_filter) only focuses on the low relative abundance and unclassified taxa. Microbial data always have so many zeros. Trimming samples or taxa in otu_table by occurrences or prevalence before downstream analysis is also crucial. trimming by TaxaID run_trim(object = dada2_ps_genus, cutoff = 0.4, trim = &quot;feature&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 63 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 63 taxa by 6 taxonomic ranks ] Dropping the taxa whose prevalence or occurrences are less than 0.4. trimming by SampleID run_trim(object = dada2_ps_genus, cutoff = 0.4, trim = &quot;sample&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 4 samples ] ## sample_data() Sample Data: [ 4 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] Dropping the samples whose prevalence or occurrences are less than 0.4. trimming by TaxaID &amp; SampleID run_trim(object = dada2_ps_genus, cutoff = 0.4, trim = &quot;both&quot;) ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 63 taxa and 4 samples ] ## sample_data() Sample Data: [ 4 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 63 taxa by 6 taxonomic ranks ] Dropping the taxa and samples whose prevalence are less than 0.4. filtering metagenomic sequencing metaphlan2_ps_trim_mgs &lt;- run_trim(object = metaphlan2_ps_remove_BRS, cutoff = 0.4, trim = &quot;feature&quot;) metaphlan2_ps_trim_mgs ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 102 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 102 taxa by 7 taxonomic ranks ] 5.7 Imputation The missing values in otu table maybe affect the statistical results, imputing the NAs or Zero values should taken into account. limit of detection min(dada2_ps_genus@otu_table) ## [1] 0 LOD_imputed_ps &lt;- run_impute(object = dada2_ps_genus, impute = &quot;LOD&quot;, LOD = 2) min(LOD_imputed_ps@otu_table) ## [1] 2 5.8 Extracting specific taxa phyloseq-class object The taxonomic level are Kingdom, Phylum, Class, Order, Family, Genus, Species and choosing the specific taxa to regenerate the phyloseq-class object. amplicon sequencing: Phylum dada2_ps_phylum &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Phylum&quot;) dada2_ps_phylum ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 10 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 10 taxa by 2 taxonomic ranks ] amplicon sequencing: Order dada2_ps_order &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Order&quot;) dada2_ps_order ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 24 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 24 taxa by 4 taxonomic ranks ] amplicon sequencing: Family dada2_ps_family &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Family&quot;) dada2_ps_family ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 54 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 54 taxa by 5 taxonomic ranks ] amplicon sequencing: Genus dada2_ps_genus &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) dada2_ps_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] extracting metagenomic sequencing metaphlan2_ps_genus &lt;- summarize_taxa(ps = metaphlan2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) metaphlan2_ps_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 109 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 109 taxa by 6 taxonomic ranks ] metaphlan2_ps_species &lt;- summarize_taxa(ps = metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_species ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 325 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 325 taxa by 7 taxonomic ranks ] 5.9 Aggregating low relative abundance or unclassified taxa into others Taxa with relative abundance less than 0.0001 will be summarized into Others_LowAbundance; Unclassified taxa will be summarized into Others_Unclassified. amplicon sequencing # relative abundance dada2_ps_genus_rb &lt;- summarize_taxa(ps = dada2_ps_remove_BRS, taxa_level = &quot;Genus&quot;, absolute = FALSE) dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = ps_genus_rb, cutoff = 1e-04, unclass = TRUE) dada2_ps_genus_LRA ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 162 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 162 taxa by 6 taxonomic ranks ] tail(phyloseq::taxa_names(dada2_ps_genus_LRA)) ## [1] &quot;g__Tyzzerella_3&quot; &quot;g__Tyzzerella_4&quot; &quot;g__UBA1819&quot; &quot;g__UC5_1_2E3&quot; &quot;g__Veillonella&quot; &quot;g__Weissella&quot; # absolute abundance dada2_ps_genus_counts &lt;- summarize_LowAbundance_taxa(ps = dada2_ps_genus, cutoff = 10) dada2_ps_genus_counts ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 173 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 173 taxa by 6 taxonomic ranks ] aggregating metagenomic sequencing metaphlan2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = metaphlan2_ps_genus, cutoff = 1e-04, unclass = TRUE) metaphlan2_ps_genus_LRA ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 78 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 78 taxa by 6 taxonomic ranks ] tail(phyloseq::taxa_names(metaphlan2_ps_genus_LRA)) ## [1] &quot;g__Subdoligranulum&quot; &quot;g__Sutterella&quot; &quot;g__T4likevirus&quot; &quot;g__Turicibacter&quot; &quot;g__Veillonella&quot; &quot;g__Weissella&quot; 5.10 Transform the abundance of taxa whose relative abundance under Limit Of Detection (LOD) into Zeros (only in metaphlan2/3) metaphlan2_ps_Species_LOD &lt;- aggregate_LOD_taxa(ps = metaphlan2_ps, taxa_level = &quot;Species&quot;, cutoff = 1e-04) metaphlan2_ps_Species_LOD ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 192 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 192 taxa by 7 taxonomic ranks ] 5.11 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## nlme 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## permute 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["aplha-diversity.html", "Chapter 6 Aplha diversity 6.1 Loading Packages 6.2 Importing Data 6.3 Equal sample sums 6.4 Non-phylogenetic diversities 6.5 Phylogenetic diversity 6.6 Rank Abundance 6.7 Evenness 6.8 Systematic Information", " Chapter 6 Aplha diversity Alpha diversity is a measure of microbiome diversity applicable to a single sample. The commonly used metrics/indices are Shannon, Chao1, Observed, Simpson, Gini and Inverse Simpson. The reference of this part is (A et al. 2020). It is important to note that, alpha diversity indices are sensitive to noise that is inherent to application of polymerase chain reaction and the sequencing errors. Cautions: Shannon, Simpson and InvSimpson measures are both for relative or absolute abundance. As defined by Shannon, the index of Shannon index is given as follow: \\[H^{&#39;} = \\sum_{i=1}^{S}p_{i}\\,\\ln\\,p_{i}\\] where \\(p_{i}\\) is the proportion of individuals (or relative abundance) of species \\(i\\) in the community and \\(S\\) is the total number of species present so that \\(\\sum_{i=1}^{S}p_{i} = 1\\). Outline of this Chapter: Loading Packages Importing Data Equal sample sums Non-phylogenetic diversities Phylogenetic diversity Rank Abundance 6.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 6.2 Importing Data data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] data(&quot;amplicon_ps&quot;) amplicon_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 3426 taxa and 34 samples ] ## sample_data() Sample Data: [ 34 samples by 8 sample variables ] ## tax_table() Taxonomy Table: [ 3426 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 3426 tips and 3424 internal nodes ] metagenomic sequencing (metaphlan2/3) data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 6.3 Equal sample sums 6.3.1 dada2_ps dataset Summary counts The previous result from Rarefaction Curves had demonstrated that the sequence depth of each sample has a larger significance and normalizing the samples’ depth into equal sampling depth is necessary. summary(sample_sums(dada2_ps_remove_BRS)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 51181 58608 61435 61257 64283 71667 As is evident there is a large difference in the number of reads. Minimum is 51181 and maximum is 71667!! There is a ~1.4X difference. Rarefying counts dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) summary(sample_sums(dada2_ps_rarefy)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 51181 51181 51181 51181 51181 51181 Checking taxa prevalence plot_taxa_prevalence(ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;) Figure 6.1: Taxa prevalence after rarefying 6.3.2 amplicon_ps dataset Preparing for input phyloseq object summary(sample_sums(amplicon_ps)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1114 2139 4965 5357 8438 11449 As is evident there is a large difference in the number of reads. Minimum is 1114 and maximum is 11449!! There is a ~10X difference! amplicon_ps_rarefy &lt;- norm_rarefy(object = amplicon_ps, size = 1114) summary(sample_sums(amplicon_ps)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1114 2139 4965 5357 8438 11449 6.4 Non-phylogenetic diversities 6.4.1 XMAS2 R package Calculation amplicon_ps_rarefy_alpha &lt;- run_alpha_diversity(ps = amplicon_ps_rarefy, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) head(amplicon_ps_rarefy_alpha) ## TempRowNames SampleType Year Month Day Subject ReportedAntibioticUsage DaysSinceExperimentStart Description Observed ## 1 L1S140 gut 2008 10 28 2 Yes 0 2_Fece_10_28_2008 27 ## 2 L1S208 gut 2009 1 20 2 No 84 2_Fece_1_20_2009 40 ## 3 L1S8 gut 2008 10 28 1 Yes 0 1_Fece_10_28_2008 19 ## 4 L1S281 gut 2009 4 14 2 No 168 2_Fece_4_14_2009 60 ## 5 L3S242 right palm 2008 10 28 1 Yes 0 1_R_Palm_10_28_2008 16 ## 6 L2S309 left palm 2009 1 20 2 No 84 2_L_Palm_1_20_2009 12 ## Chao1 se.chao1 Shannon ## 1 74.50 30.70970 3.126005 ## 2 148.75 62.86107 3.303186 ## 3 54.00 25.57190 2.688337 ## 4 256.00 93.42352 3.664947 ## 5 42.00 19.97805 2.692311 ## 6 57.00 30.06061 2.082828 MGS Non-phylogenetic diversities metaphlan2_ps_alpha &lt;- run_alpha_diversity(ps = metaphlan2_ps_remove_BRS, measures = &quot;Shannon&quot;) head(metaphlan2_ps_alpha) ## TempRowNames Group phynotype Shannon ## 1 s1 BB 0.00 2.876002 ## 2 s2 AA 2.50 2.045392 ## 3 s3 BB 0.00 3.441176 ## 4 s4 AA 1.25 2.746917 ## 5 s5 AA 30.00 1.450722 ## 6 s6 AA 15.00 2.619951 Visualization single measure plot_boxplot(data = amplicon_ps_rarefy_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, group_names = NULL, group_color = NULL, do_test = TRUE, ref_group = NULL, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 6.2: Alpha diversity from XMAS(one measure) multiple measures plot_boxplot(data = amplicon_ps_rarefy_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), do_test = TRUE, ref_group = &quot;gut&quot;, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 6.3: Alpha diversity from XMAS(multiple measures) 6.4.2 microbiome R package Calculation amplicon_ps_rarefy_alpha_v2 &lt;- microbiome::alpha(x = amplicon_ps_rarefy, index = &quot;all&quot;) DT::datatable(amplicon_ps_rarefy_alpha_v2) Visualization amplicon_ps_rarefy_metadata &lt;- phyloseq::sample_data(amplicon_ps_rarefy) %&gt;% data.frame() amplicon_ps_rarefy_alpha_v2$SampleID &lt;- rownames(amplicon_ps_rarefy_metadata) amplicon_ps_rarefy_metadata$SampleID &lt;- rownames(amplicon_ps_rarefy_metadata) dat_diversity &lt;- dplyr::inner_join(amplicon_ps_rarefy_metadata, amplicon_ps_rarefy_alpha_v2, by = &quot;SampleID&quot;) dat_diversity_v2 &lt;- dat_diversity[, c(&quot;SampleType&quot;, &quot;diversity_inverse_simpson&quot;, &quot;diversity_gini_simpson&quot;, &quot;diversity_shannon&quot;, &quot;diversity_fisher&quot;, &quot;diversity_coverage&quot;)] colnames(dat_diversity_v2) &lt;- c(&quot;SampleType&quot;, &quot;Inverse Simpson&quot;, &quot;Gini-Simpson&quot;, &quot;Shannon&quot;, &quot;Fisher&quot;, &quot;Coverage&quot;) plotdata &lt;- dat_diversity_v2 %&gt;% tidyr::gather(key = &quot;Variable&quot;, value = &quot;Value&quot;, -SampleType) groups &lt;- unique(dat_diversity_v2$SampleType) cmp_list &lt;- combn(seq_along(groups), 2, simplify = FALSE, FUN = function(x) {groups[x]}) pval_sign &lt;- list( cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1), symbols = c(&quot;****&quot;, &quot;***&quot;, &quot;**&quot;, &quot;*&quot;, &quot;n.s&quot;) ) ggboxplot(plotdata, x = &quot;SampleType&quot;, y = &quot;Value&quot;, fill = &quot;SampleType&quot;, palette = &quot;jco&quot;, legend= &quot;right&quot;, facet.by = &quot;Variable&quot;, scales = &quot;free&quot;)+ rotate_x_text()+ rremove(&quot;x.text&quot;)+ stat_compare_means( comparisons = cmp_list, label = &quot;p.signif&quot;, symnum.args = pval_sign) Figure 6.4: Alpha diversity from microbiome 6.5 Phylogenetic diversity Phylogenetic diversity is calculated using the picante package. Calculation library(picante) amplicon_ps_rarefy_tab &lt;- as.data.frame(amplicon_ps_rarefy@otu_table) amplicon_ps_rarefy_tree &lt;- amplicon_ps_rarefy@phy_tree dat_pd &lt;- pd(t(amplicon_ps_rarefy_tab), amplicon_ps_rarefy_tree, include.root = FALSE) DT::datatable(dat_pd) Visualization amplicon_ps_rarefy_metadata$Phylogenetic_Diversity &lt;- dat_pd$PD ggboxplot(amplicon_ps_rarefy_metadata, x = &quot;SampleType&quot;, y = &quot;Phylogenetic_Diversity&quot;, fill = &quot;SampleType&quot;, palette = &quot;jco&quot;, ylab = &quot;Phylogenetic Diversity&quot;, xlab = &quot;Sample Type&quot;, legend = &quot;right&quot;)+ rotate_x_text()+ stat_compare_means( comparisons = cmp_list, label = &quot;p.signif&quot;, symnum.args = pval_sign) Figure 6.5: Alpha diversity from picante(Phylogenetic diversity) Cautions: There are arguments both for and against the use of rarefying to equal library size. The application of normalization method will depend on the type of research question. It is always good to check if there is a correlation between increasing library sizes and richness. Observed ASVs and Phylogenetic diversity can be affected by library sizes. It is always good to check for this before making a choice. Calculation lib.div &lt;- microbiome::alpha(amplicon_ps, index = &quot;all&quot;) lib.div2 &lt;- microbiome::richness(amplicon_ps) lib.div$ReadsPerSample &lt;- sample_sums(amplicon_ps) lib.div$Observed &lt;- lib.div2$observed colnames(lib.div) ## [1] &quot;observed&quot; &quot;chao1&quot; &quot;diversity_inverse_simpson&quot; &quot;diversity_gini_simpson&quot; ## [5] &quot;diversity_shannon&quot; &quot;diversity_fisher&quot; &quot;diversity_coverage&quot; &quot;evenness_camargo&quot; ## [9] &quot;evenness_pielou&quot; &quot;evenness_simpson&quot; &quot;evenness_evar&quot; &quot;evenness_bulla&quot; ## [13] &quot;dominance_dbp&quot; &quot;dominance_dmn&quot; &quot;dominance_absolute&quot; &quot;dominance_relative&quot; ## [17] &quot;dominance_simpson&quot; &quot;dominance_core_abundance&quot; &quot;dominance_gini&quot; &quot;rarity_log_modulo_skewness&quot; ## [21] &quot;rarity_low_abundance&quot; &quot;rarity_rare_abundance&quot; &quot;ReadsPerSample&quot; &quot;Observed&quot; scatterplot p1 &lt;- ggscatter(lib.div, &quot;diversity_shannon&quot;, &quot;ReadsPerSample&quot;)+ stat_cor(method = &quot;pearson&quot;) p2 &lt;- ggscatter(lib.div, &quot;diversity_inverse_simpson&quot;, &quot;ReadsPerSample&quot;,dd = &quot;loess&quot;)+ stat_cor(method = &quot;pearson&quot;) p3 &lt;- ggscatter(lib.div, &quot;Observed&quot;, &quot;ReadsPerSample&quot;, add = &quot;loess&quot;) + stat_cor( method = &quot;pearson&quot;, label.x = 100, label.y = 50000 ) ggarrange(p1, p2, p3, ncol = 2, nrow = 2) ## `geom_smooth()` using formula = &#39;y ~ x&#39; Figure 6.6: Correlation between increasing library sizes and richness 6.6 Rank Abundance A rank abundance curve is a chart used by ecologists to display relative species abundance, a component of biodiversity. It can also be used to visualize species richness and species evenness. It overcomes the shortcomings of biodiversity indices that cannot display the relative role different variables played in their calculation. The curve is a 2D chart with relative abundance on the Y-axis and the abundance rank on the X-axis. X-axis: The abundance rank. The most abundant species is given rank 1, the second most abundant is 2 and so on. Y-axis: The relative abundance. Usually measured on a log scale, this is a measure of a species abundance (e.g., the number of individuals) relative to the abundance of other species. plot_RankAbundance( ps = dada2_ps_remove_BRS, taxa_level = &quot;Family&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 6.7: Rank Abundance Results: From the horizontal level (Family rank), the higher degree of width means the higher degree of Family richness; From the vertical level (Relative abundance), the slope of the line reflects the Family evenness. 6.7 Evenness pielou: Pielou’s evenness (Pielou, 1966), also known as Shannon or Shannon-Weaver/Wiener/Weiner evenness. \\[Pielou_{evenness} = \\frac{Shannon}{log(Observed)}\\] Calculation amplicon_ps_rarefy_Evenness&lt;- run_alpha_diversity(ps = amplicon_ps_rarefy, measures = &quot;Evenness&quot;) head(amplicon_ps_rarefy_Evenness) ## TempRowNames SampleType Year Month Day Subject ReportedAntibioticUsage DaysSinceExperimentStart Description Evenness ## 1 L1S140 gut 2008 10 28 2 Yes 0 2_Fece_10_28_2008 0.9484708 ## 2 L1S208 gut 2009 1 20 2 No 84 2_Fece_1_20_2009 0.8954443 ## 3 L1S8 gut 2008 10 28 1 Yes 0 1_Fece_10_28_2008 0.9130219 ## 4 L1S281 gut 2009 4 14 2 No 168 2_Fece_4_14_2009 0.8951243 ## 5 L3S242 right palm 2008 10 28 1 Yes 0 1_R_Palm_10_28_2008 0.9710459 ## 6 L2S309 left palm 2009 1 20 2 No 84 2_L_Palm_1_20_2009 0.8381918 visualization plot_boxplot(data = amplicon_ps_rarefy_Evenness, y_index = &quot;Evenness&quot;, group = &quot;SampleType&quot;, group_names = NULL, group_color = NULL, do_test = TRUE, ref_group = NULL, method = &quot;wilcox.test&quot;, outlier = TRUE, group_number = TRUE) Figure 6.8: Evenness 6.8 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["beta-diversity.html", "Chapter 7 Beta diversity 7.1 Loading Packages 7.2 Importing Data 7.3 Phylogenetic beta-diversity metrics 7.4 Distance (Dissimilarity) Coefficients: Bray-Curtis Index 7.5 Checking the homogeneity condition 7.6 Permutational Multivariate Analysis of Variance (PERMANOVA) 7.7 Mantel Test 7.8 Analysis of Similarity (ANOSIM) 7.9 Multi-response permutation procedures (MRPP) 7.10 Ordination 7.11 Systematic Information", " Chapter 7 Beta diversity Beta diversity: Measures for differences between samples from different groups to identify if there are differences in the overall community composition and structure. Here, we not only Check the homogeneity condition, but also perform Permutational Multivariate Analysis of Variance (PERMANOVA) and Ordination including PCA, PCoA and UMAP to explore the significance on microbiota data. Outline of this Chapter: Loading Packages Importing Data Phylogenetic beta-diversity metrics Distance (Dissimilarity) Coefficients: Bray-Curtis Index Checking the homogeneity condition Permutational Multivariate Analysis of Variance (PERMANOVA) Mantel Test Analysis of Similarity (ANOSIM) Multi-response permutation procedures (MRPP) Ordination Principal Component Analysis (PCA) Principal Coordinate Analysis (PCoA) t-distributed stochastic neighbor embedding (t-SNE) Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) 7.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 7.2 Importing Data data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] MGS dataset data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 7.3 Phylogenetic beta-diversity metrics 7.3.1 Unweighted Unifrac Unweighted Unifrac is based on presence/absence of different taxa and abundance is not important. The UniFrac distance, also known as unweighted UniFrac distance, was introduced by Lozupone et al. The goal of the UniFrac distance metric was to enable objective comparison between microbiome samples from different conditions. \\[d^{u} = \\sum^{n}_{i=1}\\frac{b_{i}|I(p_{i}^{A} &gt; 0) - I(p_{i}^{B} &gt; 0)|}{\\sum_{i=1}^{n}b_{i}}\\] where, \\(d^{u}\\) = unweighted UniFrac distance; \\(A\\), \\(B\\) = microbiome community A and B, respectively; \\(n\\) = rooted phylogenetic tree’s branches; \\(b_{i}\\) =length of the branch \\(i\\); \\(p_{i}^{A}\\) and \\(p_{i}^{A}\\) = taxa proportions descending from the branch \\(i\\) for community A and B, respectively. Calculation dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;unifrac&quot;) Visualization plot_distance_corrplot(datMatrix = dada2_beta$BetaDistance) Figure 7.1: Unweighted Unifrac Distance Try repeating the above ordination using filtered phyloseq object (discarding singletons/OTUs with very low reads). 7.3.2 Weighted Unifrac Weighted Unifrac will consider the abundances of different taxa. In 2007, Lozupone et al. added a proportional weighting to the original unweighted method, hence called this new UniFrac measure as weighted UniFrac. The weighted UniFrac distance is defined as: \\[d^{W} = \\frac{\\sum_{i=1}^{n}b_{i}|p_{i}^{A}-p_{i}^{B}|}{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})}\\] where, \\(d^{W}\\) = (normalized) weighted UniFrac distance; \\(A\\), \\(B\\) = microbiome community A and B, respectively; \\(n\\) = rooted phylogenetic tree’s branches; \\(b_{i}\\) = length of the branch \\(i\\). By adding a proportional weighting to UniFrac distance, weighted UniFrac distance reduces the problem of low abundance taxa being represented as a 0 or by a low count depending on sampling depth. Calculation dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;wunifrac&quot;) The result of dispersion test (Pr(&gt;F) &gt; 0.05) showed that the homogeneity condition of two groups were not significant. Visualization plot_distance_corrplot(datMatrix = dada2_beta$BetaDistance) Figure 7.2: Weighted Unifrac Distance 7.3.3 Generalized UniFrac Distance Metrics However, either unweighted or weighted UniFrac distances may not be very powerful in detecting change in moderately abundant lineages (J. Chen et al. 2012) because they assign too much weight either to rare lineages or to most abundant lineages. Thus, Chen et al. proposed the following generalized UniFrac distances to unify weighted UniFrac and unweighted UniFrac distances. The Generalized UniFrac Distance Metrics is defined as: \\[d^{\\alpha} = \\frac{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})^{\\alpha}|\\frac{p_{i}^{A}-p_{i}^{B}}{p_{i}^{A}+p_{i}^{B}}|}{\\sum_{i=1}^{n}b_{i}(p_{i}^{A}+p_{i}^{B})}\\] where, \\(d^{\\alpha}\\) = generalized UniFrac distances; \\(\\alpha\\in [0, 1]\\) is used to controls the contribution from high-abundance branches; Calculation # approach1 dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;GUniFrac&quot;, GUniFrac_alpha = 0.5) # approach2 dada2_otu_tab &lt;- phyloseq::otu_table(dada2_ps_rarefy) dada2_tree &lt;- phyloseq::phy_tree(dada2_ps_rarefy) dada2_unifracs &lt;- run_GUniFrac(otu.tab = dada2_otu_tab, tree = dada2_tree, alpha = c(0, 0.5, 1))$unifracs dada2_dw &lt;- dada2_unifracs[, , &quot;d_1&quot;] # Weighted UniFrac dada2_du &lt;- dada2_unifracs[, , &quot;d_UW&quot;] # Unweighted UniFrac dada2_dv &lt;- dada2_unifracs[, , &quot;d_VAW&quot;] # Variance adjusted weighted UniFrac dada2_d0 &lt;- dada2_unifracs[, , &quot;d_0&quot;] # GUniFrac with alpha 0 dada2_d5 &lt;- dada2_unifracs[, , &quot;d_0.5&quot;] # GUniFrac with alpha 0.5 Visualization: GUniFrac with alpha 0.5 plot_distance_corrplot(datMatrix = dada2_beta$BetaDistance) Figure 7.3: Generalized UniFrac Distance (alpha=0.5) 7.4 Distance (Dissimilarity) Coefficients: Bray-Curtis Index For microbiome abundance data, the measures of distance coefficients are not really distances. They actually measure “dissimilarity”. Measures of dissimilarity include Euclidian distance, Manhattan, and Bray-Curtis measures. Here, we take Bray-Curtis distance as an example. As defined by Bray and Curtis, the index of dissimilarity is given as follow: \\[BC = \\frac{\\sum_{i=1}^{n}|X_{ij}-X_{ik}|}{\\sum_{i=1}^{n}|X_{ij}+X_{ik}|}\\] where, \\(BC\\) Bray-Curtis measure of dissimilarity; \\(X_{ij}\\), \\(X_{ik}\\) Number of individuals in species; \\(i\\) in each \\(sample (j, k)\\); \\(n\\) Total number of species in samples. dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;bray&quot;) plot_distance_corrplot(datMatrix = dada2_beta$BetaDistance) Figure 7.4: Bray Curtis Distance 7.5 Checking the homogeneity condition dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;jsd&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.000486 0.0004856 0.1207 999 0.725 ## Residuals 21 0.084520 0.0040247 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.735 ## BB 0.73178 The result of dispersion test (Pr(&gt;F) &lt; 0.05) showed that the homogeneity condition of two groups were significant. 7.6 Permutational Multivariate Analysis of Variance (PERMANOVA) Permutational Multivariate Analysis of Variance (PERMANOVA) test (Anderson 2014) is to investigate the associations between the environmental factors including discrete or continuous variables (treatments or populations representatives, age, gender etc) and the whole microbial community. run_permanova(ps = dada2_ps_rarefy, method = &quot;bray&quot;, columns = &quot;Group&quot;) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 23 1 0.3126266 0.3126266 1.004313 0.04564163 0.444 0.444 run_permanova(ps = amplicon_ps, method = &quot;bray&quot;) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## TempRowNames 34 33 14.3104868 0.4336511 0.000000 1.00000000 1.000 1.0000000 ## SampleType 34 3 4.6452206 1.5484069 4.806097 0.32460256 0.001 0.0090000 ## Year 34 1 0.5943614 0.5943614 1.386657 0.04153327 0.120 0.3352500 ## Month 34 4 1.5688911 0.3922228 0.892703 0.10963227 0.734 0.9437143 ## Day 34 3 1.2450953 0.4150318 0.952972 0.08700579 0.561 0.9437143 ## Subject 34 1 0.5816949 0.5816949 1.355854 0.04064816 0.149 0.3352500 ## ReportedAntibioticUsage 34 1 0.5943614 0.5943614 1.386657 0.04153327 0.120 0.3352500 ## DaysSinceExperimentStart 34 4 1.5688911 0.3922228 0.892703 0.10963227 0.734 0.9437143 ## Description 34 33 14.3104868 0.4336511 0.000000 1.00000000 1.000 1.0000000 Results: The PERMANOVA result of the SampleType (AdjustedPvalue &lt; 0.05) revealed that different groups of SampleType had the distinct patterns of microbial community. From the previous metadata, SampleType had four groups (gut, right palm, left palm, tongue) which are different body sites. The other continuous variables such as Year, Day and Month didn’t show any significant association with microbial community. We suggest you performing the PERMANOVA test before you do correlation analysis between individual taxa and environmental factors. If the whole microbial community had related to one environmental factor, we could find more associations between individual taxa and environmental factors. Ordination analysis is usually utilized for dimensionality reduction and then we decipher their results by using scatterplot. In fact, we should combine the statistical results, for example PERMANOVA, ANOSIM or others and dimension reduction results to provide stronger evidences to display the association and difference. 7.7 Mantel Test Mantel tests (Mantel 1967) are correlation tests that determine the correlation between two matrices (rather than two variables). When using the test for microbial ecology, the matrices are often distance/dissimilarity matrices with corresponding positions (i.e. samples in the same order in both matrices). A significant Mantel test will tell you that the distances between samples in one matrix are correlated with the distances between samples in the other matrix. Therefore, as the distance between samples increases with respect to one matrix, the distances between the same samples also increases in the other matrix. There are also three distance matrix for mantel test: Species abundance dissimilarity matrix: created using a distance measure, i.e. Bray-curtis dissimilarity. This is the same type of dissimilarity matrix used when conducting an ANOSIM test or when making an NMDS plot; Environmental factors distance matrix: generally created using Euclidean Distance; Geographic distance matrix: the physical distance between sites for z_distance (i.e. Haversine distance). data(&quot;amplicon_ps&quot;) run_MantelTest( ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), z_variables = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;), method_mantel = &quot;mantel.partial&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;, &quot;jaccard&quot;)) ## ## Partial Mantel statistic based on Spearman&#39;s rank correlation rho ## ## Call: ## vegan::mantel.partial(xdis = x_dis, ydis = y_dis, zdis = z_dis, method = method_cor, permutations = 999) ## ## Mantel statistic r: 0.2897 ## Significance: 0.001 ## ## Upper quantiles of permutations (null model): ## 90% 95% 97.5% 99% ## 0.0531 0.0744 0.0901 0.1163 ## Permutation: free ## Number of permutations: 999 Results: From the results, we could see that the y_dis (environmental factors) has a strong relationship with the OTU Bray-Curtis dissimiliarity matrix (Mantel statistic R: 0.3318, p value = 0.001) after adjusting the z_dis matrix. In other words, as samples become more dissimilar in terms of environmental factors, they also become more dissimilar in terms of microbial community composition. Options for Mantel test run_MantelTest( ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), method_mantel = &quot;mantel&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;)) ## ## Mantel statistic based on Spearman&#39;s rank correlation rho ## ## Call: ## vegan::mantel(xdis = x_dis, ydis = y_dis, method = method_cor, permutations = 999) ## ## Mantel statistic r: 0.2661 ## Significance: 0.001 ## ## Upper quantiles of permutations (null model): ## 90% 95% 97.5% 99% ## 0.0619 0.0859 0.1081 0.1304 ## Permutation: free ## Number of permutations: 999 run_MantelTest( ps = amplicon_ps, y_variables = c(&quot;SampleType&quot;, &quot;Subject&quot;, &quot;ReportedAntibioticUsage&quot;, &quot;DaysSinceExperimentStart&quot;, &quot;Description&quot;), method_mantel = &quot;mantel.randtest&quot;, method_cor = &quot;spearman&quot;, method_dist = c(&quot;bray&quot;, &quot;euclidean&quot;)) ## Monte-Carlo test ## Call: ade4::mantel.randtest(m1 = x_dis, m2 = y_dis, nrepet = 999) ## ## Observation: 0.2819519 ## ## Based on 999 replicates ## Simulated p-value: 0.001 ## Alternative hypothesis: greater ## ## Std.Obs Expectation Variance ## 6.558045069 0.001976577 0.001822598 7.8 Analysis of Similarity (ANOSIM) Analysis of Similarity (ANOSIM) is simply a modified version of the Mantel Test based on a standardized rank correlation between two distance matrices. It is a nonparametric procedure for testing the hypothesis of no difference between two or more groups of samples based on permutation test of among-and within-group similarities. The ANOSIM test statistic(R) is based on the difference of mean ranks between groups and within groups. It is given below: \\[R = \\frac{\\bar{r}_{B} - \\bar{r}_{W}}{M/2}\\] where, \\(R\\) test statistic, is an index of relative within-group dissimilarity; \\(M = N(N − 1)/2\\) number of sample pairs; \\(N\\) is the total number of samples (subjects); \\(r_{B}\\) is the mean of the ranked similarity between groups; \\(r_{W}\\) is the mean of the ranked similarity within groups. run_ANOSIM(ps = dada2_ps_rarefy, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Call: ## vegan::anosim(x = dis, grouping = datphe, permutations = 999) ## Dissimilarity: bray ## ## ANOSIM statistic R: -0.03337 ## Significance: 0.63 ## ## Permutation: free ## Number of permutations: 999 The p-value of 0.62 is more than 0.05, which indicates that within-group similarity is not greater or less than between-group similarity at 0.05 significant level. We can conclude that there is no strong evidence that the within-group samples are more different than would be expected by random chance. 7.9 Multi-response permutation procedures (MRPP) Multi-response permutation procedures (MRPP) (Mielke Jr 1991) is a nonparametric procedure for testing the hypothesis of no difference between two or more groups of samples based on permutation test of among-and within-group dissimilarities. run_MRPP(ps = dada2_ps_rarefy, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Call: ## vegan::mrpp(dat = dis, grouping = datphe, permutations = 999) ## ## Dissimilarity index: bray ## Weights for groups: n ## ## Class means and counts: ## ## AA BB ## delta 0.7736 0.785 ## n 9 14 ## ## Chance corrected within-group agreement A: 0.0006646 ## Based on observed delta 0.7805 and expected delta 0.781 ## ## Significance of delta: 0.428 ## Permutation: free ## Number of permutations: 999 The observed and expected deltas are 0.6469 and 0.851, respectively. The significance of delta is 0.001 with the chance corrected within-group agreement A of 0.2399. We conclude that there is statistically significant difference of the four SampleType at the 0.05 of significance level. 7.10 Ordination Ordination is one of the main multivariate methods to reduce the dimensions of taxa–for instance, the whole microbial community often contains too much taxa which makes the microbial profile have too large dimensions. Utilizing ordination to convert the data into two or three dimensions could have more interpretable visualization. Compared to clustering methods, ordination focuses on the dimension reduction and has explanation loss (variation). We also use a distance method to calculate the distance matrix among samples and then do ordination analysis. Here, we give five universal ordination methods. There is no one-fit-all method for all microbiota data, so please pay attention to your own ordination analysis. 7.10.1 Principal Component Analysis (PCA) Principal Component Analysis (PCA) uses a linear combination algorithm to obtain the principal components (PC) (the number of PCs according to the samples). The results have been effected by the normalization methods because different count numbers would affect the PCs. We recommend you using filtering or normalization before performing PCA. 7.10.1.1 Preprocessing phyloseq object data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others # dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = dada2_ps_rare_genus, # cutoff = 10, # unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(ps = dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(object = dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] 7.10.1.2 Running PCA ordination_PCA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCA&quot;) names(ordination_PCA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; &quot;axis_taxa_cor&quot; The object of run_ordination is comprising of several results which could be used for visualization. fit: the result of PCA functions from stats::prcomp; dat: the combination of PCs score and metadata group information; explains: the 1st and 2nd PCs’ explains; eigvalue: the eigvalues of all the PCs; PERMANOVA: the result of PERMANOVA between the whole microbial community and group; axis_taxa_cor: inherit from the XVIZ package for visualization (only for PCoA analysis). 7.10.1.3 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;) Figure 7.5: Principal Component Analysis (PCA): Ordinary pattern Results: Scatterplot showed the distribution of samples in the two groups; PERMANOVA results revealed that there was no association between the groups and the genus microbial community; Sidelinechart showed the top 3 taxa related to PCA1 and PCA2. plot with SampleID and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), sample = TRUE) Figure 7.6: Principal Component Analysis (PCA): Ordinary pattern with SampleID biplot with topN dominant taxa plot_ggbiplot(ResultList = ordination_PCA, group = &quot;Group&quot;, group_color = c(&quot;blue&quot;, &quot;red&quot;), topN = 5, ellipse = TRUE, labels = &quot;SampleID&quot;) Figure 7.7: Principal Component Analysis (PCA): biplot biplot not only shows the distribution of samples, but also displays correlation among the dominant taxa. We chose top 5 dominant taxa. The length of vector approximates standard deviation of variables (bacteria); the angles between variables (bacteria in this case) reflect their correlations: the cosine of angle approximates correlation between variables (bacteria). 7.10.2 Principal Coordinate Analysis (PCoA) Principal Coordinate Analysis (PCoA) could use different distance measures (e.g., Jaccard, Bray-Curtis, Euclidean, etc.) as input for ordination, but pay attention to the data matrix with negative values (not suitable for Bray-Curtis distance). As PCA, PCoA uses eigenvalues to measure the importance of a set of returned orthogonal axes. The dimensionality of matrix is reduced by determining each eigenvector and eigenvalue. The principal coordinates are obtained by scaling each eigenvector. 7.10.2.1 Running PCoA Different distance measures could be affected by different factors (eg, low abundance taxa for Bary Curtis distance), so we recommend users taking care for whether performing the preprocess before calculating the distance. Here, we coincided to the tactics of the PCA analysis. ordination_PCoA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCoA&quot;) names(ordination_PCoA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; &quot;axis_taxa_cor&quot; 7.10.2.2 Visualization plot_Ordination(ResultList = ordination_PCoA, group = &quot;Group&quot;) Figure 7.8: Principal Coordinate Analysis (PCoA) 7.10.3 t-distributed stochastic neighbor embedding (t-SNE) t-distributed stochastic neighbor embedding (t-SNE) is a statistical method for visualizing high-dimensional data by giving each datapoint a location in a two or three-dimensional map. It is based on Stochastic Neighbor Embedding originally developed by Sam Roweis and Geoffrey Hinton, where Laurens van der Maaten proposed the t-distributed variant. It is a nonlinear dimensionality reduction technique well-suited for embedding high-dimensional data for visualization in a low-dimensional space of two or three dimensions. Specifically, it models each high-dimensional object by a two- or three-dimensional point in such a way that similar objects are modeled by nearby points and dissimilar objects are modeled by distant points with high probability. 7.10.3.1 Running tSNE Perplexity parameter is for how many neighbors to be chosen. ordination_tSNE &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;tSNE&quot;, para =list(Perplexity=2)) names(ordination_tSNE) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; &quot;axis_taxa_cor&quot; 7.10.3.2 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_tSNE, group = &quot;Group&quot;) Figure 7.9: t-distributed stochastic neighbor embedding (t-SNE): Ordinary pattern 7.10.4 Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) Uniform Manifold Approximation and Projection (UMAP) (McInnes et al. 2022) is a dimension reduction technique that can be used for visualisation similarly to t-SNE, but also for general non-linear dimension reduction. The algorithm is founded on three assumptions about the data. 7.10.4.1 Running UMAP ordination_UMAP &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;UMAP&quot;) names(ordination_UMAP) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; &quot;axis_taxa_cor&quot; 7.10.4.2 Visualization plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. plot_Ordination(ResultList = ordination_UMAP, group = &quot;Group&quot;) Figure 7.10: Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP): Ordinary pattern 7.11 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["microbial-composition.html", "Chapter 8 Microbial Composition 8.1 Loading Packages 8.2 Importing Data 8.3 plot_stacked_bar from XVIZ 8.4 plot_StackBarPlot from XAMS2 8.5 Heatmaps 8.6 Systematic Information", " Chapter 8 Microbial Composition We use stacked barplot to show the differences of microbial composition among samples or groups. You can choose the specific taxonomic level to visualize the whole microbial composition. Outline of this Chapter: Loading Packages Importing Data plot_stacked_bar from XVIZ plot_StackBarPlot from XAMS2 Heatmaps 8.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 8.2 Importing Data data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] data(&quot;amplicon_ps&quot;) MGS dataset data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 8.3 plot_stacked_bar from XVIZ plot_stacked_bar_XIVZ from XVIZ. plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Phylum&quot;) Figure 8.1: Stacked barplot XVIZ 8.4 plot_StackBarPlot from XAMS2 plot_StackBarPlot provides too many parameters for users to display the Stacked barplot of microbial composition by using ggplot2 format. Here is the ordinary pattern. More details to see help(plot_StackBarPlot). plot_StackBarPlot(ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;) Figure 8.2: Stacked barplot Ordinary pattern Please open the below buttons, if you want to see other options for stacked barplot. genus level in stacked barplot dada2_ps_rarefy_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) otu_tab &lt;- phyloseq::otu_table(dada2_ps_rarefy_genus) sam_tab &lt;- phyloseq::sample_data(dada2_ps_rarefy_genus) plot_StackBarPlot( data_otu = otu_tab, data_sam = sam_tab, cutoff = 0.01, taxa_level = &quot;Genus&quot;) Figure 8.3: Stacked barplot otu_tab and sample_table as input Metadata with Group phenotype plot_StackBarPlot( ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;) ## [1] &quot;This palatte have 20 colors!&quot; Figure 8.4: Stacked barplot Metadata with group Metadata with Group phenotype in cluster mode plot_StackBarPlot( ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) ## [1] &quot;This palatte have 20 colors!&quot; Figure 8.5: Stacked barplot Metadata with group in cluster mode Metadata with Group phenotype in facet plot_StackBarPlot( ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;, facet = TRUE) Figure 8.6: Stacked barplot Metadata with group in facet hiding sample_label plot_StackBarPlot( ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;, facet = TRUE, sample_label = FALSE) Figure 8.7: Stacked barplot by hiding samples’ names two annotations for column plot_StackBarPlot( ps = amplicon_ps, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, subgroup = &quot;Year&quot;) ## [1] &quot;This palatte have 19 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Figure 8.8: Stacked barplot Metadata with two annotation three annotations for column plot_StackBarPlot( ps = amplicon_ps, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, subgroup = c(&quot;Year&quot;, &quot;Month&quot;)) ## [1] &quot;This palatte have 19 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Figure 8.9: Stacked barplot Metadata with three annotation OrderSampleID plot_StackBarPlot( ps = amplicon_ps, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, orderSample = phyloseq::sample_names(amplicon_ps)[1:10]) ## [1] &quot;This palatte have 20 colors!&quot; Figure 8.10: Stacked barplot Metadata with OrderSampleID 8.5 Heatmaps plot_taxa_heatmap(ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, cutoff = 1e-4, colors = c(&quot;black&quot;, &quot;yellow&quot;)) Figure 8.11: Heatmaps 8.6 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["core-microbiota.html", "Chapter 9 Core microbiota 9.1 Loading Packages 9.2 Importing Data 9.3 Obtaining core microbiota 9.4 Showing core abundance and diversity 9.5 Visualizing core taxa 9.6 Systematic Information", " Chapter 9 Core microbiota These functions in this chapter are from (Leo Lahti 2018) package. The core microbiota are passed the parameters’ cutoff (eg. prevalence, abundance). Core microbiota, playing an important role on the interaction between host and environment is the dominant taxa in the community. Here, we identify them by using prevalence across samples and the limit of detection of abundance. Outline of this Chapter: Loading Packages Importing Data Obtaining core microbiota Showing core abundance and diversity Visualizing core taxa 9.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 9.2 Importing Data Removing BRS Rarefying counts Extracting genus level phyloseq data(&quot;dada2_ps&quot;) dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) # Rarefying counts dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) # Genus level dada2_ps_rarefy_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) MGS dataset data(&quot;metaphlan2_ps&quot;) metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 326 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 326 taxa by 7 taxonomic ranks ] 9.3 Obtaining core microbiota Normalization: See the Chapter 6 Pre-processing dada2_ps_rarefy_genus_rb &lt;- XMAS2::normalize(object = dada2_ps_rarefy_genus, method = &quot;TSS&quot;) dada2_ps_rarefy_genus_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] Check for the core ASVs Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(dada2_ps_rarefy_genus_rb, detection = 0.01, prevalence = 0.8) print(core_taxa_name) ## [1] &quot;g__Bifidobacterium&quot; &quot;g__Blautia&quot; &quot;g__Lachnospiraceae_unclassified&quot; Result: Only three genera (g__Bifidobacterium, g__Blautia and g__Lachnospiraceae_unclassified) passed the threshold of detection and prevalence which we choose. 9.4 Showing core abundance and diversity Total core abundance in each sample (sum of abundances of the core members): core_abundance &lt;- sample_sums(phyloseq_core_taxa(dada2_ps_rarefy_genus_rb, detection = 0.01, prevalence = 0.8)) DT::datatable(data.frame(core_abundance)) 9.5 Visualizing core taxa We display the taxa based on the prevalence and detection via two ways (heatmap or linechart plot). 9.5.1 heatmap Core with composition prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;heatmap&quot;, colours = gray(seq(0, 1, length=5)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) pl_core Figure 9.1: Core with composition in Heatmap The degree of color indicates the size of abundance and prevalence. other colors: viridis library(viridis) print(pl_core + scale_fill_viridis()) Figure 9.2: Core with composition in Heatmap (viridis) change color library(RColorBrewer) prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;heatmap&quot;, colours = rev(brewer.pal(5, &quot;Spectral&quot;)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) pl_core Figure 9.3: Core with composition in Heatmap (RColorBrewer) 9.5.2 linechart This plot show the relationship between Detection and Prevalence in a linear model. prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rarefy_genus_rb, plot.type = &quot;lineplot&quot;, prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) pl_core Figure 9.4: Core with composition in linechart When increasing the Detection, the core size turns to low level. 9.6 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## magrittr 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## usethis 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## viridis * 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite * 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["differential-analysis.html", "Chapter 10 Differential Analysis 10.1 Loading Packages 10.2 Importing Data 10.3 Amplicon sequencing microbial data (16s) 10.4 Metagenomic sequencing microbial data (metaphlan2/3) 10.5 Visualization 10.6 Dominant taxa 10.7 Multiple differential analysis by one function 10.8 Comparing outputs from XMAS2, lefse-conda, and lefse-galaxy using the same in-house datasets (amplicon_ps|Zeybel_Gut) 10.9 Systematic Information", " Chapter 10 Differential Analysis Identifying the significant taxa between case and control group is necessary. There are too many differential analysis (DA) approaches to choose (Nearing et al. 2022), we provide some of them which focusing on microbial data, including: Table 10.1: Differential analysis tools in XMAS. Tool.version. Input Normalization Transformation Distribution MicrobialData ALDEx2 (1.26.0) Counts None CLR Dirichlet-multinormial 16s limma voom (3.50.1) Counts/Relative None/TMM Log; Precision weighting Normal 16s/MGS mbzinb (0.2) Counts RLE None Zero-inflated negative binomial 16s omnibus (0.2) Counts GMPR(Geometric Mean of Pairwise Ratios) None Zero-inflated negative binomial 16s RAIDA (1.0) Counts None zero-inflated Log Modified t-test 16s Wilcox(rare/CLR) Counts/Relative None None/CLR Non-parametric 16s/MGS LEfSe Rarefied Counts/Relative TSS None Non-parametric 16s/MGS t-test (rare) Counts/Relative None None Normal 16s/MGS metagenomeSeq (1.36.0) Counts CSS Log Zero-inflated (log) Normal 16s DESeq2 (1.34.0) Counts RLE None Negative binomial 16s edgeR (3.36.0) Counts RLE/TMM None Negative binomial 16s ANCOM-II (2.1) Counts/Relative None ALR Non-parametric 16s/MGS Corncob (0.2.0) Counts None None Beta-binomial 16s MaAslin2 (1.8.0) Counts/Relative None/TSS AST Normal 16s/MGS Outline of this Chapter: Loading Packages Importing Data Amplicon sequencing microbial data (16s) Metagenomic sequencing microbial data (metaphlan2/3) Visualization Dominant taxa Multiple differential analysis by one function Comparing outputs from XMAS2, lefse-conda, and lefse-galaxy using the same in-house datasets (amplicon_ps|Zeybel_Gut) 10.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 10.2 Importing Data 10.2.1 16s data data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others # dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = dada2_ps_rare_genus, # cutoff = 10, # unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(ps = dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(object = dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] 10.2.2 Metagenomic data data(&quot;metaphlan2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) # step2: Extracting specific taxa phyloseq-class object metaphlan2_ps_genus &lt;- summarize_taxa(ps = metaphlan2_ps_remove_BRS, taxa_level = &quot;Genus&quot;) # step3: Aggregating low relative abundance or unclassified taxa into others # dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = dada2_ps_genus, # cutoff = 10, # unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold metaphlan2_ps_genus_filter &lt;- run_filter(ps = metaphlan2_ps_genus, cutoff = 1e-4, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold metaphlan2_ps_genus_filter_trim &lt;- run_trim(object = metaphlan2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) metaphlan2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 54 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 54 taxa by 6 taxonomic ranks ] 10.3 Amplicon sequencing microbial data (16s) 10.3.1 ALDEx2 ALDEx2 package is from Unifying the analysis of high-throughput sequencing datasets: characterizing RNA-seq, 16S rRNA gene sequencing and selective growth experiments by compositional data analysis (Fernandes et al. 2014), and its principle is using log-ratio transformation and statistical testing to find the significant Taxa. (Caution: the otu_table must be integers). run_aldex provides 11 parameters. For instance, norm and transform are used to normalization and transformation input data. More details to see help(run_aldex). DA_ALDEx2 &lt;- run_aldex( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; &quot;Median CLR\\nBB&quot; ## [10] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [16] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_ALDEx2) ## TaxaID Block Enrichment EffectSize Pvalue AdjustedPvalue Median CLR \\n(All) Median CLR\\nAA Median CLR\\nBB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.03216861 0.6548749 0.9018534 -3.4244631 -3.555905 -3.3102684 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.09330854 0.6658567 0.9138848 2.7645196 2.167638 3.1218379 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.30832148 0.3184500 0.7716171 -0.7734251 -2.223805 0.3041529 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif -0.08089118 0.6408318 0.9042170 5.4463483 6.081374 5.3302183 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif -0.15579201 0.5972170 0.8723074 -2.9580004 -2.541838 -3.2004909 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif -0.09579649 0.6356202 0.9052481 3.7226931 4.768802 3.4586946 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB ## 1 NA 0 0 0.0 ## 2 -0.9577718 30 26 50.5 ## 3 NA 0 0 9.0 ## 4 0.1524904 316 329 296.0 ## 5 NA 0 0 0.0 ## 6 -0.1085245 64 64 69.0 ## Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 1.7051442 58.82609 101.777778 31.21429 21.74 ## 2 -1.3107676 50.91304 26.777778 66.42857 82.61 ## 3 -2.4683647 19.21739 5.111111 28.28571 43.48 ## 4 1.7488297 996.26087 1740.444444 517.85714 65.22 ## 5 -2.1676332 93.78261 30.000000 134.78571 21.74 ## 6 0.2000385 163.86957 177.888889 154.85714 73.91 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 21.43 0.67 (-0.11;1.5) ## 2 88.89 78.57 4.1 (6.8;1.3) ## 3 33.33 50.00 8.6 (13;4.3) ## 4 55.56 71.43 0.39 (-1.4;2.2) ## 5 22.22 21.43 1.5 (2.3;0.71) ## 6 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by ALDEx2; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by ALDEx2; Median CLR (All)/(group AA)/(group BB): Median CLR (normalization by ALDEx2) in all, group AA and group BB, respectively; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in ALDEx2. run_da() pattern We also provide another function run_da to run ALDEx2 differential analysis. DA_ALDEx2 &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;aldex&quot;, method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; &quot;Median CLR\\nBB&quot; ## [10] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [16] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; otu_table or sample_table as inputdata We also provide data_otu and data_sam as input data to run run_aldex. DA_ALDEx2 &lt;- run_aldex( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; &quot;Median CLR\\nBB&quot; ## [10] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [16] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; taxa_level option We also provide taxa_level for choosing the specific taxonomic level to run run_aldex. DA_ALDEx2 &lt;- run_aldex( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;t.test&quot;) ## |------------(25%)----------(50%)----------(75%)----------| colnames(DA_ALDEx2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;Median CLR \\n(All)&quot; &quot;Median CLR\\nAA&quot; &quot;Median CLR\\nBB&quot; ## [10] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [13] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [16] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [19] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; 10.3.2 limma_voom limma package is from voom: Precision weights unlock linear model analysis tools for RNA-seq read counts (Law et al. 2014). Firstly, transforming count data to log2-counts per million (logCPM), estimate the mean-variance relationship and use this to compute appropriate observation-level weights. Secondly, fitting multiple linear models by weighted or generalized least squares. Finally, performing empirical bayes statistics for differential expression. run_limma_voom provides 11 parameters. For instance, norm and transform are used to normalization and transformation input data. More details to see help(run_limma_voom). DA_limma_voom &lt;- run_limma_voom( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_limma_voom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;logFC&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_limma_voom) ## TaxaID Block Enrichment EffectSize logFC Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.09424356 0.09424356 0.9451632 0.9895209 NA ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.42751966 0.42751966 0.7781674 0.9489846 -0.9577718 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 1.76792390 1.76792390 0.1726319 0.7804151 NA ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.27153770 0.27153770 0.8944583 0.9722372 0.1524904 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif -0.24224151 -0.24224151 0.8457202 0.9610457 NA ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif -0.41145677 -0.41145677 0.8141009 0.9491533 -0.1085245 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0 0 0.0 1.7051442 58.82609 ## 2 30 26 50.5 -1.3107676 50.91304 ## 3 0 0 9.0 -2.4683647 19.21739 ## 4 316 329 296.0 1.7488297 996.26087 ## 5 0 0 0.0 -2.1676332 93.78261 ## 6 64 64 69.0 0.2000385 163.86957 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 101.777778 31.21429 21.74 22.22 21.43 0.67 (-0.11;1.5) ## 2 26.777778 66.42857 82.61 88.89 78.57 4.1 (6.8;1.3) ## 3 5.111111 28.28571 43.48 33.33 50.00 8.6 (13;4.3) ## 4 1740.444444 517.85714 65.22 55.56 71.43 0.39 (-1.4;2.2) ## 5 30.000000 134.78571 21.74 22.22 21.43 1.5 (2.3;0.71) ## 6 177.888889 154.85714 73.91 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by limma; logFC: LogFC from groups’ coefficient by limma; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by limma; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in limma. other options for limma-voom if(0) { DA_limma_voom &lt;- run_limma_voom( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_limma_voom &lt;- run_limma_voom( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_limma_voom &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(DA_limma_voom) } 10.3.3 mbzinb mbzinb package is from An omnibus test for differential distribution analysis of microbiome sequencing data (J. Chen et al. 2018). It uses zeroinflated negative binomial model to investigate the significant taxa. (Caution: the otu_table must be integers). DA_mbzinb &lt;- run_mbzinb( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_mbzinb) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; &quot;EffectSize&quot; ## [7] &quot;base.mean&quot; &quot;mean.LFC&quot; &quot;base.abund&quot; ## [10] &quot;abund.LFC&quot; &quot;base.prev&quot; &quot;prev.change&quot; ## [13] &quot;base.disp&quot; &quot;disp.LFC&quot; &quot;statistic&quot; ## [16] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [19] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [22] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [25] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_mbzinb) ## TaxaID Block Enrichment Pvalue AdjustedPvalue EffectSize base.mean mean.LFC ## 1 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.032781937 0.2341567 23.1746032 4.161223 2.6824340 ## 2 g__Butyricicoccus 9_AA vs 14_BB Nonsignif 0.019009756 0.1564333 61.0000000 231.439059 -0.1466880 ## 3 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB Nonsignif 0.007406534 0.1564333 399.5714286 10.618571 4.5552518 ## 4 g__Enterococcus 9_AA vs 14_BB Nonsignif 0.020336331 0.1564333 60.7460317 32.658840 1.5654364 ## 5 g__Faecalibacterium 9_AA vs 14_BB Nonsignif 0.068916032 0.3828668 2742.6031746 3229.238369 -1.1278995 ## 6 g__Gordonibacter 9_AA vs 14_BB Nonsignif 0.017121597 0.1564333 0.3888889 7.074759 0.1774837 ## base.abund abund.LFC base.prev prev.change base.disp disp.LFC statistic Log2FoldChange (Median)\\nAA_vs_BB ## 1 12.483819 2.0941415 0.3333293 0.16782006 0.05915642 3.206884 8.751636 NA ## 2 297.532163 0.1283709 0.7778623 -0.13502400 0.04079382 3.619904 9.948415 2.174498 ## 3 46.181531 2.4345380 0.2299311 0.77006016 1.20536377 1.475574 11.993187 NA ## 4 97.952015 0.4498616 0.3334167 0.38903504 0.04624961 4.624979 9.800932 NA ## 5 4844.268667 -1.2274983 0.6666101 0.04764622 0.22640364 1.505613 7.095478 2.400169 ## 6 9.837094 0.9244114 0.7191920 -0.29064622 0.96279691 -5.167700 10.176792 NA ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0 0 9.0 -2.46836474 19.217391 ## 2 282 316 70.0 0.36332246 236.869565 ## 3 11 0 39.5 -4.88463779 257.217391 ## 4 36 0 51.5 -1.42341563 73.086957 ## 5 1373 4537 859.5 1.43691832 2679.478261 ## 6 2 2 0.0 -0.06030051 9.347826 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 5.111111 28.28571 43.48 33.33 50.00 8.6 (13;4.3) ## 2 274.000000 213.00000 69.57 77.78 64.29 0.76 (0.2;1.3) ## 3 14.000000 413.57143 60.87 22.22 85.71 11000 (11000;11000) ## 4 36.111111 96.85714 56.52 33.33 71.43 1.9 (3.2;0.64) ## 5 4348.888889 1606.28571 69.57 66.67 71.43 0.37 (-1.6;2.3) ## 6 9.111111 9.50000 52.17 66.67 42.86 1.1 (1.2;0.93) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by mbzinb; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by mbzinb; base.mean: fitted mean abundance parameter times the fitted prevalence in baseline group; mean.LFC: log2-fold change in fitted mean between other group and baseline; base.abund: fitted mean abundance parameter in baseline group; abund.LFC: log2-fold change in fitted mean abundance parameter between other group and baseline; base.prev: fitted prevalence in baseline group; prev.change: (linear) difference in prevalence between baseline group and other group (other-baseline); base.disp: fitted dispersion parameter in baseline group; disp.LFC: log2-fold change in fitted dispersion parameter between other group and baseline; statistic: value of likelihood ratio test statistic; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in mbzinb. other options for mbzinb if(0) { DA_mbzinb &lt;- run_mbzinb( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_mbzinb &lt;- run_mbzinb( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_mbzinb &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(DA_mbzinb) } 10.3.4 omnibus This approach is also from mbzinb (J. Chen et al. 2018) package. it uses GMPR (Geometric Mean of Pairwise Ratios) (L. Chen et al. 2018) to get the size factors. where we specify models for count (abundance), zero (prevalence) and dispersion part. We also provide likelihood ratio test (zinb.lrt) for different models. (Caution: the otu_table must be integers). DA_omnibus &lt;- run_omnibus( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) ## Start GMPR normalization ... ## Start Winsorization ... ## Perform filtering ... ## --A total of 92 taxa will be tested with a sample size of 23 ! ## --Omnibus test is selected! ## --Dispersion is treated as a parameter of interest! ## Start testing ... ## 10 % ## 20 % ## 30 % ## 40 % ## 50 % ## 60 % ## 70 % ## 80 % ## 90 % ## 100%! ## Handle failed taxa using permutation test! ## Permutation test .... ## Completed! colnames(DA_omnibus) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; &quot;EffectSize&quot; ## [7] &quot;chi.stat&quot; &quot;df&quot; &quot;abund.baseline&quot; ## [10] &quot;prev.baseline&quot; &quot;dispersion.baseline&quot; &quot;abund.LFC.CompvarBB.est&quot; ## [13] &quot;abund.LFC.CompvarBB.se&quot; &quot;prev.LOD.CompvarBB.est&quot; &quot;prev.LOD.CompvarBB.se&quot; ## [16] &quot;dispersion.LFC.CompvarBB.est&quot; &quot;dispersion.LFC.CompvarBB.se&quot; &quot;method&quot; ## [19] &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; ## [22] &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; ## [25] &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [28] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_omnibus) ## TaxaID Block Enrichment Pvalue AdjustedPvalue EffectSize chi.stat df abund.baseline prev.baseline ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.26476211 0.6245670 70.56349 3.9696315 3 0.0050842054 0.2910300 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.13905545 0.4437791 39.65079 5.4930407 3 0.0006912502 0.8894593 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.06293962 0.3795000 23.17460 7.2995223 3 0.0003647798 0.3333734 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.12024562 0.4437791 1222.58730 5.8287526 3 0.0553800205 0.5555645 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 0.86344681 0.9142217 104.78571 0.7413110 3 0.0031212219 0.2357130 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 0.97967175 0.9796718 23.03175 0.1869261 3 0.0049314397 0.7815505 ## dispersion.baseline abund.LFC.CompvarBB.est abund.LFC.CompvarBB.se prev.LOD.CompvarBB.est prev.LOD.CompvarBB.se ## 1 0.2041100 -0.36978708 1.4040484 -0.4088983 0.9811747 ## 2 3.1647486 0.73754098 0.3062639 -0.7727912 1.2480678 ## 3 11.0696374 1.29262130 0.3614490 0.6959681 0.8863794 ## 4 1.6324698 -1.15572656 0.4756819 0.6968830 0.8947568 ## 5 0.5149302 -0.83042868 1.7432216 2.3976744 1.0114415 ## 6 1.0012623 0.03215791 0.4770876 -0.3541131 1.0007538 ## dispersion.LFC.CompvarBB.est dispersion.LFC.CompvarBB.se method Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 2.8343543 1.1361534 omnibus NA 0 ## 2 -0.5318657 0.6766040 omnibus -0.9577718 30 ## 3 -1.7738398 1.4812754 omnibus NA 0 ## 4 -0.5257607 0.7011677 omnibus 0.1524904 316 ## 5 -2.4675480 1.0580187 omnibus NA 0 ## 6 0.1662740 0.6265328 omnibus -0.1085245 64 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA ## 1 0 0.0 1.7051442 58.82609 101.777778 ## 2 26 50.5 -1.3107676 50.91304 26.777778 ## 3 0 9.0 -2.4683647 19.21739 5.111111 ## 4 329 296.0 1.7488297 996.26087 1740.444444 ## 5 0 0.0 -2.1676332 93.78261 30.000000 ## 6 64 69.0 0.2000385 163.86957 177.888889 ## Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 31.21429 21.74 22.22 21.43 0.67 (-0.11;1.5) ## 2 66.42857 82.61 88.89 78.57 4.1 (6.8;1.3) ## 3 28.28571 43.48 33.33 50.00 8.6 (13;4.3) ## 4 517.85714 65.22 55.56 71.43 0.39 (-1.4;2.2) ## 5 134.78571 21.74 22.22 21.43 1.5 (2.3;0.71) ## 6 154.85714 73.91 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by omnibus; chi.stat: chisquare statistics; df: degree freedom; abund.baseline: mean abundance in baseline group; prev.baseline: prevalence in baseline group; dispersion.baseline: dispersion in baseline group; abund.LFC.CompvarBB.est: log2-fold change in abundance between group BB and other group; abund.LFC.CompvarBB.se: log2-fold change of standard errors in abundance between group BB and other group; prev.LOD.CompvarBB.est: prevalence of low of detect value in group BB; prev.LOD.CompvarBB.se: prevalence’s standard errors of low of detect value in group BB; dispersion.LFC.CompvarBB.est: log2-fold change in dispersion in group BB; dispersion.LFC.CompvarBB.se: log2-fold change in dispersion’s standard errors in group BB; method: methods of test; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in omnibus. other options for omnibus if(0) { DA_omnibus &lt;- run_omnibus( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) DA_omnibus &lt;- run_omnibus( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;omnibus&quot;) DA_omnibus &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;omnibus&quot;, method = &quot;omnibus&quot;) head(DA_omnibus) } 10.3.5 RAIDA RAIDA package is from A robust approach for identifying differentially abundant features in metagenomic samples (Sohn, Du, and An 2015). It uses Ratio Approach for Identifying Differential Abundance (RAIDA). (Caution: the otu_table must be integers). DA_RAIDA &lt;- run_raida( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_RAIDA) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;eta_AA&quot; &quot;mean_AA&quot; &quot;sd_AA&quot; ## [10] &quot;eta_BB&quot; &quot;mean_BB&quot; &quot;sd_BB&quot; ## [13] &quot;mod.pool.var&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [16] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [19] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [22] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [25] &quot;Odds Ratio (95% CI)&quot; head(DA_RAIDA) ## TaxaID Block Enrichment EffectSize Pvalue AdjustedPvalue eta_AA mean_AA sd_AA eta_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 70.563492 0.3816518 0.7379802 0.7777778 -1.1787353 3.4581703 0.7857143 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 39.650794 0.3655566 0.7379802 0.1111111 -3.5858713 1.3594755 0.2142857 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 23.174603 0.1074479 0.7353741 0.6666667 -4.4427957 0.8570999 0.5000000 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 1222.587302 0.1143915 0.7353741 0.4444444 0.1696923 1.1949839 0.2857143 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 104.785714 0.6418257 0.8494752 0.7777778 -3.7046260 2.3018074 0.7857143 ## 6 g__Allisonella 9_AA vs 14_BB Nonsignif 3.603175 0.8515585 0.9461761 0.7777778 -3.0106395 0.5628666 0.7142857 ## mean_BB sd_BB mod.pool.var Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA ## 1 -2.5738907 1.3069089 2.756248 NA 0 0 ## 2 -2.9198320 1.8200871 2.410794 -0.9577718 30 26 ## 3 -3.0988711 1.0974531 1.280317 NA 0 0 ## 4 -0.8127871 0.9057351 1.174178 0.1524904 316 329 ## 5 -4.4749687 2.5368159 3.071523 NA 0 0 ## 6 -2.8074387 1.3346198 1.491825 NA 0 0 ## Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB ## 1 0.0 1.7051442 58.82609 101.777778 31.21429 ## 2 50.5 -1.3107676 50.91304 26.777778 66.42857 ## 3 9.0 -2.4683647 19.21739 5.111111 28.28571 ## 4 296.0 1.7488297 996.26087 1740.444444 517.85714 ## 5 0.0 -2.1676332 93.78261 30.000000 134.78571 ## 6 0.0 -0.4052144 13.30435 11.111111 14.71429 ## Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 21.74 22.22 21.43 0.67 (-0.11;1.5) ## 2 82.61 88.89 78.57 4.1 (6.8;1.3) ## 3 43.48 33.33 50.00 8.6 (13;4.3) ## 4 65.22 55.56 71.43 0.39 (-1.4;2.2) ## 5 21.74 22.22 21.43 1.5 (2.3;0.71) ## 6 26.09 22.22 28.57 1.1 (1.4;0.89) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue by RAIDA; eta_AA: vector containing estimated probabilities of the false zero state for group AA; mean_AA: vector containing estimated means of log ratios for group AA; sd_AA: vector containing estimated standard deviations of log ratios for group AA; eta_BB: vector containing estimated probabilities of the false zero state for group BB; mean_BB: vector containing estimated means of log ratios for group BB; sd_BB: vector containing estimated standard deviations of log ratios for group BB; mod.pool.var: vector containing estimated posterior variances of log ratios; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. Please open the below buttons, if you want to see other options for differential analysis in RAIDA. other options for RAIDA if (0) { DA_RAIDA &lt;- run_raida( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_RAIDA &lt;- run_raida( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_RAIDA &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;raida&quot;) head(DA_RAIDA) } 10.3.6 Wilcoxon Rank Sum and Signed Rank Tests Wilcoxon Rank Sum and Signed Rank Tests, which are nonparametric test methods, use the rank of taxa abundance to find the significant taxa. Ordinary pattern DA_wilcox &lt;- run_wilcox( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_wilcox) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [16] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 4.039706e-02 52.5 0.3829211 0.7848636 NA ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 2.612080e-01 47.5 0.3435093 0.7848636 -0.9896391 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 2.307757e-01 45.0 0.2234993 0.6697876 NA ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 4.426807e-05 69.0 0.7234222 0.8996714 0.1573486 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 2.879778e-02 67.5 0.7270813 0.8996714 NA ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 8.430163e-03 65.0 0.9240616 0.9726964 0.7315751 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA ## 1 0.000000 0.0000000 0.000000 -0.23546400 10.83 ## 2 1.251455 0.7531518 1.495525 -0.35082742 10.28 ## 3 0.000000 0.0000000 0.000000 -0.41034110 10.00 ## 4 2.975891 3.2800219 2.941102 0.13102766 12.67 ## 5 0.000000 0.0000000 0.000000 0.09788782 12.50 ## 6 1.522195 2.4624670 1.483011 0.04314028 12.22 ## Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 12.75 21.74 22.22 21.43 0.95 (0.85;1.1) ## 2 13.11 82.61 88.89 78.57 1.4 (2.1;0.74) ## 3 13.29 43.48 33.33 50.00 2.9 (4.9;0.8) ## 4 11.57 65.22 55.56 71.43 0.66 (-0.16;1.5) ## 5 11.68 21.74 22.22 21.43 0.94 (0.81;1.1) ## 6 11.86 73.91 77.78 71.43 0.85 (0.53;1.2) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean Rank)_vs_BB**: Log2FoldChange (Mean Rank Abundance) between group AA and group BB; Mean Rank Abundance (All)/(group AA)/(group BB): Mean Rank Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for wilcox if (0) { DA_wilcox &lt;- run_wilcox( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_wilcox &lt;- run_wilcox( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_wilcox &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;) head(DA_wilcox) } wilcox_rarefy: random subsampling counts to the smallest library size in the data set. # summary summarize_phyloseq(ps = dada2_ps_genus_filter_trim) ## [[1]] ## [1] &quot;1] Min. number of reads = 32359&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 49328&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1008016&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 43826.7826086957&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 45596&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.501304347826087&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? NO&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 0&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; # run DA_wilcox_rarefy &lt;- run_wilcox( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;rarefy&quot;) colnames(DA_wilcox_rarefy) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [16] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for wilcox_rarefy if (0) { DA_wilcox_rarefy &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;, norm = &quot;rarefy&quot;) head(DA_wilcox_rarefy) } wilcox_CLR: centered log-ratio normalization. DA_wilcox_CLR &lt;- run_wilcox( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CLR&quot;) colnames(DA_wilcox_CLR) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [16] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for wilcox_CLR if(0) { DA_wilcox_CLR &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;, norm = &quot;CLR&quot;) head(DA_wilcox_CLR) } 10.3.7 Liner discriminant analysis (LDA) effect size (LEfSe) LEfSe method is from Metagenomic biomarker discovery and explanation (Segata et al. 2011). It uses Liner discriminant analysis model to identify Differential Taxa. DA_lefse &lt;- run_lefse( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 2) colnames(DA_lefse) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;LDA_Score&quot; &quot;EffectSize&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [7] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; ## [10] &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [13] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [16] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB BB 3.671138 2.679298 NA ## 2 g__Intestinibacter 9_AA vs 14_BB BB 3.146337 2.384308 NA ## 3 g__Lactobacillus 9_AA vs 14_BB BB 4.256710 2.450656 -3.336128 ## 4 g__Odoribacter 9_AA vs 14_BB BB 2.340309 1.876320 NA ## 5 g__Parasutterella 9_AA vs 14_BB AA -3.604579 2.234915 4.402050 ## 6 g__Romboutsia 9_AA vs 14_BB BB 3.705317 2.929140 -6.856424 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 225.11921 0.00000 1173.88222 -4.746617 5861.9051 ## 2 383.50911 0.00000 1398.79740 -1.964554 1883.3386 ## 3 1283.85401 520.46061 5256.08763 -5.173067 19938.7655 ## 4 21.93175 604.99989 0.00000 2.099583 578.0758 ## 5 172.77125 1080.35695 51.09966 4.481148 3901.0977 ## 6 2189.79596 50.35627 5835.02623 -3.334490 7094.1306 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB ## 1 350.3379 9405.0554 60.87 22.22 85.71 ## 2 680.6440 2656.4994 60.87 22.22 85.71 ## 3 892.0297 32183.0957 86.96 77.78 92.86 ## 4 1083.9017 252.9020 52.17 77.78 35.71 ## 5 9320.3061 417.3209 65.22 88.89 50.00 ## 6 1086.1419 10956.4090 78.26 55.56 92.86 ## Odds Ratio (95% CI) ## 1 4900 (5000;4900) ## 2 3.4 (5.8;1) ## 3 1.1e+08 (1.1e+08;1.1e+08) ## 4 0.31 (-2;2.6) ## 5 0.0025 (-12;12) ## 6 76 (85;68) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by lefse; LDA_Score: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for lefse if (0) { DA_lefse &lt;- run_lefse( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 0) DA_lefse &lt;- run_lefse( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 0) DA_lefse &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;lefse&quot;, norm = &quot;CPM&quot;, Lda = 0) head(DA_lefse) } 10.3.8 t-test T test, a parametric test method, identifies the significant taxa. Ordinary pattern DA_ttest &lt;- run_ttest( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_ttest) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ttest) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 4.039706e-02 0.1033924 0.91945373 0.9478904 NA ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 2.612080e-01 -1.0685711 0.29845945 0.8066472 -0.9896391 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 2.307757e-01 -2.2330622 0.04037917 0.5047396 NA ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 4.426807e-05 0.2287027 0.82272559 0.9332952 0.1573486 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 2.879778e-02 0.1909976 0.85037220 0.9332952 NA ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 8.430163e-03 0.3719101 0.71471897 0.9235004 0.7315751 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.000000 0.0000000 0.000000 0.1798599 0.5464976 ## 2 1.251455 0.7531518 1.495525 -0.7297123 1.1556912 ## 3 0.000000 0.0000000 0.000000 -4.5704715 0.3717372 ## 4 2.975891 3.2800219 2.941102 0.1292063 2.5335949 ## 5 0.000000 0.0000000 0.000000 0.8247823 0.1638686 ## 6 1.522195 2.4624670 1.483011 0.1892392 1.7652733 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 0.58848357 0.5195067 21.74 22.22 21.43 0.95 (0.85;1.1) ## 2 0.82507559 1.3682298 82.61 88.89 78.57 1.4 (2.1;0.74) ## 3 0.02502607 0.5946229 43.48 33.33 50.00 2.9 (4.9;0.8) ## 4 2.67297544 2.4439932 65.22 55.56 71.43 0.66 (-0.16;1.5) ## 5 0.22296448 0.1258785 21.74 22.22 21.43 0.94 (0.81;1.1) ## 6 1.90804895 1.6734889 73.91 77.78 71.43 0.85 (0.53;1.2) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size of taxa by glm function to assess the pvalue effect; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (GeometricMean)_vs_BB**: Log2FoldChange (GeometricMean Abundance) between group AA and group BB; GeometricMean Abundance (All)/(group AA)/(group BB): GeometricMean Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for t-test if (0) { DA_ttest &lt;- run_ttest( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ttest &lt;- run_ttest( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ttest &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;) head(DA_ttest) } t-test_rarefy: random subsampling counts to the smallest library size in the data set. DA_ttest_rarefy &lt;- run_ttest( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;rarefy&quot;) colnames(DA_ttest_rarefy) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; The output is the same as the previous results of ordinary pattern. other options for ttest_rarefy if (0) { DA_ttest_rarefy &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;, norm = &quot;rarefy&quot;) head(DA_ttest_rarefy) } 10.3.9 MetagenomeSeq MetagenomeSeq package is from Differential abundance analysis for microbial marker-gene surveys (Paulson et al. 2013). It uses zero-inflated Log-Normal mixture model or Zero-inflated Gaussian mixture model to identify the significant taxa between groups. (Caution: the otu_table should be integers). DA_metagenomeseq &lt;- run_metagenomeseq( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) colnames(DA_metagenomeseq) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;logFC&quot; &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; ## [7] &quot;se&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_metagenomeseq) ## TaxaID Block Enrichment logFC Pvalue AdjustedPvalue se Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif -1.1453226 NA NA NA NA ## 2 g__Actinomyces 9_AA vs 14_BB &lt;NA&gt; 0.6216876 NA NA NA -0.9965674 ## 3 g__Adlercreutzia 9_AA vs 14_BB &lt;NA&gt; 0.4652896 NA NA NA NA ## 4 g__Agathobacter 9_AA vs 14_BB &lt;NA&gt; -0.2406551 NA NA NA -0.1149914 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif -0.8318088 NA NA NA NA ## 6 g__Alistipes 9_AA vs 14_BB &lt;NA&gt; 0.2229196 NA NA NA 1.2561674 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.00000 0.00000 0.000000 3.2876853 148.45156 ## 2 40.00000 27.28823 54.446764 -0.5016143 82.10636 ## 3 0.00000 0.00000 7.846556 -2.7675469 26.03497 ## 4 301.55820 301.55820 326.578060 1.1416934 867.24692 ## 5 0.00000 0.00000 0.000000 -2.6101945 72.25398 ## 6 83.50731 175.82418 73.609609 0.2975842 189.53970 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 327.248231 33.51085 21.74 22.22 21.43 0.49 (-0.92;1.9) ## 2 65.522916 92.76714 82.61 88.89 78.57 1.4 (1.9;0.76) ## 3 5.739364 39.08214 43.48 33.33 50.00 8.7 (13;4.5) ## 4 1299.865944 589.13469 65.22 55.56 71.43 0.54 (-0.68;1.8) ## 5 17.588969 107.39578 21.74 22.22 21.43 1.6 (2.6;0.68) ## 6 213.795329 173.94680 73.91 77.78 71.43 0.83 (0.47;1.2) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; se: standard error; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for metagenomeseq if (0) { DA_metagenomeseq &lt;- run_metagenomeseq( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) DA_metagenomeseq &lt;- run_metagenomeseq( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) DA_metagenomeseq&lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;metagenomeseq&quot;, norm = &quot;CSS&quot;, method = &quot;ZILN&quot;) head(DA_metagenomeseq) } 10.3.10 DESeq2 DESeq2 package is from Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2 (Love, Huber, and Anders 2014). Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution.(Caution: the otu_table must be integers). DA_deseq2 &lt;- run_deseq2( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_deseq2) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; &quot;logFC&quot; ## [7] &quot;Statistic&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_deseq2) ## TaxaID Block Enrichment Pvalue AdjustedPvalue logFC Statistic Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.003314859 0.02209906 -3.1129168 -2.9369235 NA ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.122064731 0.31069563 -1.3609640 -1.5461650 -0.9577718 ## 3 g__Adlercreutzia 9_AA vs 14_BB BB 0.008736333 0.04408614 -2.4112622 -2.6222032 NA ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.301287313 0.51946088 1.1696067 1.0336767 0.1524904 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 0.395896745 0.60907192 0.5625950 0.8489722 NA ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 0.535255838 0.68622543 0.5817917 0.6200030 -0.1085245 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0 0 0.0 1.7051442 58.82609 ## 2 30 26 50.5 -1.3107676 50.91304 ## 3 0 0 9.0 -2.4683647 19.21739 ## 4 316 329 296.0 1.7488297 996.26087 ## 5 0 0 0.0 -2.1676332 93.78261 ## 6 64 64 69.0 0.2000385 163.86957 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 101.777778 31.21429 21.74 22.22 21.43 0.67 (-0.11;1.5) ## 2 26.777778 66.42857 82.61 88.89 78.57 4.1 (6.8;1.3) ## 3 5.111111 28.28571 43.48 33.33 50.00 8.6 (13;4.3) ## 4 1740.444444 517.85714 65.22 55.56 71.43 0.39 (-1.4;2.2) ## 5 30.000000 134.78571 21.74 22.22 21.43 1.5 (2.3;0.71) ## 6 177.888889 154.85714 73.91 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; Statistic: test statistic (negative binomial model); Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for deseq2 if (0) { DA_deseq2 &lt;- run_deseq2( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_deseq2 &lt;- run_deseq2( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_deseq2 &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;deseq2&quot;) head(DA_deseq2) } 10.3.11 EdgeR EdgeR package is from A scaling normalization method for differential expression analysis of RNA-seq data (Robinson and Oshlack 2010). Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution. (Caution: the otu_table must be integers). DA_edger &lt;- run_edger( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 10.1: EdgeR (BVC distance) colnames(DA_edger) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;Pvalue&quot; &quot;AdjustedPvalue&quot; &quot;logFC&quot; ## [7] &quot;logCPM&quot; &quot;LR&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [10] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; ## [13] &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [16] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [19] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_edger) ## TaxaID Block Enrichment Pvalue AdjustedPvalue logFC logCPM LR ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.01399827 0.0874892 -3.2265874 11.40297 6.03836132 ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.06553105 0.2113905 1.7971377 10.73043 3.39155685 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.02277119 0.1265066 2.1869009 8.75611 5.18587640 ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 0.21979989 0.4070368 -1.3582478 13.73655 1.50567724 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 0.09219654 0.2622316 2.3965438 10.73275 2.83559687 ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 0.81597305 0.9320193 -0.2248336 11.56947 0.05416207 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB ## 1 NA 0 0 0.0 ## 2 -0.9577718 30 26 50.5 ## 3 NA 0 0 9.0 ## 4 0.1524904 316 329 296.0 ## 5 NA 0 0 0.0 ## 6 -0.1085245 64 64 69.0 ## Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 1.7051442 58.82609 101.777778 31.21429 21.74 ## 2 -1.3107676 50.91304 26.777778 66.42857 82.61 ## 3 -2.4683647 19.21739 5.111111 28.28571 43.48 ## 4 1.7488297 996.26087 1740.444444 517.85714 65.22 ## 5 -2.1676332 93.78261 30.000000 134.78571 21.74 ## 6 0.2000385 163.86957 177.888889 154.85714 73.91 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 21.43 0.67 (-0.11;1.5) ## 2 88.89 78.57 4.1 (6.8;1.3) ## 3 33.33 50.00 8.6 (13;4.3) ## 4 55.56 71.43 0.39 (-1.4;2.2) ## 5 22.22 21.43 1.5 (2.3;0.71) ## 6 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; logFC: fitted coefficient represents the fold-change for group AA and group BB; logCPM: is the average expression of all samples for that particular gene across all samples on the log-scale expressed in counts per million (cpm, as calculated by edgeR after normalization); LR: the signed likelihood ratio test statistic; Pvalue and AdjustedPvalue: significant level of Pvalue and Adjusted-pvalue; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for EdgeR if (0) { DA_edger &lt;- run_edger( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_edger &lt;- run_edger( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_edger &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;edger&quot;) head(DA_edger) } 10.3.12 ANCOM ANCOM (Analysis of composition of microbiomes) is from Analysis of composition of microbiomes: a novel method for studying microbial composition”, Microbial Ecology in Health (Mandal et al. 2015). ANCOM makes no distributional assumptions and can be implemented in a linear model framework. (Caution: the otu_table must be integers). DA_ancom &lt;- run_ancom( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) Figure 10.2: ANCOM (Structure Zero) colnames(DA_ancom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;(W)q-values &lt; alpha&quot; &quot;W_ratio&quot; ## [7] &quot;detected_0.7&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ancom) ## TaxaID Block Enrichment EffectSize (W)q-values &lt; alpha W_ratio detected_0.7 ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 0.02320439 0 0 FALSE ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 0.73520463 0 0 FALSE ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 0.30465472 0 0 FALSE ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif -0.48457752 0 0 FALSE ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif -0.07760459 0 0 FALSE ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif -0.01131933 0 0 FALSE ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB ## 1 NA 0 0 0.0 ## 2 -0.9577718 30 26 50.5 ## 3 NA 0 0 9.0 ## 4 0.1524904 316 329 296.0 ## 5 NA 0 0 0.0 ## 6 -0.1085245 64 64 69.0 ## Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) ## 1 1.7051442 58.82609 101.777778 31.21429 21.74 ## 2 -1.3107676 50.91304 26.777778 66.42857 82.61 ## 3 -2.4683647 19.21739 5.111111 28.28571 43.48 ## 4 1.7488297 996.26087 1740.444444 517.85714 65.22 ## 5 -2.1676332 93.78261 30.000000 134.78571 21.74 ## 6 0.2000385 163.86957 177.888889 154.85714 73.91 ## Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 22.22 21.43 0.67 (-0.11;1.5) ## 2 88.89 78.57 4.1 (6.8;1.3) ## 3 33.33 50.00 8.6 (13;4.3) ## 4 55.56 71.43 0.39 (-1.4;2.2) ## 5 22.22 21.43 1.5 (2.3;0.71) ## 6 77.78 71.43 0.88 (0.64;1.1) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; Enrichment: enriched direction based on Median Abundance and AdjustedPvalue; EffectSize: effect size by ANCOM; (W)q-values &lt; alpha: q-values less than alpha; W_ratio: the ratio of W values; detected_0.7: W_ratio more than 0.7; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. other options for ANCOM if (0) { DA_ancom &lt;- run_ancom( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ancom &lt;- run_ancom( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_ancom &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ancom&quot;) head(DA_ancom) } 10.3.13 Corncob Corncob package is from Modeling microbial abundances and dysbiosis with beta-binomial regression”, Microbial Ecology in Health (Martin, Witten, and Willis 2020). Corncob is based on beta-binomial regression. (Caution: the otu_table must be integers). if (0) { DA_corncob &lt;- run_corncob( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) colnames(DA_ancom) head(DA_ancom) } other options for Corncob if (0) { DA_corncob &lt;- run_corncob( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) DA_corncob &lt;- run_corncob( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), method = &quot;Wald&quot;) DA_corncob &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;corncob&quot;, method = &quot;Wald&quot;) head(DA_corncob) } 10.3.14 Maaslin2 (Microbiome Multivariable Association with Linear Models) Maaslin2 package is from Multivariable association discovery in population-scale meta-omics studies (Mallick et al. 2021). Maaslin2 relies on general linear models to accommodate most modern epidemiological study designs, including cross-sectional and longitudinal, along with a variety of filtering, normalization, and transform methods. if (0) { DA_maaslin2 &lt;- run_maaslin2( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_maaslin2( ps = dada2_ps, taxa_level = &quot;Genus&quot;, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_maaslin2( data_otu = phyloseq::otu_table(dada2_ps_genus_filter_trim), data_sam = phyloseq::sample_data(dada2_ps_genus_filter_trim), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) DA_maaslin2 &lt;- run_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;maaslin2&quot;, transform = &quot;LOG&quot;, norm = &quot;TMM&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) head(DA_maaslin2) } 10.3.15 LOCOM LOCOM: A logistic regression model for testing differential abundance in compositional microbiome data with false discovery rate control (Hu, Satten, and Hu 2022). Cautions: It reports an error information which the matrix is singularError when user uses low prev.cut. library(permute) DA_locom &lt;- run_locom(ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), fdr.nominal = 0.2, prev.cut = 0.8) ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ## 88 OTU(s) with fewer than 18.4 in all samples are removed ## permutations: 1 DA_locom ## TaxaID Block EffectSize Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 g__Bacteroides 9_AA vs 14_BB 1.030 0.024 0.114 1.5367266 3807 ## 2 g__Blautia 9_AA vs 14_BB 0.570 0.038 0.114 0.2641697 8199 ## 3 g__Lachnoclostridium 9_AA vs 14_BB 0.672 0.032 0.114 0.7874146 422 ## 4 g__Lactobacillus 9_AA vs 14_BB -3.180 0.022 0.114 -3.0334230 56 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA ## 1 9103 3137.5 0.9841180 5745.5652 8219.44444 ## 2 8645 7198.5 0.3178904 9145.9565 10397.55556 ## 3 485 281.0 0.4658394 417.9565 502.33333 ## 4 24 196.5 -5.0905713 791.2609 37.44444 ## Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 4155.2143 100.00 100.00 100.00 0.45 (-1.1;2) ## 2 8341.3571 100.00 100.00 100.00 0.62 (-0.3;1.5) ## 3 363.7143 95.65 100.00 92.86 0.63 (-0.27;1.5) ## 4 1275.8571 86.96 77.78 92.86 1.8e+08 (1.8e+08;1.8e+08) Results: The results comprises more than 10 columns, and the details as follow: TaxaID: taxa name; Block: groups’ names and numbers; EffectSize: effect size by ANCOM; Pvalue: p-values for OTU-specific tests; AdjustedPvalue : q-values (adjusted p-values by the BH procedure) for OTU-specific tests; **Log2FoldChange (Median)_vs_BB**: Log2FoldChange (Median Abundance) between group AA and group BB; Median Abundance (All)/(group AA)/(group BB): Median Abundance in all, group AA and group BB, respectively; **Log2FoldChange (Mean)_vs_BB**: Log2FoldChange (Mean Abundance) between group AA and group BB; Mean Abundance (All)/(group AA)/(group BB): Mean Abundance in all, group AA and group BB, respectively; Occurrence (All)/(group AA)/(group BB): Occurrence in all, group AA and group BB, respectively; Odds Ratio (95% CI): 95% confidence interval odds ratio between group AA and group BB. 10.4 Metagenomic sequencing microbial data (metaphlan2/3) 10.4.1 Wilcoxon Rank Sum and Signed Rank Tests Wilcoxon Rank Sum and Signed Rank Tests, which are nonparameter test methods, use the rank of taxa abundance to find the significant taxa. DA_wilcox_mgs &lt;- run_wilcox( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_wilcox_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot; ## [13] &quot;Mean Rank Abundance\\nAA&quot; &quot;Mean Rank Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; ## [16] &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_wilcox_mgs) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 7_AA vs 15_BB Nonsignif 0.029120513 66.0 0.287755890 0.6474508 NA ## 2 g__Actinomyces 7_AA vs 15_BB Nonsignif 0.000000000 89.0 0.007702506 0.1279876 NA ## 3 g__Adlercreutzia 7_AA vs 15_BB Nonsignif 0.000000000 69.0 0.205742131 0.6172264 NA ## 4 g__Alistipes 7_AA vs 15_BB Nonsignif 0.351133307 69.0 0.256679338 0.6474508 NA ## 5 g__Anaerostipes 7_AA vs 15_BB Nonsignif 0.008891312 44.0 0.572370475 0.9090590 0.209169 ## 6 g__Anaerotruncus 7_AA vs 15_BB Nonsignif 0.000000000 59.5 0.595052434 0.9180809 NA ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA ## 1 0.0000000 0.000000 0.0000000 0.3413950 13.43 ## 2 -4.0718695 0.000000 -5.6020777 0.8815373 16.71 ## 3 0.0000000 0.000000 -0.1094380 0.4143437 13.86 ## 4 -0.2922093 0.000000 -0.5576409 0.4143437 13.86 ## 5 -3.5560112 -3.833027 -3.3157042 -0.2301827 10.29 ## 6 0.0000000 0.000000 0.0000000 0.1804953 12.50 ## Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 10.60 36.36 14.29 46.67 1.8 (2.9;0.65) ## 2 9.07 54.55 14.29 73.33 2.1 (3.5;0.64) ## 3 10.40 40.91 14.29 53.33 3.3e+50 (3.3e+50;3.3e+50) ## 4 10.40 77.27 71.43 80.00 0.8 (0.35;1.2) ## 5 12.07 86.36 71.43 93.33 3.9 (6.6;1.2) ## 6 11.03 36.36 28.57 40.00 1.1 (1.2;0.94) wilcox Metagenomic sequencing in run_da if (0) { DA_wilcox_mgs &lt;- run_da( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;wilcox&quot;) } 10.4.2 Liner discriminant analysis (LDA) effect size (LEfSe) LEfSe method is from Metagenomic biomarker discovery and explanation (Segata et al. 2011). It uses Liner discriminant analysis model to identify Differential Taxa. DA_lefse_mgs &lt;- run_lefse( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 2) colnames(DA_lefse_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;LDA_Score&quot; &quot;EffectSize&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; ## [7] &quot;Median Abundance\\n(All)&quot; &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; ## [10] &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; ## [13] &quot;Mean Abundance\\nBB&quot; &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; ## [16] &quot;Occurrence (100%)\\nBB&quot; &quot;Odds Ratio (95% CI)&quot; head(DA_lefse_mgs) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) ## 1 g__Actinomyces 7_AA vs 15_BB BB 2.233078 1.226382 NA 2.866622e+00 ## 2 g__Bacteroides 7_AA vs 15_BB AA -5.081345 2.546304 1.190750 2.541675e+05 ## 3 g__Bifidobacterium 7_AA vs 15_BB BB 4.938251 2.809341 -6.573979 3.906942e+04 ## 4 g__Blautia 7_AA vs 15_BB BB 4.137194 0.559013 -3.203536 2.181765e+04 ## 5 g__Collinsella 7_AA vs 15_BB BB 3.837502 2.585562 NA 7.735890e+03 ## 6 g__Dorea 7_AA vs 15_BB BB 3.830972 2.149879 -5.725323 8.554293e+03 ## Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) Mean Abundance\\nAA ## 1 0.0000 7.245027e+00 -1.246758 29.78669 15.38419 ## 2 464614.8499 2.035362e+05 1.141368 291673.92734 464989.41139 ## 3 917.8126 8.744173e+04 -3.459698 114201.49672 14604.58489 ## 4 3704.8960 3.413002e+04 -2.334726 25756.09859 6854.31058 ## 5 0.0000 1.164172e+04 -2.928116 12495.99111 2268.85954 ## 6 270.5150 1.431151e+04 -3.454344 11339.49845 1455.31524 ## Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 36.50785 54.55 14.29 73.33 1.7 (2.8;0.66) ## 2 210793.36812 100.00 100.00 100.00 0.32 (-1.9;2.5) ## 3 160680.05558 100.00 100.00 100.00 150 (160;140) ## 4 34576.93300 100.00 100.00 100.00 91 (100;82) ## 5 17268.65252 68.18 42.86 80.00 20 (25;14) ## 6 15952.11728 90.91 71.43 100.00 28 (34;21) lefse Metagenomic sequencing in run_da if(0) { DA_lefse_mgs &lt;- run_da( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;lefse&quot;, norm = &quot;CPM&quot;, Lda = 0) } 10.4.3 t-test T test, a parametric test method, identifies the significant taxa. DA_ttest_mgs &lt;- run_ttest( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_ttest_mgs) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;Statistic&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; head(DA_ttest_mgs) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 7_AA vs 15_BB Nonsignif 0.029120513 1.6224952 0.1268031482 0.42989056 NA ## 2 g__Actinomyces 7_AA vs 15_BB AA 0.000000000 4.2147741 0.0004262392 0.02301692 NA ## 3 g__Adlercreutzia 7_AA vs 15_BB Nonsignif 0.000000000 0.3784812 0.7132793673 0.89461978 NA ## 4 g__Alistipes 7_AA vs 15_BB Nonsignif 0.351133307 1.5549753 0.1426320027 0.42989056 NA ## 5 g__Anaerostipes 7_AA vs 15_BB Nonsignif 0.008891312 -0.5032842 0.6276300873 0.88505750 0.209169 ## 6 g__Anaerotruncus 7_AA vs 15_BB Nonsignif 0.000000000 0.7222256 0.4821043445 0.80045647 NA ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0000000 0.000000 0.0000000 -4.6801941 -0.6684792 ## 2 -4.0718695 0.000000 -5.6020777 -3.1446701 -3.5110388 ## 3 0.0000000 0.000000 -0.1094380 -0.5158435 -1.2170713 ## 4 -0.2922093 0.000000 -0.5576409 NaN -0.6199546 ## 5 -3.5560112 -3.833027 -3.3157042 0.2588223 -3.1342315 ## 6 0.0000000 0.000000 0.0000000 -0.7708757 -1.6813511 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB ## 1 -0.03755834 -0.962909 36.36 14.29 46.67 ## 2 -0.55308838 -4.891416 54.55 14.29 73.33 ## 3 -0.94122923 -1.345798 40.91 14.29 53.33 ## 4 0.32506111 -1.060962 77.27 71.43 80.00 ## 5 -3.52944089 -2.949800 86.36 71.43 93.33 ## 6 -1.13484283 -1.936388 36.36 28.57 40.00 ## Odds Ratio (95% CI) ## 1 1.8 (2.9;0.65) ## 2 2.1 (3.5;0.64) ## 3 3.3e+50 (3.3e+50;3.3e+50) ## 4 0.8 (0.35;1.2) ## 5 3.9 (6.6;1.2) ## 6 1.1 (1.2;0.94) ttest Metagenomic sequencing in run_da if(0) { DA_ttest_mgs &lt;- run_da( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;ttest&quot;) } 10.4.4 Maaslin2 (Microbiome Multivariable Association with Linear Models) Maaslin2 package is from Multivariable association discovery in population-scale meta-omics studies (Mallick et al. 2021). Maaslin2 relies on general linear models to accommodate most modern epidemiological study designs, including cross-sectional and longitudinal, along with a variety of filtering, normalization, and transform methods. if (0) { DA_maaslin2_mgs &lt;- run_maaslin2( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), transform = &quot;NONE&quot;, norm = &quot;NONE&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) head(DA_maaslin2_mgs) } maaslin2 Metagenomic sequencing in run_da if (0) { DA_maaslin2_mgs &lt;- run_da( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = &quot;maaslin2&quot;, transform = &quot;NONE&quot;, norm = &quot;NONE&quot;, method = &quot;LM&quot;, outdir = &quot;./demo_output&quot;) } 10.5 Visualization The Volcano plot is used to display differential analysis. plot_volcano provides multiple parameters for plotting volcano. More details to see help(plot_volcano). The barplot is used to display the lefse results. 10.5.1 Volcano plot The X and Y coordinate axis are flexible to choose for Volcano. Here, we choose logFC and AdjustedPvalue to visualize the results DA_limma_voom &lt;- run_limma_voom( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) colnames(DA_limma_voom) ## [1] &quot;TaxaID&quot; &quot;Block&quot; &quot;Enrichment&quot; ## [4] &quot;EffectSize&quot; &quot;logFC&quot; &quot;Pvalue&quot; ## [7] &quot;AdjustedPvalue&quot; &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot; &quot;Median Abundance\\n(All)&quot; ## [10] &quot;Median Abundance\\nAA&quot; &quot;Median Abundance\\nBB&quot; &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot; ## [13] &quot;Mean Abundance\\n(All)&quot; &quot;Mean Abundance\\nAA&quot; &quot;Mean Abundance\\nBB&quot; ## [16] &quot;Occurrence (100%)\\n(All)&quot; &quot;Occurrence (100%)\\nAA&quot; &quot;Occurrence (100%)\\nBB&quot; ## [19] &quot;Odds Ratio (95% CI)&quot; DA_limma_voom_volcano &lt;- plot_volcano( da_res = DA_limma_voom, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;logFC&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) DA_limma_voom_volcano Figure 10.3: Volcano (limma-voom: logFC and AdjustedPvalue) DA_limma_voom_volcano effectsize plot_volcano( da_res = DA_limma_voom, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;EffectSize&quot;, x_index_cutoff = 1, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 8) Figure 10.4: Volcano (limma-voom: EffectSize and Pvalue) The logFC and EffectSize are the same values in limma-voom. 10.5.2 barplot in lefse DA_lefse &lt;- run_lefse( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 2) # # don&#39;t run this code when you do lefse in reality # DA_lefse$LDA_Score &lt;- DA_lefse$LDA_Score * 1000 plot_lefse( da_res = DA_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 1, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 10.5: Barplot (Lefse) 10.6 Dominant taxa Display the significant taxa with selection using boxplot. DA_wilcox &lt;- run_wilcox( ps = metaphlan2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) plot_topN_boxplot( ps = metaphlan2_ps_genus_filter_trim, da_res = DA_wilcox, x_index = &quot;Log2FoldChange (Median)\\nAA_vs_BB&quot;, x_index_cutoff = 0.2, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.3, topN = 3, taxa_name = &quot;s__Ruminococcus_torques&quot;, group = &quot;Group&quot;) Figure 10.6: Dominant Taxa 10.7 Multiple differential analysis by one function here, we provide the run_multiple_da for obtaining the results list from multiple differential analysis methods. multiple_res &lt;- run_multiple_da( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), da_method = c(&quot;aldex&quot;, &quot;limma_voom&quot;, &quot;mbzinb&quot;, &quot;omnibus&quot;), p_adjust = &quot;none&quot;) ## |------------(25%)----------(50%)----------(75%)----------| ## Start GMPR normalization ... ## Start Winsorization ... ## Perform filtering ... ## --A total of 92 taxa will be tested with a sample size of 23 ! ## --Omnibus test is selected! ## --Dispersion is treated as a parameter of interest! ## Start testing ... ## 10 % ## 20 % ## 30 % ## 40 % ## 50 % ## 60 % ## 70 % ## 80 % ## 90 % ## 100%! ## Handle failed taxa using permutation test! ## Permutation test .... ## Completed! names(multiple_res) ## [1] &quot;aldex&quot; &quot;limma_voom&quot; &quot;mbzinb&quot; &quot;omnibus&quot; plot results plot_multiple_DA( Multip_DA_res = multiple_res, x_index_list = c(&quot;EffectSize&quot;, &quot;logFC&quot;, &quot;mean.LFC&quot;, &quot;abund.LFC.CompvarBB.est&quot;), x_index_cutoff = 0, y_index = &quot;AdjustedPvalue&quot;, y_index_cutoff = 0.5, cellwidth = 50, cellheight = 10) Figure 10.7: Multiple DA results 10.8 Comparing outputs from XMAS2, lefse-conda, and lefse-galaxy using the same in-house datasets (amplicon_ps|Zeybel_Gut) 10.8.1 Introduction In this document, Comparing the output from lefse through different applications: XMAS2 (R package) lefse-conda (command line) lefse-galaxy (from the galaxy platfrom) In all cases, using the same dataset, amplicon_ps and Zeybel_Gut, which are included in the XMAS package. library(XMAS2) library(dplyr) library(ggplot2) library(devtools) library(tibble) library(tidyr) library(magrittr) library(readr) library(VennDiagram) library(purrr) # rm(list = ls()) options(stringsAsFactors = F) options(future.globals.maxSize = 1000 * 1024^2) 10.8.2 Dataset 10.8.2.1 16s genus data(&quot;amplicon_ps&quot;) amplicon_ps_genus &lt;- summarize_taxa(amplicon_ps, taxa_level = &quot;Genus&quot;) amplicon_ps_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 142 taxa and 34 samples ] ## sample_data() Sample Data: [ 34 samples by 8 sample variables ] ## tax_table() Taxonomy Table: [ 142 taxa by 6 taxonomic ranks ] 10.8.2.2 metagenomics species data(&quot;Zeybel_Gut&quot;) Zeybel_ps_species &lt;- summarize_taxa(Zeybel_Gut, taxa_level = &quot;Species&quot;) Zeybel_ps_species ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 372 taxa and 42 samples ] ## sample_data() Sample Data: [ 42 samples by 51 sample variables ] ## tax_table() Taxonomy Table: [ 372 taxa by 7 taxonomic ranks ] 10.8.2.3 Preparing for lefse galaxy and conda 1st row: class (required) 2nd row: subclass (optional) 3rd row: sampleID (required) rownames: taxon data format: splitted by “ prepare_lefse &lt;- function(ps, Class, Class_names, Subclass = NULL, cutoff = 10) { # ps = amplicon_ps_genus # Class = &quot;SampleType&quot; # Class_names = c(&quot;gut&quot;, &quot;tongue&quot;) # Subclass = NULL # cutoff = 10 sam_tab &lt;- phyloseq::sample_data(ps) %&gt;% data.frame() colnames(sam_tab)[which(colnames(sam_tab) == Class)] &lt;- &quot;CompClass&quot; if (is.null(Subclass)) { sam_tab_final &lt;- sam_tab %&gt;% dplyr::select(CompClass) %&gt;% tibble::rownames_to_column(&quot;TempRowNames&quot;) %&gt;% dplyr::filter(CompClass %in% Class_names) %&gt;% dplyr::select(all_of(c(&quot;TempRowNames&quot;, &quot;CompClass&quot;))) %&gt;% tibble::column_to_rownames(&quot;TempRowNames&quot;) } else { sam_tab_final &lt;- sam_tab %&gt;% dplyr::select(all_of(c(&quot;CompClass&quot;, Subclass))) %&gt;% tibble::rownames_to_column(&quot;TempRowNames&quot;) %&gt;% dplyr::filter(CompClass %in% Class_names) %&gt;% dplyr::select(all_of(c(&quot;TempRowNames&quot;, &quot;CompClass&quot;, Subclass))) %&gt;% tibble::column_to_rownames(&quot;TempRowNames&quot;) } colnames(sam_tab_final)[which(colnames(sam_tab_final) == &quot;CompClass&quot;)] &lt;- Class phyloseq::sample_data(ps) &lt;- phyloseq::sample_data(sam_tab_final) otu_tab &lt;- phyloseq::otu_table(ps) %&gt;% data.frame() otu_tab_final &lt;- otu_tab[rowSums(otu_tab) &gt; cutoff, colSums(otu_tab) &gt; cutoff, F] phyloseq::otu_table(ps) &lt;- phyloseq::otu_table(as.matrix(otu_tab_final), taxa_are_rows = TRUE) lefse_data &lt;- sam_tab_final %&gt;% tibble::rownames_to_column(&quot;Sample&quot;) %&gt;% dplyr::inner_join(otu_tab_final %&gt;% t() %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;Sample&quot;), by = &quot;Sample&quot;) %&gt;% dplyr::select(all_of(Class), Sample, all_of(Subclass), everything()) %&gt;% #stats::setNames(c(Class, &quot;Sample&quot;, Subclass, rownames(otu_tab_final))) %&gt;% t() %&gt;% data.frame() lefse_data_nosub &lt;- sam_tab_final %&gt;% tibble::rownames_to_column(&quot;Sample&quot;) %&gt;% dplyr::inner_join(otu_tab_final %&gt;% t() %&gt;% data.frame() %&gt;% tibble::rownames_to_column(&quot;Sample&quot;), by = &quot;Sample&quot;) %&gt;% dplyr::select(-Sample) %&gt;% dplyr::select(all_of(Class), all_of(Subclass), everything()) %&gt;% t() %&gt;% data.frame() res &lt;- list(ps=ps, lefse=lefse_data, lefse_nosub=lefse_data_nosub) return(res) } amplicon_ps_genus_lefse &lt;- prepare_lefse( ps = amplicon_ps_genus, Class = &quot;SampleType&quot;, Class_names = c(&quot;gut&quot;, &quot;tongue&quot;), cutoff = 10) write.table(amplicon_ps_genus_lefse$lefse, &quot;amplicon_ps_genus_lefse.tsv&quot;, quote = F, sep = &quot;\\t&quot;, col.names = F) write.table(amplicon_ps_genus_lefse$lefse_nosub, &quot;amplicon_ps_genus_lefse_nosub.tsv&quot;, quote = F, sep = &quot;\\t&quot;, col.names = F) Zeybel_ps_species_lefse &lt;- prepare_lefse( ps = Zeybel_ps_species, Class = &quot;LiverFatClass&quot;, Class_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), cutoff = 1e-4) write.table(Zeybel_ps_species_lefse$lefse, &quot;Zeybel_ps_species_lefse.tsv&quot;, quote = F, sep = &quot;\\t&quot;, col.names = F) write.table(Zeybel_ps_species_lefse$lefse_nosub, &quot;Zeybel_ps_species_lefse_nosub.tsv&quot;, quote = F, sep = &quot;\\t&quot;, col.names = F) 10.8.3 Run lefse independently with the three applications (R, conda, galaxy) 10.8.3.1 Running lefse in R (XMAS2) Perform the analysis with the run_lefse2 function: amplicon_ps_genus # run_lefse amplicon_xmas2_output &lt;- run_lefse( ps = amplicon_ps_genus_lefse$ps, group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;tongue&quot;), norm = &quot;CPM&quot;) %&gt;% dplyr::mutate(app_name = &quot;xmas_lefse&quot;) %&gt;% dplyr::arrange(LDA_Score) head(amplicon_xmas2_output) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\ngut_vs_tongue ## 1 g__Bacteroides 8_gut vs 9_tongue gut -5.432232 7.205788 NA ## 2 g__Clostridiales_unclassified 8_gut vs 9_tongue gut -4.759647 6.284851 NA ## 3 g__Lachnospira 8_gut vs 9_tongue gut -4.386386 5.273986 NA ## 4 g__Ruminococcaceae_unclassified 8_gut vs 9_tongue gut -4.249730 4.861141 NA ## 5 g__Parabacteroides 8_gut vs 9_tongue gut -3.750139 2.441149 NA ## 6 g__Roseburia 8_gut vs 9_tongue gut -3.678465 3.643739 NA ## Median Abundance\\n(All) Median Abundance\\ngut Median Abundance\\ntongue Log2FoldChange (Mean)\\ngut_vs_tongue Mean Abundance\\n(All) ## 1 23809.524 504823.578 0 7.435869 254615.323 ## 2 0.000 62145.077 0 NA 55257.766 ## 3 0.000 58908.562 0 NA 24670.251 ## 4 5464.481 50901.892 0 3.157795 22846.596 ## 5 0.000 7692.308 0 NA 5833.286 ## 6 0.000 14149.872 0 4.070882 6843.467 ## Mean Abundance\\ngut Mean Abundance\\ntongue Occurrence (100%)\\n(All) Occurrence (100%)\\ngut Occurrence (100%)\\ntongue ## 1 537564.84 3104.639 58.82 100.0 22.22 ## 2 117422.75 0.000 47.06 100.0 0.00 ## 3 52424.28 0.000 41.18 87.5 0.00 ## 4 43114.23 4830.918 52.94 100.0 11.11 ## 5 12395.73 0.000 23.53 50.0 0.00 ## 6 13629.96 811.030 47.06 87.5 11.11 ## Odds Ratio (95% CI) app_name ## 1 3e-23 (-100;100) xmas_lefse ## 2 &lt;NA&gt; xmas_lefse ## 3 &lt;NA&gt; xmas_lefse ## 4 0.11 (-4.3;4.5) xmas_lefse ## 5 &lt;NA&gt; xmas_lefse ## 6 0.029 (-6.9;7) xmas_lefse # run_lefse2 amplicon_xmas2_output2 &lt;- run_lefse2( ps = amplicon_ps_genus_lefse$ps, group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;tongue&quot;), norm = &quot;CPM&quot;) %&gt;% dplyr::mutate(app_name = &quot;xmas_lefse2&quot;) %&gt;% dplyr::arrange(LDA_Score) head(amplicon_xmas2_output2) ## TaxaID Block LDA_Score Enrichment EffectSize Pvalue ## 1 g__Bacteroides 8_gut vs 9_tongue -5.725726 gut 7.205788 0.0003313659 ## 2 g__Clostridiales_unclassified 8_gut vs 9_tongue -5.042318 gut 6.284851 0.0001762277 ## 3 g__Lachnospira 8_gut vs 9_tongue -4.782143 gut 5.273986 0.0006899491 ## 4 g__Ruminococcaceae_unclassified 8_gut vs 9_tongue -4.609025 gut 4.861141 0.0008003430 ## 5 g__Blautia 8_gut vs 9_tongue -4.137049 gut 3.692692 0.0006899491 ## 6 g__Faecalibacterium 8_gut vs 9_tongue -4.126933 gut 3.805851 0.0006899491 ## Log2FoldChange (Median)\\ngut_vs_tongue Median Abundance\\n(All) Median Abundance\\ngut Median Abundance\\ntongue ## 1 NA 23809.524 504823.578 0 ## 2 NA 0.000 62145.077 0 ## 3 NA 0.000 58908.562 0 ## 4 NA 5464.481 50901.892 0 ## 5 NA 0.000 6894.934 0 ## 6 NA 0.000 8302.583 0 ## Log2FoldChange (Mean)\\ngut_vs_tongue Mean Abundance\\n(All) Mean Abundance\\ngut Mean Abundance\\ntongue Occurrence (100%)\\n(All) ## 1 7.435869 254615.323 537564.84 3104.639 58.82 ## 2 NA 55257.766 117422.75 0.000 47.06 ## 3 NA 24670.251 52424.28 0.000 41.18 ## 4 3.157795 22846.596 43114.23 4830.918 52.94 ## 5 NA 5724.767 12165.13 0.000 41.18 ## 6 NA 5582.196 11862.17 0.000 41.18 ## Occurrence (100%)\\ngut Occurrence (100%)\\ntongue Odds Ratio (95% CI) app_name ## 1 100.0 22.22 3e-23 (-100;100) xmas_lefse2 ## 2 100.0 0.00 &lt;NA&gt; xmas_lefse2 ## 3 87.5 0.00 &lt;NA&gt; xmas_lefse2 ## 4 100.0 11.11 0.11 (-4.3;4.5) xmas_lefse2 ## 5 87.5 0.00 &lt;NA&gt; xmas_lefse2 ## 6 87.5 0.00 &lt;NA&gt; xmas_lefse2 Zeybel_ps_species # run_lefse MGS_xmas2_output &lt;- run_lefse( ps = Zeybel_ps_species_lefse$ps, group = &quot;LiverFatClass&quot;, group_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), norm = &quot;CPM&quot;) %&gt;% dplyr::mutate(app_name = &quot;xmas_lefse&quot;) %&gt;% dplyr::arrange(LDA_Score) head(MGS_xmas2_output) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\nMild_vs_Moderate ## 1 s__Butyricimonas_virosa 12_Mild vs 12_Moderate Moderate 2.361748 1.668501 NA ## 2 s__Bacteroides_salyersiae 12_Mild vs 12_Moderate Moderate 2.498556 1.573816 NA ## 3 s__Bacteroides_thetaiotaomicron 12_Mild vs 12_Moderate Moderate 3.135202 2.775490 NA ## 4 s__Bacteroides_clarus 12_Mild vs 12_Moderate Moderate 3.203239 2.331714 NA ## 5 s__Bacteroides_coprocola 12_Mild vs 12_Moderate Moderate 3.308286 1.367262 NA ## 6 s__Bacteroides_intestinalis 12_Mild vs 12_Moderate Moderate 3.314354 1.184353 NA ## Median Abundance\\n(All) Median Abundance\\nMild Median Abundance\\nModerate Log2FoldChange (Mean)\\nMild_vs_Moderate ## 1 0.8999998 0 262.9238 -2.329681 ## 2 0.0000000 0 0.0000 NA ## 3 223.8648101 0 1123.0082 -2.241224 ## 4 0.0000000 0 0.0000 NA ## 5 0.0000000 0 0.0000 NA ## 6 0.0000000 0 0.0000 NA ## Mean Abundance\\n(All) Mean Abundance\\nMild Mean Abundance\\nModerate Occurrence (100%)\\n(All) Occurrence (100%)\\nMild ## 1 353.2093 117.2101 589.2084 50.00 25.00 ## 2 262.0187 0.0000 524.0375 16.67 0.00 ## 3 2413.3440 842.6510 3984.0371 66.67 41.67 ## 4 1283.6658 0.0000 2567.3315 20.83 0.00 ## 5 1704.3673 0.0000 3408.7346 16.67 0.00 ## 6 1745.9150 0.0000 3491.8300 16.67 0.00 ## Occurrence (100%)\\nModerate Odds Ratio (95% CI) app_name ## 1 75.00 3.9 (6.6;1.2) xmas_lefse ## 2 33.33 &lt;NA&gt; xmas_lefse ## 3 91.67 3.1 (5.3;0.87) xmas_lefse ## 4 41.67 &lt;NA&gt; xmas_lefse ## 5 33.33 &lt;NA&gt; xmas_lefse ## 6 33.33 &lt;NA&gt; xmas_lefse # run_lefse2 MGS_xmas2_output2 &lt;- run_lefse2( ps = Zeybel_ps_species_lefse$ps, group = &quot;LiverFatClass&quot;, group_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), norm = &quot;CPM&quot;) %&gt;% dplyr::mutate(app_name = &quot;xmas_lefse2&quot;) %&gt;% dplyr::arrange(LDA_Score) head(MGS_xmas2_output2) ## TaxaID Block LDA_Score Enrichment EffectSize Pvalue ## 1 s__Butyricimonas_virosa 12_Mild vs 12_Moderate 2.696270 Moderate 1.668501 0.02432292 ## 2 s__Bacteroides_salyersiae 12_Mild vs 12_Moderate 2.746477 Moderate 1.573816 0.03286923 ## 3 s__Bacteroides_clarus 12_Mild vs 12_Moderate 3.343177 Moderate 2.331714 0.01473169 ## 4 s__Bacteroides_thetaiotaomicron 12_Mild vs 12_Moderate 3.534826 Moderate 2.775490 0.01050852 ## 5 s__Bacteroides_intestinalis 12_Mild vs 12_Moderate 3.545413 Moderate 1.184353 0.03286923 ## 6 s__Bacteroides_coprocola 12_Mild vs 12_Moderate 3.630955 Moderate 1.367262 0.03286923 ## Log2FoldChange (Median)\\nMild_vs_Moderate Median Abundance\\n(All) Median Abundance\\nMild Median Abundance\\nModerate ## 1 NA 0.8999998 0 262.9238 ## 2 NA 0.0000000 0 0.0000 ## 3 NA 0.0000000 0 0.0000 ## 4 NA 223.8648101 0 1123.0082 ## 5 NA 0.0000000 0 0.0000 ## 6 NA 0.0000000 0 0.0000 ## Log2FoldChange (Mean)\\nMild_vs_Moderate Mean Abundance\\n(All) Mean Abundance\\nMild Mean Abundance\\nModerate ## 1 -2.329681 353.2093 117.2101 589.2084 ## 2 NA 262.0187 0.0000 524.0375 ## 3 NA 1283.6658 0.0000 2567.3315 ## 4 -2.241224 2413.3440 842.6510 3984.0371 ## 5 NA 1745.9150 0.0000 3491.8300 ## 6 NA 1704.3673 0.0000 3408.7346 ## Occurrence (100%)\\n(All) Occurrence (100%)\\nMild Occurrence (100%)\\nModerate Odds Ratio (95% CI) app_name ## 1 50.00 25.00 75.00 3.9 (6.6;1.2) xmas_lefse2 ## 2 16.67 0.00 33.33 &lt;NA&gt; xmas_lefse2 ## 3 20.83 0.00 41.67 &lt;NA&gt; xmas_lefse2 ## 4 66.67 41.67 91.67 3.1 (5.3;0.87) xmas_lefse2 ## 5 16.67 0.00 33.33 &lt;NA&gt; xmas_lefse2 ## 6 16.67 0.00 33.33 &lt;NA&gt; xmas_lefse2 10.8.3.2 Running lefse-conda (command line) 10.8.3.2.0.1 lefse-conda installation and version Note: I installed lefse following the instructions from this site after installing conda. ## Add channels conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge conda config --add channels biobakery ## Install lefse conda create -n lefse -c biobakery lefse -y Conda and lefse versions: conda --version #&gt; conda 4.12.0 conda list | grep -e &quot;lefse&quot; # packages in environment at /home/samuel/miniconda3/envs/lefse: #&gt; lefse 1.1.2 pyhdfd78af_0 bioconda 10.8.3.2.1 Run lefse-conda Generate a tabular dataset (amplicon_ps_genus_lefse or Zeybel_ps_species_lefse) compatible with lefse-conda and lefse-galaxy using the get_dataset.R script. Run the script run_lefse.sh (linux) with the following parameters: # In general # ./run_lefse.sh &lt;path/to/conda/activate&gt; &lt;env_name&gt; &lt;path/to/Rscript&gt; &lt;filename prefix&gt; # in my case (Hua Zou) ## amplicon_ps_genus_lefse ./run_lefse.sh /Users/zouhua/opt/anaconda3/bin/activate lefse /usr/local/bin/R amplicon_ps_genus_lefse ## Zeybel_ps_species_lefse ./run_lefse.sh /Users/zouhua/opt/anaconda3/bin/activate lefse /usr/local/bin/R Zeybel_ps_species_lefse Note: All script files, get_dataset.R and run_lefse.sh, and this rmarkdown document must be in the same directory. 10.8.3.2.2 Import output from lefse-conda into R get_lefse_python &lt;- function(datres, Class_names, name = &quot;lefse_conda&quot;, LDA_names = &quot;lefse_conda_LDA&quot;, LDA_cutoff = 2) { # datres = &quot;amplicon_ps_genus_lefse.res&quot; # Class_names = c(&quot;gut&quot;, &quot;tongue&quot;) # LDA_cutoff = 2 col_names &lt;- c( &quot;TaxaID&quot;, &quot;log_hi_class_avg&quot;, &quot;Enrichment&quot;, &quot;lefse_conda_LDA&quot;, &quot;pval&quot;) lefse_conda &lt;- readr::read_tsv(datres, show_col_types = FALSE, col_names = FALSE ) %&gt;% magrittr::set_colnames(col_names) %&gt;% dplyr::filter(!is.na(lefse_conda_LDA)) %&gt;% dplyr::mutate( lefse_conda_LDA = ifelse( Enrichment == Class_names[1], -lefse_conda_LDA, lefse_conda_LDA), app_name = name) %&gt;% dplyr::filter(abs(lefse_conda_LDA) &gt;= LDA_cutoff) %&gt;% dplyr::arrange(lefse_conda_LDA) colnames(lefse_conda)[which(colnames(lefse_conda) == &quot;lefse_conda_LDA&quot;)] &lt;- LDA_names return(lefse_conda) } amplicon_ps_genus_lefse_conda &lt;- get_lefse_python( datres = &quot;amplicon_ps_genus_lefse.res&quot;, Class_names = c(&quot;gut&quot;, &quot;tongue&quot;), LDA_names = &quot;lefse_conda_LDA&quot;) head(amplicon_ps_genus_lefse_conda) ## # A tibble: 6 × 6 ## TaxaID log_hi_class_avg Enrichment lefse_conda_LDA pval app_name ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 g__Bacteroides 5.77 gut -5.47 0.0005320055051392497 lefse_conda ## 2 g__Lachnospiraceae_unclassified 4.82 gut -4.47 0.0005320055051392497 lefse_conda ## 3 g__Ruminococcaceae_unclassified 4.75 gut -4.46 0.0004911726274481772 lefse_conda ## 4 g__Lachnospira 4.68 gut -4.36 0.0001762276980982556 lefse_conda ## 5 g__Faecalibacterium 4.47 gut -4.20 0.0001762276980982556 lefse_conda ## 6 g__Phascolarctobacterium 4.46 gut -4.15 0.0001762276980982556 lefse_conda Zeybel_ps_species_lefse_conda &lt;- get_lefse_python( datres = &quot;Zeybel_ps_species_lefse.res&quot;, Class_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), LDA_names = &quot;lefse_conda_LDA&quot;) head(Zeybel_ps_species_lefse_conda) ## # A tibble: 6 × 6 ## TaxaID log_hi_class_avg Enrichment lefse_conda_LDA pval app_name ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 s__Butyricimonas_virosa 2.77 Moderate 2.46 0.02432291566171718 lefse_conda ## 2 s__Bacteroides_salyersiae 2.72 Moderate 2.47 0.032869234300658745 lefse_conda ## 3 s__Bacteroides_clarus 3.41 Moderate 3.07 0.014731687897477879 lefse_conda ## 4 s__Bacteroides_thetaiotaomicron 3.60 Moderate 3.26 0.01050851971947486 lefse_conda ## 5 s__Bacteroides_coprocola 3.53 Moderate 3.28 0.032869234300658745 lefse_conda ## 6 s__Bacteroides_intestinalis 3.54 Moderate 3.32 0.032869234300658745 lefse_conda 10.8.3.3 Running lefse from galaxy Using the amplicon_ps_genus_lefse_nosub.txt or Zeybel_ps_species_lefse_nosub.txt file (no subjects included) as input for lefse from the galaxy platform of the Huttenhower lab at galaxy. The conditions as follow: alpha were 0.05 for both KW and Wilcox, 2.0 for LDA. TSS normalization was applied as well. converting the output into compared format: amplicon_ps_genus_lefse_nosub.res Zeybel_ps_species_lefse_nosub.res amplicon_ps_genus_lefse_galaxy &lt;- get_lefse_python( datres = &quot;amplicon_ps_genus_lefse_nosub.res&quot;, name = &quot;lefse_galaxy&quot;, Class_names = c(&quot;gut&quot;, &quot;tongue&quot;), LDA_names = &quot;lefse_galaxy_LDA&quot;) head(amplicon_ps_genus_lefse_galaxy) ## # A tibble: 6 × 6 ## TaxaID log_hi_class_avg Enrichment lefse_galaxy_LDA pval app_name ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 g__Bacteroides 5.77 gut -5.46 0.000532005505139 lefse_galaxy ## 2 g__Lachnospiraceae_unclassified 4.82 gut -4.45 0.000532005505139 lefse_galaxy ## 3 g__Ruminococcaceae_unclassified 4.75 gut -4.41 0.000491172627448 lefse_galaxy ## 4 g__Lachnospira 4.68 gut -4.38 0.000176227698098 lefse_galaxy ## 5 g__Phascolarctobacterium 4.46 gut -4.18 0.000176227698098 lefse_galaxy ## 6 g__Faecalibacterium 4.47 gut -4.18 0.000176227698098 lefse_galaxy Zeybel_ps_species_lefse_galaxy &lt;- get_lefse_python( datres = &quot;Zeybel_ps_species_lefse_nosub.res&quot;, name = &quot;lefse_galaxy&quot;, Class_names = c(&quot;Mild&quot;, &quot;Moderate&quot;), LDA_names = &quot;lefse_galaxy_LDA&quot;) head(amplicon_ps_genus_lefse_galaxy) ## # A tibble: 6 × 6 ## TaxaID log_hi_class_avg Enrichment lefse_galaxy_LDA pval app_name ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 g__Bacteroides 5.77 gut -5.46 0.000532005505139 lefse_galaxy ## 2 g__Lachnospiraceae_unclassified 4.82 gut -4.45 0.000532005505139 lefse_galaxy ## 3 g__Ruminococcaceae_unclassified 4.75 gut -4.41 0.000491172627448 lefse_galaxy ## 4 g__Lachnospira 4.68 gut -4.38 0.000176227698098 lefse_galaxy ## 5 g__Phascolarctobacterium 4.46 gut -4.18 0.000176227698098 lefse_galaxy ## 6 g__Faecalibacterium 4.47 gut -4.18 0.000176227698098 lefse_galaxy 10.8.3.4 Extracting results from XMAS2 results run_lefse (lefser R package) run_lefse2 (microbiomeMarker R package) get_lefse_R &lt;- function(datres, name = &quot;Rrun_lefse&quot;, LDA_names = &quot;lefse_R_LDA&quot;, LDA_cutoff = 2) { # datres = amplicon_xmas2_output # name = &quot;Rrun_lefse&quot; # LDA_cutoff = 2 col_names &lt;- c( &quot;TaxaID&quot;, &quot;Block&quot;, &quot;Enrichment&quot;, &quot;LDA_Score&quot;, &quot;EffectSize&quot;) lefse_R &lt;- datres %&gt;% dplyr::select(all_of(col_names)) %&gt;% dplyr::mutate(app_name = name) %&gt;% dplyr::filter(abs(LDA_Score) &gt;= LDA_cutoff) %&gt;% dplyr::arrange(LDA_Score) colnames(lefse_R)[which(colnames(lefse_R) == &quot;LDA_Score&quot;)] &lt;- LDA_names return(lefse_R) } amplicon_ps_genus_lefse_R &lt;- get_lefse_R( datres = amplicon_xmas2_output, name = &quot;Rrun_lefse&quot;, LDA_names = &quot;lefse_R_LDA&quot;) head(amplicon_ps_genus_lefse_R) ## TaxaID Block Enrichment lefse_R_LDA EffectSize app_name ## 1 g__Bacteroides 8_gut vs 9_tongue gut -5.432232 7.205788 Rrun_lefse ## 2 g__Clostridiales_unclassified 8_gut vs 9_tongue gut -4.759647 6.284851 Rrun_lefse ## 3 g__Lachnospira 8_gut vs 9_tongue gut -4.386386 5.273986 Rrun_lefse ## 4 g__Ruminococcaceae_unclassified 8_gut vs 9_tongue gut -4.249730 4.861141 Rrun_lefse ## 5 g__Parabacteroides 8_gut vs 9_tongue gut -3.750139 2.441149 Rrun_lefse ## 6 g__Roseburia 8_gut vs 9_tongue gut -3.678465 3.643739 Rrun_lefse amplicon_ps_genus_lefse_R2 &lt;- get_lefse_R( datres = amplicon_xmas2_output2, name = &quot;Rrun_lefse2&quot;, LDA_names = &quot;lefse_R2_LDA&quot;) head(amplicon_ps_genus_lefse_R2) ## TaxaID Block Enrichment lefse_R2_LDA EffectSize app_name ## 1 g__Bacteroides 8_gut vs 9_tongue gut -5.725726 7.205788 Rrun_lefse2 ## 2 g__Clostridiales_unclassified 8_gut vs 9_tongue gut -5.042318 6.284851 Rrun_lefse2 ## 3 g__Lachnospira 8_gut vs 9_tongue gut -4.782143 5.273986 Rrun_lefse2 ## 4 g__Ruminococcaceae_unclassified 8_gut vs 9_tongue gut -4.609025 4.861141 Rrun_lefse2 ## 5 g__Blautia 8_gut vs 9_tongue gut -4.137049 3.692692 Rrun_lefse2 ## 6 g__Faecalibacterium 8_gut vs 9_tongue gut -4.126933 3.805851 Rrun_lefse2 Zeybel_ps_species_lefse_R &lt;- get_lefse_R( datres = MGS_xmas2_output, name = &quot;Rrun_lefse&quot;, LDA_names = &quot;lefse_R_LDA&quot;) head(Zeybel_ps_species_lefse_R) ## TaxaID Block Enrichment lefse_R_LDA EffectSize app_name ## 1 s__Butyricimonas_virosa 12_Mild vs 12_Moderate Moderate 2.361748 1.668501 Rrun_lefse ## 2 s__Bacteroides_salyersiae 12_Mild vs 12_Moderate Moderate 2.498556 1.573816 Rrun_lefse ## 3 s__Bacteroides_thetaiotaomicron 12_Mild vs 12_Moderate Moderate 3.135202 2.775490 Rrun_lefse ## 4 s__Bacteroides_clarus 12_Mild vs 12_Moderate Moderate 3.203239 2.331714 Rrun_lefse ## 5 s__Bacteroides_coprocola 12_Mild vs 12_Moderate Moderate 3.308286 1.367262 Rrun_lefse ## 6 s__Bacteroides_intestinalis 12_Mild vs 12_Moderate Moderate 3.314354 1.184353 Rrun_lefse Zeybel_ps_species_lefse_R2 &lt;- get_lefse_R( datres = MGS_xmas2_output2, name = &quot;Rrun_lefse2&quot;, LDA_names = &quot;lefse_R2_LDA&quot;) head(Zeybel_ps_species_lefse_R2) ## TaxaID Block Enrichment lefse_R2_LDA EffectSize app_name ## 1 s__Butyricimonas_virosa 12_Mild vs 12_Moderate Moderate 2.696270 1.668501 Rrun_lefse2 ## 2 s__Bacteroides_salyersiae 12_Mild vs 12_Moderate Moderate 2.746477 1.573816 Rrun_lefse2 ## 3 s__Bacteroides_clarus 12_Mild vs 12_Moderate Moderate 3.343177 2.331714 Rrun_lefse2 ## 4 s__Bacteroides_thetaiotaomicron 12_Mild vs 12_Moderate Moderate 3.534826 2.775490 Rrun_lefse2 ## 5 s__Bacteroides_intestinalis 12_Mild vs 12_Moderate Moderate 3.545413 1.184353 Rrun_lefse2 ## 6 s__Bacteroides_coprocola 12_Mild vs 12_Moderate Moderate 3.630955 1.367262 Rrun_lefse2 10.8.4 Comparison of lefse-conda with XMAS2 10.8.4.1 Number of features reported as significant amplicon_ps_genus_lefse plot_signif_taxa_num &lt;- function(dat1, dat2, dat3, dat4) { # dat1 = amplicon_ps_genus_lefse_conda # dat2 = amplicon_ps_genus_lefse_galaxy # dat3 = amplicon_ps_genus_lefse_R # dat4 = amplicon_ps_genus_lefse_R2 combined_outputs &lt;- dplyr::bind_rows(dat1, dat2, dat3, dat4) %&gt;% dplyr::mutate(LDA = coalesce(lefse_conda_LDA, lefse_galaxy_LDA, lefse_R_LDA, lefse_R2_LDA)) pl &lt;- combined_outputs %&gt;% dplyr::count(app_name) %&gt;% ggplot(aes(app_name, n)) + geom_col() + geom_label(aes(label = n)) + ggtitle(&#39;Number of significiant features identified by the different applications using lefse&#39;) return(pl) } plot_signif_taxa_num(dat1 = amplicon_ps_genus_lefse_conda, dat2 = amplicon_ps_genus_lefse_galaxy, dat3 = amplicon_ps_genus_lefse_R, dat4 = amplicon_ps_genus_lefse_R2) Figure 10.8: Number of significiant features identified by the different applications using lefse (16s) Zeybel_ps_species_lefse plot_signif_taxa_num(dat1 = Zeybel_ps_species_lefse_conda, dat2 = Zeybel_ps_species_lefse_galaxy, dat3 = Zeybel_ps_species_lefse_R, dat4 = Zeybel_ps_species_lefse_R2) Figure 10.9: Number of significiant features identified by the different applications using lefse (MGS) 10.8.4.2 Overlap of features reported as significant amplicon_ps_genus_lefse plot_signif_taxa_venn &lt;- function(dat1, dat2, dat3, dat4) { # dat1 = amplicon_ps_genus_lefse_conda # dat2 = amplicon_ps_genus_lefse_galaxy # dat3 = amplicon_ps_genus_lefse_R # dat4 = amplicon_ps_genus_lefse_R2 set1 = dat1$TaxaID set2 = dat2$TaxaID set3 = dat3$TaxaID set4 = dat4$TaxaID grid.newpage() venn_object &lt;- venn.diagram( x = list(set1, set2, set3, set4), category.names = c(&quot;lefse-conda&quot;, &quot;lefse-galaxy&quot;, &quot;run_lefse(lefser)&quot;, &quot;run_lefse2(microbiomeMarker)&quot;), filename = NULL ) grid.draw(venn_object) } plot_signif_taxa_venn(dat1 = amplicon_ps_genus_lefse_conda, dat2 = amplicon_ps_genus_lefse_galaxy, dat3 = amplicon_ps_genus_lefse_R, dat4 = amplicon_ps_genus_lefse_R2) Figure 10.10: Venn (16s) Zeybel_ps_species_lefse plot_signif_taxa_venn(dat1 = Zeybel_ps_species_lefse_conda, dat2 = Zeybel_ps_species_lefse_galaxy, dat3 = Zeybel_ps_species_lefse_R, dat4 = Zeybel_ps_species_lefse_R2) Figure 10.11: Venn (MGS) 10.8.4.3 LDA scores’ comparison LDA scores of the 14 overlapping features are similar. amplicon_ps_genus_lefse amplicon_joint_output &lt;- purrr::reduce( .x = list(amplicon_ps_genus_lefse_conda, amplicon_ps_genus_lefse_galaxy, amplicon_ps_genus_lefse_R, amplicon_ps_genus_lefse_R2), .f = ~ inner_join(.x, .y, by = &quot;TaxaID&quot;)) %&gt;% dplyr::select(TaxaID, lefse_conda_LDA, lefse_galaxy_LDA, lefse_R_LDA, lefse_R2_LDA) amplicon_joint_output ## # A tibble: 28 × 5 ## TaxaID lefse_conda_LDA lefse_galaxy_LDA lefse_R_LDA lefse_R2_LDA ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 g__Bacteroides -5.47 -5.46 -5.43 -5.73 ## 2 g__Ruminococcaceae_unclassified -4.46 -4.41 -4.25 -4.61 ## 3 g__Lachnospira -4.36 -4.38 -4.39 -4.78 ## 4 g__Faecalibacterium -4.20 -4.18 -3.68 -4.13 ## 5 g__Phascolarctobacterium -4.15 -4.18 -3.59 -4.05 ## 6 g__Clostridiales_unclassified -4.03 -4.06 -4.76 -5.04 ## 7 g__Oscillospira -3.87 -3.89 -3.64 -4.11 ## 8 g__Rikenellaceae_unclassified -3.87 -3.91 2.15 -3.64 ## 9 g__Blautia -3.74 -3.76 -3.63 -4.14 ## 10 g__Roseburia -3.71 -3.62 -3.68 -4.09 ## # … with 18 more rows Zeybel_ps_species_lefse MGS_joint_output &lt;- purrr::reduce( .x = list(Zeybel_ps_species_lefse_conda, Zeybel_ps_species_lefse_galaxy, Zeybel_ps_species_lefse_R, Zeybel_ps_species_lefse_R2), .f = ~ inner_join(.x, .y, by = &quot;TaxaID&quot;)) %&gt;% dplyr::select(TaxaID, lefse_conda_LDA, lefse_galaxy_LDA, lefse_R_LDA, lefse_R2_LDA) MGS_joint_output ## # A tibble: 11 × 5 ## TaxaID lefse_conda_LDA lefse_galaxy_LDA lefse_R_LDA lefse_R2_LDA ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 s__Butyricimonas_virosa 2.46 2.82 2.36 2.70 ## 2 s__Bacteroides_salyersiae 2.47 3.16 2.50 2.75 ## 3 s__Bacteroides_clarus 3.07 3.29 3.20 3.34 ## 4 s__Bacteroides_thetaiotaomicron 3.26 3.28 3.14 3.53 ## 5 s__Bacteroides_coprocola 3.28 3.24 3.31 3.63 ## 6 s__Bacteroides_intestinalis 3.32 3.31 3.31 3.55 ## 7 s__Bacteroides_cellulosilyticus 3.41 3.36 3.36 3.81 ## 8 s__Bacteroides_eggerthii 3.52 3.59 3.38 3.76 ## 9 s__Parabacteroides_merdae 3.59 3.68 3.54 3.74 ## 10 s__Barnesiella_intestinihominis 3.68 3.72 3.63 3.96 ## 11 s__Prevotella_sp_CAG_520 4.04 4.26 4.56 4.53 10.8.4.3.1 XMAS2 LDA scores vs lefse-conda LDA scores 10.8.4.3.1.1 amplicon_ps_genus_lefse run_lefse (lefser R package) vs lefse-conda amplicon_joint_output %&gt;% ggplot(aes(lefse_conda_LDA, lefse_R_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse&quot;) Figure 10.12: Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse (16s) run_lefse2 (microbiomeMarker R package) vs lefse-conda amplicon_joint_output %&gt;% ggplot(aes(lefse_conda_LDA, lefse_R2_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse2&quot;) Figure 10.13: Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse2 (16s) 10.8.4.3.1.2 Zeybel_ps_species_lefse run_lefse (lefser R package) vs lefse-conda MGS_joint_output %&gt;% ggplot(aes(lefse_conda_LDA, lefse_R_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse&quot;) Figure 10.14: Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse (MGS) run_lefse2 (microbiomeMarker R package) vs lefse-conda MGS_joint_output %&gt;% ggplot(aes(lefse_conda_LDA, lefse_R2_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse2&quot;) Figure 10.15: Comparison of LDA scores of features reported as significant by both lefse-conda and run_lefse2 (MGS) 10.8.4.3.2 XMAS2 LDA scores vs lefse-galaxy LDA scores 10.8.4.3.2.1 amplicon_ps_genus_lefse run_lefse (lefser R package) vs lefse-galaxy amplicon_joint_output %&gt;% ggplot(aes(lefse_galaxy_LDA, lefse_R_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse&quot;) Figure 10.16: Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse (16s) run_lefse2 (microbiomeMarker R package) vs lefse-galaxy amplicon_joint_output %&gt;% ggplot(aes(lefse_galaxy_LDA, lefse_R2_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse2&quot;) Figure 10.17: Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse2 (16s) 10.8.4.3.2.2 Zeybel_ps_species_lefse run_lefse (lefser R package) vs lefse-galaxy MGS_joint_output %&gt;% ggplot(aes(lefse_galaxy_LDA, lefse_R_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse&quot;) Figure 10.18: Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse (MGS) run_lefse2 (microbiomeMarker R package) vs lefse-galaxy MGS_joint_output %&gt;% ggplot(aes(lefse_galaxy_LDA, lefse_R2_LDA)) + geom_point(size = 3, shape = 1) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;) + ggtitle(&quot;Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse2&quot;) Figure 10.19: Comparison of LDA scores of features reported as significant by both lefse-galaxy and run_lefse2 (MGS) Results: The overlap between run_lefse2 (microbiomeMarker R package) and lefse-conda or lefse-galaxy have the similar LDA scores. However, the overlap between run_lefse (lefser R package) and lefse-conda or lefse-galaxy seem have slightly different LDA scores. 10.8.4.3.3 Differences bewteen XMAS2 LDA scores and lefse-conda setdiff(amplicon_ps_genus_lefse_conda$TaxaID, amplicon_ps_genus_lefse_R$TaxaID) ## [1] &quot;g__Lachnospiraceae_unclassified&quot; &quot;g__Akkermansia&quot; &quot;g__Enterobacteriaceae_unclassified&quot; ## [4] &quot;g__Paraprevotella&quot; &quot;g__Comamonadaceae_unclassified&quot; &quot;g__Desulfovibrio&quot; ## [7] &quot;g__Erysipelotrichaceae_unclassified&quot; &quot;g__Bilophila&quot; &quot;g__Clostridium&quot; ## [10] &quot;g__Turicibacter&quot; &quot;g__Clostridiaceae_unclassified&quot; &quot;g__Anaerococcus&quot; ## [13] &quot;g__Holdemania&quot; &quot;g__Alcaligenaceae_unclassified&quot; &quot;g__Mogibacterium&quot; ## [16] &quot;g__Bacilli_unclassified&quot; &quot;g__Tannerella&quot; &quot;g__Capnocytophaga&quot; ## [19] &quot;g__Lautropia&quot; &quot;g___Weeksellaceae__unclassified&quot; &quot;g__Atopobium&quot; ## [22] &quot;g__Parvimonas&quot; &quot;g__Granulicatella&quot; &quot;g___Mogibacteriaceae__unclassified&quot; ## [25] &quot;g__Bulleidia&quot; &quot;g__Neisseriaceae_unclassified&quot; &quot;g__Aggregatibacter&quot; ## [28] &quot;g__Oribacterium&quot; &quot;g__Campylobacter&quot; &quot;g__Gemellaceae_unclassified&quot; ## [31] &quot;g__Rothia&quot; setdiff(amplicon_ps_genus_lefse_conda$TaxaID, amplicon_ps_genus_lefse_R2$TaxaID) ## [1] &quot;g__Lachnospiraceae_unclassified&quot; &quot;g__Akkermansia&quot; &quot;g__Enterobacteriaceae_unclassified&quot; ## [4] &quot;g__Paraprevotella&quot; &quot;g__Comamonadaceae_unclassified&quot; &quot;g__Desulfovibrio&quot; ## [7] &quot;g__Erysipelotrichaceae_unclassified&quot; &quot;g__Bilophila&quot; &quot;g__Clostridium&quot; ## [10] &quot;g__Turicibacter&quot; &quot;g__Clostridiaceae_unclassified&quot; &quot;g__Anaerococcus&quot; ## [13] &quot;g__Holdemania&quot; &quot;g__Alcaligenaceae_unclassified&quot; &quot;g__Mogibacterium&quot; ## [16] &quot;g__Bacilli_unclassified&quot; &quot;g__Tannerella&quot; &quot;g__Capnocytophaga&quot; ## [19] &quot;g__Lautropia&quot; &quot;g___Weeksellaceae__unclassified&quot; &quot;g__Atopobium&quot; ## [22] &quot;g__Parvimonas&quot; &quot;g__Granulicatella&quot; &quot;g___Mogibacteriaceae__unclassified&quot; ## [25] &quot;g__Bulleidia&quot; &quot;g__Neisseriaceae_unclassified&quot; &quot;g__Aggregatibacter&quot; ## [28] &quot;g__Oribacterium&quot; &quot;g__Campylobacter&quot; &quot;g__Gemellaceae_unclassified&quot; ## [31] &quot;g__Rothia&quot; 10.9 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## ALDEx2 1.30.0 2022-11-01 [1] Bioconductor ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## compositions 2.0-4 2022-01-05 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## DEoptimR 1.0-10 2022-01-03 [1] CRAN (R 4.1.2) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools * 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## formatR 1.11 2021-06-01 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## futile.logger * 1.4.3 2016-07-10 [1] CRAN (R 4.1.0) ## futile.options 1.0.1 2018-04-20 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lambda.r 1.2.4 2019-09-18 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## LOCOM 1.1 2022-08-05 [1] Github (yijuanhu/LOCOM@c181e0f) ## magrittr * 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## mbzinb 0.2 2022-03-16 [1] local ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 4.1.0) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qvalue 2.26.0 2021-10-26 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RAIDA 1.0 2022-03-14 [1] local ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RcppZiggurat 0.1.6 2020-10-20 [1] CRAN (R 4.1.0) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr * 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## Rfast 2.0.6 2022-02-16 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 4.1.0) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## usethis * 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VennDiagram * 1.7.3 2022-04-12 [1] CRAN (R 4.1.2) ## viridis * 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite * 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["visualization-5.html", "Chapter 11 Visualization 11.1 Loading Packages 11.2 Importing Data 11.3 plot_boxplot 11.4 plot_barplot 11.5 plot_dotplot 11.6 plot_correlation_boxplot 11.7 plot_correlation_density 11.8 plot_Ordination 11.9 plot_ggbiplot 11.10 plot_corrplot 11.11 plot_2DA_venn 11.12 plot the DA results from the significant taxa by double barplot 11.13 plot_stacked_bar_XIVZ 11.14 plot_StackBarPlot 11.15 Color Palettes 11.16 Ordination plots with ggplot2 11.17 Systematic Information", " Chapter 11 Visualization XMAS 2.0 provides mulitple functions for visualization. For instance, using plot_volcano to display the results of differential analysis. Outline of this Chapter: Loading Packages Importing Data plot_boxplot plot_barplot plot_dotplot plot_correlation_boxplot plot_correlation_density plot_Ordination plot_ggbiplot plot_corrplot plot_2DA_venn plot the DA results from the significant taxa by double barplot plot_stacked_bar_XIVZ plot_StackBarPlot Color Palettes Ordination plots with ggplot2 11.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) 11.2 Importing Data data(&quot;amplicon_ps&quot;) amplicon_ps_rarefy &lt;- norm_rarefy(object = amplicon_ps, size = 1114) amplicon_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 2308 taxa and 34 samples ] ## sample_data() Sample Data: [ 34 samples by 8 sample variables ] ## tax_table() Taxonomy Table: [ 2308 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 2308 tips and 2306 internal nodes ] 11.3 plot_boxplot calculate alpha diversity dat_alpha &lt;- run_alpha_diversity(ps = amplicon_ps_rarefy, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) head(dat_alpha) ## TempRowNames SampleType Year Month Day Subject ReportedAntibioticUsage DaysSinceExperimentStart Description Observed ## 1 L1S140 gut 2008 10 28 2 Yes 0 2_Fece_10_28_2008 27 ## 2 L1S208 gut 2009 1 20 2 No 84 2_Fece_1_20_2009 40 ## 3 L1S8 gut 2008 10 28 1 Yes 0 1_Fece_10_28_2008 19 ## 4 L1S281 gut 2009 4 14 2 No 168 2_Fece_4_14_2009 60 ## 5 L3S242 right palm 2008 10 28 1 Yes 0 1_R_Palm_10_28_2008 16 ## 6 L2S309 left palm 2009 1 20 2 No 84 2_L_Palm_1_20_2009 12 ## Chao1 se.chao1 Shannon ## 1 74.50 30.70970 3.126005 ## 2 148.75 62.86107 3.303186 ## 3 54.00 25.57190 2.688337 ## 4 256.00 93.42352 3.664947 ## 5 42.00 19.97805 2.692311 ## 6 57.00 30.06061 2.082828 plot_boxplot has many parameters, and help you enjoy it. single measure plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) Figure 11.1: boxplot(single measure) single measure with significant results plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) Figure 11.2: boxplot(single measure with significant results) single measure with significant results of pairwises plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) Figure 11.3: boxplot(single measure with significant results of pairwises) single measure with significant results of pairwises and outlier plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;)), outlier = TRUE) Figure 11.4: boxplot(single measure with significant results of pairwises and outlier) single measure with significant results of ref_group plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) Figure 11.5: boxplot(single measure with significant results of ref_group) multiple measures plot_boxplot(data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), ref_group = &quot;gut&quot;, method = &quot;wilcox.test&quot;, outlier = TRUE) Figure 11.6: boxplot(multiple measure with group number) show group_number in the x-axis break plot_boxplot(data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), do_test = TRUE, method = &quot;wilcox.test&quot;, group_number = TRUE) Figure 11.7: boxplot(group_number) 11.4 plot_barplot plot_barplot has many parameters, and help you enjoy it. single measure plot_barplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) Figure 11.8: barplot(single measure) single measure with significant results plot_barplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) Figure 11.9: barplot(single measure with significant results) single measure with significant results of pairwises plot_barplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) Figure 11.10: barplot(single measure with significant results of pairwises) single measure with significant results of ref_group plot_barplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) Figure 11.11: barplot(single measure with significant results of ref_group) multiple index plot_barplot(data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, do_test = TRUE, method = &quot;wilcox.test&quot;) Figure 11.12: barplot(multiple index) show group_number in the x-axis break plot_barplot(data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), do_test = TRUE, method = &quot;wilcox.test&quot;, group_number = TRUE) Figure 11.13: barplot(group_number) 11.5 plot_dotplot plot_dotplot has many parameters, and help you enjoy it. single measure plot_dotplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = FALSE) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.14: dotplot(single measure) single measure with significant results plot_dotplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.15: dotplot(single measure with significant results) single measure with significant results of pairwises plot_dotplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;tongue&quot;))) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.16: dotplot(single measure with significant results of pairwises) single measure with significant results of ref_group plot_dotplot( data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.17: dotplot(single measure with significant results of ref_group) dot size and median size plot_dotplot( data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, ref_group = &quot;gut&quot;, dotsize = 0.5, mediansize = 2) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.18: dotplot(dot size and median size) multiple index plot_dotplot( data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, do_test = TRUE, method = &quot;wilcox.test&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.19: dotplot(multiple index) multiple index with errorbar plot_dotplot( data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, do_test = TRUE, show_type = &quot;errorbar&quot;, method = &quot;wilcox.test&quot;) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.20: dotplot(multiple index errorbar) show group_number in the x-axis break plot_dotplot(data = dat_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;SampleType&quot;, group_names = c(&quot;gut&quot;, &quot;right palm&quot;, &quot;tongue&quot;), group_color = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), show_type = &quot;errorbar&quot;, do_test = TRUE, method = &quot;wilcox.test&quot;, group_number = TRUE) ## Bin width defaults to 1/30 of the range of the data. Pick better value with `binwidth`. Figure 11.21: dotplot(group_number) 11.6 plot_correlation_boxplot Help you enjoy plot_correlation_boxplot. plot_correlation_boxplot( data = dat_alpha, x_index = &quot;Chao1&quot;, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;) Figure 11.22: correlation with boxplot 11.7 plot_correlation_density Help you enjoy plot_correlation_density. plot_correlation_density( data = dat_alpha, x_index = &quot;Chao1&quot;, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;) Figure 11.23: correlation with density 11.8 plot_Ordination plot_Ordination provides too many parameters for users to display the ordination results by using ggplot2 format. Here is the ordinary pattern. data(&quot;dada2_ps&quot;) # step1: Removing samples of specific group in phyloseq-class object dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;) # step2: Rarefying counts in phyloseq-class object dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) # step3: Extracting specific taxa phyloseq-class object dada2_ps_rare_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;, absolute = TRUE) # step4: Aggregating low relative abundance or unclassified taxa into others # dada2_ps_genus_LRA &lt;- summarize_LowAbundance_taxa(ps = dada2_ps_rare_genus, # cutoff = 10, # unclass = TRUE) # step4: Filtering the low relative abundance or unclassified taxa by the threshold dada2_ps_genus_filter &lt;- run_filter(ps = dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) # step5: Trimming the taxa with low occurrence less than threshold dada2_ps_genus_filter_trim &lt;- run_trim(object = dada2_ps_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] ordination_PCA &lt;- run_ordination( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCA&quot;) names(ordination_PCA) ## [1] &quot;fit&quot; &quot;dat&quot; &quot;explains&quot; &quot;eigvalue&quot; &quot;PERMANOVA&quot; &quot;axis_taxa_cor&quot; Ordinary pattern plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;) Figure 11.24: plot_Ordination (Ordinary pattern) plot with SampleID and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse&quot;, sample = TRUE) Figure 11.25: plot_Ordination (Ordinary pattern with SampleID) ellipse with 95% confidence interval plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_CI&quot;, sample = TRUE) Figure 11.26: plot_Ordination (ellipse with 95% confidence interval) ellipse with groups plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_groups&quot;, sample = TRUE) Figure 11.27: plot_Ordination (ellipse with groups) ellipse with border line plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_line&quot;, sample = TRUE) Figure 11.28: plot_Ordination (ellipse with border line) plot with SampleID and sideboxplot and setting group colors plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 11.29: plot_Ordination (Ordinary pattern with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 2 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_CI&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 11.30: plot_Ordination (ellipse_CI with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 3 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_groups&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 11.31: plot_Ordination (ellipse_groups with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors 4 plot_Ordination(ResultList = ordination_PCA, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), circle_type = &quot;ellipse_line&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 11.32: plot_Ordination (ellipse_line with SampleID sideboxplot) plot with SampleID and sideboxplot and setting group colors and shape data(&quot;amplicon_ps&quot;) amplicon_ps_genus &lt;- summarize_taxa(ps = amplicon_ps, taxa_level = &quot;Genus&quot;) amplicon_res_ordination &lt;- run_ordination( ps = amplicon_ps_genus, group = &quot;SampleType&quot;, method = &quot;PCoA&quot;) plot_Ordination(ResultList = amplicon_res_ordination, group = &quot;SampleType&quot;, shape_column = &quot;ReportedAntibioticUsage&quot;, shape_values = c(16, 17), circle_type = &quot;ellipse_line&quot;, sidelinechart = FALSE, sideboxplot = TRUE, sample = TRUE) Figure 11.33: plot_Ordination (ellipse_line with SampleID sideboxplot) 11.9 plot_ggbiplot biplot with topN dominant taxa plot_ggbiplot(ResultList = ordination_PCA, group = &quot;Group&quot;, group_color = c(&quot;blue&quot;, &quot;red&quot;), topN = 5, ellipse = TRUE, labels = &quot;SampleID&quot;) Figure 11.34: plot_ggbiplot (biplot) 11.10 plot_corrplot dada2_beta &lt;- run_beta_diversity(ps = dada2_ps_rarefy, method = &quot;bray&quot;) plot_distance_corrplot(datMatrix = dada2_beta$BetaDistance) Figure 11.35: plot_corrplot (distance) 11.11 plot_2DA_venn da_wilcox &lt;- run_wilcox( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) da_ttest &lt;- run_ttest( ps = dada2_ps_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) DA_venn_res &lt;- plot_2DA_venn( daTest1 = da_wilcox, daTest2 = da_ttest, datType1 = &quot;AA vs BB(wilcox)&quot;, datType2 = &quot;AA vs BB(t-test)&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), Pvalue_name = &quot;Pvalue&quot;, logFc_name1 = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, logFc_name2 = &quot;Log2FoldChange (Mean)\\nAA_vs_BB&quot;, Pvalue_cutoff = 0.8, logFC_cutoff = 0.2) DA_venn_res$pl Figure 11.36: plot_2DA_venn (wilcox vs t_test) 11.12 plot the DA results from the significant taxa by double barplot data(&quot;amplicon_ps&quot;) DA_res &lt;- run_wilcox( ps = amplicon_ps, taxa_level = &quot;Family&quot;, group = &quot;SampleType&quot;, group_names = c(&quot;tongue&quot;, &quot;gut&quot;)) plot_double_barplot(data = DA_res, x_index = &quot;Log2FoldChange (Rank)\\ntongue_vs_gut&quot;, x_index_cutoff = 1, y_index = &quot;AdjustedPvalue&quot;, y_index_cutoff = 0.05) Figure 11.37: double barplot for DA results 11.13 plot_stacked_bar_XIVZ Minimum usage: plot in relative abundance plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;) Figure 11.38: plot_stacked_bar_XIVZ (test1) Set feature parameter to show feature information plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, feature = &quot;Group&quot;) Figure 11.39: plot_stacked_bar_XIVZ (test2) Pass ordered sample names to order parameter to plot in specific order metadata &lt;- phyloseq::sample_data(dada2_ps_rarefy) %&gt;% data.frame() %&gt;% dplyr::arrange(Group) plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, feature = &quot;Group&quot;, order = rownames(metadata)) Figure 11.40: plot_stacked_bar_XIVZ (test3) Use facet_wrap(vars(), scale=“free”) funciton to facet stacked barplot plot_stacked_bar_XIVZ(phyloseq = dada2_ps_rarefy, level = &quot;Family&quot;, relative_abundance = TRUE, order = rownames(metadata)) + facet_wrap(vars(Group), scale=&quot;free&quot;) Figure 11.41: plot_stacked_bar_XIVZ (test4) 11.14 plot_StackBarPlot plot_StackBarPlot provides too many parameters for users to display the Stacked barplot of microbial composition by using ggplot2 format. Here is the ordinary pattern. More details to see help(plot_StackBarPlot). Ordinary pattern plot_StackBarPlot(ps = amplicon_ps_rarefy, taxa_level=&quot;Phylum&quot;) Figure 11.42: plot_StackBarPlot(Ordinary pattern) Metadata with SampleType phenotype plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;SampleType&quot;) ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.43: plot_StackBarPlot (Metadata with group) Metadata with SampleType phenotype in cluster mode plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;SampleType&quot;, cluster = TRUE) ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.44: plot_StackBarPlot (Metadata with group in cluster mode) Metadata with SampleType phenotype in facet plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;SampleType&quot;, facet = TRUE) Figure 11.45: plot_StackBarPlot (Metadata with group in facet) Metadata with two groups to display samples plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, subgroup = &quot;Year&quot;) ## [1] &quot;This palatte have 19 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.46: plot_StackBarPlot (Metadata with two groups ot display samples) Metadata with three groups to display samples plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, subgroup = c(&quot;Year&quot;, &quot;Month&quot;)) ## [1] &quot;This palatte have 19 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.47: plot_StackBarPlot (Metadata with three groups ot display samples) Order SampleID by orderSample parameter plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, orderSample = phyloseq::sample_names(amplicon_ps)[1:10]) ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.48: Stacked barplot with Ordered Samples Hide sample names by sample_label parameter plot_StackBarPlot( ps = amplicon_ps_rarefy, taxa_level = &quot;Order&quot;, group = &quot;SampleType&quot;, orderSample = phyloseq::sample_names(amplicon_ps)[1:10], sample_label = FALSE) ## [1] &quot;This palatte have 20 colors!&quot; Figure 11.49: Stacked barplot with hiding Samples’ names 11.15 Color Palettes 11.15.1 Wes Anderson Palettes Wes Anderson Palettes is from wesanderson package and we have integrated it into XMAS2.0. data(&quot;amplicon_ps&quot;) dat_alpha &lt;- run_alpha_diversity(ps = amplicon_ps, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;)) # origin pl_origin &lt;- plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;left palm&quot;)), method = &quot;wilcox.test&quot;) # Wes Anderson Palettes pal &lt;- wes_palette(name = &quot;GrandBudapest1&quot;, 4, type = &quot;discrete&quot;) pl_wes &lt;- plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, group_color = pal, do_test = TRUE, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;left palm&quot;)), method = &quot;wilcox.test&quot;) cowplot::plot_grid(pl_origin, pl_wes, align = &quot;hv&quot;, labels = c(&quot;Origin&quot;, &quot;Wes Anderson&quot;)) Figure 11.50: Wes Anderson Palettes 11.15.2 useMyCol pal &lt;- useMyCol(platte = &quot;stallion&quot;, n = length(unique(dat_alpha$SampleType))) ## [1] &quot;This palatte have 20 colors!&quot; plot_boxplot(data = dat_alpha, y_index = &quot;Shannon&quot;, group = &quot;SampleType&quot;, do_test = TRUE, group_color = pal, cmp_list = list(c(&quot;gut&quot;, &quot;right palm&quot;), c(&quot;gut&quot;, &quot;left palm&quot;)), method = &quot;wilcox.test&quot;) Figure 11.51: useMyCol Palettes 11.16 Ordination plots with ggplot2 11.16.1 principal components analysis with the iris data set ord &lt;- prcomp(iris[, 1:4]) ggord(ord, iris$Species, cols = c(&#39;purple&#39;, &#39;orange&#39;, &#39;blue&#39;)) + scale_shape_manual(&#39;Groups&#39;, values = c(1, 2, 3)) + theme_classic() + theme(legend.position = &#39;top&#39;) Figure 11.52: principal components analysis 11.16.2 multiple correspondence analysis with the tea dataset data(tea, package = &#39;FactoMineR&#39;) tea &lt;- tea[, c(&#39;Tea&#39;, &#39;sugar&#39;, &#39;price&#39;, &#39;age_Q&#39;, &#39;sex&#39;)] ord &lt;- FactoMineR::MCA(tea[, -1], graph = FALSE) ggord(ord, tea$Tea, parse = FALSE) # use parse = FALSE for labels with non alphanumeric characters Figure 11.53: multiple correspondence analysis 11.16.3 linear discriminant analysis ord &lt;- MASS::lda(Species ~ ., iris, prior = rep(1, 3)/3) ggord(ord, iris$Species) Figure 11.54: linear discriminant analysis 11.17 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## ALDEx2 1.30.0 2022-11-01 [1] Bioconductor ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## classInt 0.4-3 2020-04-07 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## compositions 2.0-4 2022-01-05 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## DEoptimR 1.0-10 2022-01-03 [1] CRAN (R 4.1.2) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools * 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## formatR 1.11 2021-06-01 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## futile.logger * 1.4.3 2016-07-10 [1] CRAN (R 4.1.0) ## futile.options 1.0.1 2018-04-20 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## ggVennDiagram 1.2.1 2022-04-13 [1] Github (gaospecial/ggVennDiagram@db6742d) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lambda.r 1.2.4 2019-09-18 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## LOCOM 1.1 2022-08-05 [1] Github (yijuanhu/LOCOM@c181e0f) ## magrittr * 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## mbzinb 0.2 2022-03-16 [1] local ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 4.1.0) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qvalue 2.26.0 2021-10-26 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RAIDA 1.0 2022-03-14 [1] local ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RcppZiggurat 0.1.6 2020-10-20 [1] CRAN (R 4.1.0) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr * 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## Rfast 2.0.6 2022-02-16 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## RVenn 1.1.0 2019-07-18 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## sf 1.0-7 2022-03-07 [1] CRAN (R 4.1.2) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 4.1.0) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## units 0.8-0 2022-02-05 [1] CRAN (R 4.1.2) ## usethis * 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VennDiagram * 1.7.3 2022-04-12 [1] CRAN (R 4.1.2) ## viridis * 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite * 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── "],["association-analysis.html", "Chapter 12 Association Analysis 12.1 Loading Packages 12.2 Importing Data 12.3 Spearman Correlation Analysis 12.4 Partial Correlation Analysis 12.5 Systematic Information", " Chapter 12 Association Analysis The potential relationships between microbiota and environmental factors such as clinical parameters are vital when scientists investigate the mechanism of diseases. Here, we identify the associations between them by using spearman correlation analysis. Outline of this Chapter: Loading Packages Importing Data Spearman Correlation Analysis Partial Correlation Analysis 12.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(pheatmap) 12.2 Importing Data The Zeybel_Gut is from (Zeybel et al. 2022), containing gut and oral microbiota. data(&quot;Zeybel_Gut&quot;) Zeybel_Gut_genus &lt;- summarize_taxa(ps = Zeybel_Gut, taxa_level = &quot;Genus&quot;) sample data in Zeybel_Gut object zeybel_metadata &lt;- sample_data(Zeybel_Gut_genus) %&gt;% data.frame() head(zeybel_metadata) ## Stage Metabolomics Proteomics GutMetagenomics OralMetagenomics LiverFatClass Gender AlcoholConsumption Smoker Age LF ## P101042 Before Send Send Send Send Mild Male No No 33 6.45000 ## P101076 Before Send Send Send Send Moderate Male No No 40 9.30000 ## P101095 Before Send Send Send Failed Sample Moderate Male No No 29 9.90000 ## P101084 Before Send Send Send Send Severe Male No No 45 18.15000 ## P101038 Before Send Send Send Send Moderate Female No No 43 15.93333 ## P101071 Before Send Send Send Send Moderate Male No Yes 48 8.10000 ## Sodium Potassium Creatinine Urea UA ALT AST GGT AP TB Albumin CK TC HDL LDL Triglycerides Glucose Insulin Weight BMI ## P101042 142 4.6 0.96 17 7.2 26 17 29 103 0.25 5.00 85 255 40 181 164 93 11.4 84.5 31.0 ## P101076 146 4.9 1.05 22 5.6 28 16 56 81 0.34 5.00 123 193 48 133 115 111 14.7 83.0 28.4 ## P101095 140 4.1 1.13 14 9.1 39 28 32 78 1.46 5.14 300 152 38 103 98 88 10.3 123.1 38.9 ## P101084 143 5.1 1.15 12 8.8 57 33 55 67 0.34 4.72 336 195 47 128 124 99 36.3 108.0 33.7 ## P101038 142 4.1 0.91 9 7.2 15 16 17 72 1.24 4.70 108 235 55 165 141 114 24.6 98.6 37.6 ## P101071 144 4.4 1.04 19 6.0 21 13 21 70 0.34 4.60 77 228 39 146 279 104 12.5 105.8 36.6 ## HR SBP DBP WC HC TFM TFFM TTBW LAFM LAFFM LATBW RAFM RAFFM RATBW LLFM LLFFM LLTBW RLFM RLFFM RLTBW ## P101042 101 120 70 100 109 13.9 32.0 44.8 1.3 3.6 44.8 1.2 3.6 44.8 3.4 10.9 44.8 3.4 11.1 44.8 ## P101076 73 120 70 95 100 11.4 34.4 46.4 1.0 3.9 46.4 1.0 3.8 46.4 3.1 10.6 46.4 3.3 10.6 46.4 ## P101095 73 110 70 118 128 23.8 43.2 61.5 2.7 5.0 61.5 2.3 5.1 61.5 4.8 15.5 61.5 5.5 15.2 61.5 ## P101084 74 130 80 115 120 21.3 38.7 53.4 2.0 4.4 53.4 1.8 4.4 53.4 5.1 12.7 53.4 5.0 12.8 53.4 ## P101038 85 130 80 100 124 23.4 28.9 52.0 3.1 2.9 52.0 2.9 2.8 52.0 8.6 8.7 52.0 8.7 8.7 52.0 ## P101071 78 110 70 115 115 20.6 37.2 51.7 1.9 4.4 51.7 1.7 4.4 51.7 5.4 12.3 51.7 5.6 12.2 51.7 colnames(zeybel_metadata) ## [1] &quot;Stage&quot; &quot;Metabolomics&quot; &quot;Proteomics&quot; &quot;GutMetagenomics&quot; &quot;OralMetagenomics&quot; &quot;LiverFatClass&quot; ## [7] &quot;Gender&quot; &quot;AlcoholConsumption&quot; &quot;Smoker&quot; &quot;Age&quot; &quot;LF&quot; &quot;Sodium&quot; ## [13] &quot;Potassium&quot; &quot;Creatinine&quot; &quot;Urea&quot; &quot;UA&quot; &quot;ALT&quot; &quot;AST&quot; ## [19] &quot;GGT&quot; &quot;AP&quot; &quot;TB&quot; &quot;Albumin&quot; &quot;CK&quot; &quot;TC&quot; ## [25] &quot;HDL&quot; &quot;LDL&quot; &quot;Triglycerides&quot; &quot;Glucose&quot; &quot;Insulin&quot; &quot;Weight&quot; ## [31] &quot;BMI&quot; &quot;HR&quot; &quot;SBP&quot; &quot;DBP&quot; &quot;WC&quot; &quot;HC&quot; ## [37] &quot;TFM&quot; &quot;TFFM&quot; &quot;TTBW&quot; &quot;LAFM&quot; &quot;LAFFM&quot; &quot;LATBW&quot; ## [43] &quot;RAFM&quot; &quot;RAFFM&quot; &quot;RATBW&quot; &quot;LLFM&quot; &quot;LLFFM&quot; &quot;LLTBW&quot; ## [49] &quot;RLFM&quot; &quot;RLFFM&quot; &quot;RLTBW&quot; otu table profile in Zeybel_Gut object zeybel_otu &lt;- otu_table(Zeybel_Gut_genus) %&gt;% data.frame() head(zeybel_otu) ## P101042 P101076 P101095 P101084 P101038 P101071 P101047 P101012 P101027 P101024 P101057 ## g__Absiella 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 ## g__Acidaminococcus 0.0000000 0.0012421 0.00e+00 0.0114403 0.0000000 0.0017583 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 ## g__Actinomyces 0.0000893 0.0003643 2.79e-05 0.0000000 0.0000000 0.0000926 0.0002638 0.0004858 0.00e+00 0.0000555 0.0006398 ## g__Adlercreutzia 0.0000000 0.0000000 0.00e+00 0.0002282 0.0000137 0.0000000 0.0000792 0.0003161 4.06e-05 0.0001708 0.0000000 ## g__Agathobaculum 0.0004688 0.0000000 1.84e-04 0.0006843 0.0001106 0.0000364 0.0006443 0.0000074 9.73e-05 0.0028784 0.0002393 ## g__Aggregatibacter 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 ## P101067 P101094 P101007 P101054 P101031 P101003 P101018 P101025 P101010 P101069 P101077 ## g__Absiella 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0002135 0.00e+00 0.0000000 0.0000000 ## g__Acidaminococcus 0.0132178 0.0000000 0.0159577 0.0012000 0.0000000 0.0000000 0.0000000 0.0009027 0.00e+00 0.0001482 0.0000000 ## g__Actinomyces 0.0002071 0.0000000 0.0002216 0.0000024 0.0313157 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000401 0.0002101 ## g__Adlercreutzia 0.0000000 0.0001777 0.0000000 0.0000245 0.0000000 0.0000000 0.0008641 0.0000000 0.00e+00 0.0000158 0.0001580 ## g__Agathobaculum 0.0000000 0.0020933 0.0001628 0.0007184 0.0000000 0.0002355 0.0000000 0.0061141 1.29e-05 0.0002268 0.0007352 ## g__Aggregatibacter 0.0000000 0.0000000 0.0000000 0.0000000 0.0152900 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 ## P101065 P101096 P101085 P101021 P101052 P101030 P101041 P101078 P101051 P101068 P101056 ## g__Absiella 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.00e+00 ## g__Acidaminococcus 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0002144 0.0000000 0.0000000 0.00e+00 0.00e+00 ## g__Actinomyces 0.0001259 0.0000000 0.0000000 0.0000000 1.44e-05 0.0000000 0.0000000 0.0000940 0.0000000 1.99e-05 0.00e+00 ## g__Adlercreutzia 0.0000000 0.0004234 0.0000000 0.0000000 0.00e+00 0.0003256 0.0000000 0.0000802 0.0000000 0.00e+00 0.00e+00 ## g__Agathobaculum 0.0004899 0.0007549 0.0020973 0.0001715 0.00e+00 0.0021537 0.0000000 0.0006245 0.0001612 2.74e-05 2.83e-05 ## g__Aggregatibacter 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.0000000 0.0000000 0.0000000 0.0000000 0.00e+00 0.00e+00 ## P101079 P101022 P101074 P101059 P101050 P101088 P101061 P101082 P101064 ## g__Absiella 0.0000000 0.0000000 0.0000000 0.0000000 0 0.0000000 0.0000000 0.0000000 0.0000000 ## g__Acidaminococcus 0.0000000 0.0000000 0.0141640 0.0029344 0 0.0000000 0.0000000 0.0030215 0.0000000 ## g__Actinomyces 0.0000000 0.0001212 0.0000113 0.0000000 0 0.0000000 0.0000299 0.0000174 0.0000093 ## g__Adlercreutzia 0.0000000 0.0000000 0.0004728 0.0000379 0 0.0002421 0.0000383 0.0000397 0.0000200 ## g__Agathobaculum 0.0008838 0.0005000 0.0000000 0.0025444 0 0.0022848 0.0005402 0.0013902 0.0011816 ## g__Aggregatibacter 0.0000000 0.0000000 0.0000000 0.0000000 0 0.0000000 0.0000000 0.0000000 0.0000000 Results: metadata has 42 continuous variables 12.3 Spearman Correlation Analysis To identify the association between individual genus and continuous variables, we perform the correlation analysis with “spearman”, “pearson” and “kendall” method to calculate the test results. Here, the results have four statistical indexes: statistical, Rho, Pvalue and AdjustedPvalue and we also provide the plot_correlation_heatmap to display the results. Calculation dat_cor &lt;- run_cor(ps = Zeybel_Gut_genus, columns = c(&quot;LF&quot;, &quot;Sodium&quot;, &quot;Potassium&quot;, &quot;Creatinine&quot;, &quot;Urea&quot;, &quot;RLTBW&quot;), method = &quot;spearman&quot;) head(dat_cor) ## Phenotype TaxaID Statistic Rho Pvalue AdjustedPvalue ## 1 LF g__Absiella 12102.49 0.01932697 0.9033074 0.9808251 ## 2 LF g__Acidaminococcus 11509.50 0.06737739 0.6715949 0.9297863 ## 3 LF g__Actinomyces 11349.08 0.08037634 0.6128579 0.9297863 ## 4 LF g__Adlercreutzia 11028.15 0.10638089 0.5025215 0.9297863 ## 5 LF g__Agathobaculum 13752.81 -0.11440021 0.4706651 0.9297863 ## 6 LF g__Aggregatibacter 13533.57 -0.09663486 0.5426616 0.9297863 visualization plot_correlation_heatmap( data = dat_cor, x_index = &quot;Rho&quot;, x_index_cutoff = 0, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, cellwidth = 35, cellheight = 10, fontsize_number = 15) Figure 12.1: Spearman Correlation Coefficient Results: the color of cell shows the size of Rho. red: positive blue: negative the asterisk of cell shows the significance: * for [0.05, 0.01] ** for less than 0.01 12.4 Partial Correlation Analysis To identify the association between individual genus and continuous variables, while controlling third variables, we perform the partial correlation analysis with “spearman”, “pearson” and “kendall” method to calculate the test results. Here, the results have four statistical indexes: statistical, Rho, Pvalue and AdjustedPvalue and we also provide the plot_correlation_heatmap to display the results. When comparing the Spearman Correlation Analysis, Partial Correlation Analysis has adjusted effects from the confounding factors as third variables. For instance, we should pay attention to the age or gender etc, which could affect the test results when we do some association analysis. Calculation dat_cor_partial &lt;- run_partial_cor(ps = Zeybel_Gut_genus, columns = c(&quot;LF&quot;, &quot;Sodium&quot;, &quot;Potassium&quot;, &quot;Creatinine&quot;, &quot;Urea&quot;, &quot;RLTBW&quot;), AdjVars = c(&quot;Age&quot;, &quot;Gender&quot;, &quot;Smoker&quot;), method_t = &quot;pcor&quot;, method = &quot;spearman&quot;, p_adjust = &quot;BH&quot;) head(dat_cor_partial) ## Phenotype TaxaID Statistic Rho Pvalue AdjustedPvalue ## 1 LF g__Absiella 0.07849237 0.01290299 0.9378594 0.9942613 ## 2 LF g__Acidaminococcus 0.41767935 0.06850475 0.6785956 0.9738542 ## 3 LF g__Actinomyces 0.53412751 0.08747343 0.5964482 0.9738542 ## 4 LF g__Adlercreutzia 0.54397242 0.08907305 0.5897236 0.9738542 ## 5 LF g__Agathobaculum -0.43073071 -0.07063482 0.6691631 0.9738542 ## 6 LF g__Aggregatibacter -0.34019586 -0.05584059 0.7356329 0.9738542 visualization plot_correlation_heatmap( data = dat_cor_partial, x_index = &quot;Rho&quot;, x_index_cutoff = 0, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, cellwidth = 35, cellheight = 10, fontsize_number = 15) Figure 12.2: Partial Correlation Coefficient Results: the color of cell shows the size of Rho. red: positive blue: negative the asterisk of cell shows the significance: * for [0.05, 0.01] ** for less than 0.01 12.5 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## ALDEx2 1.30.0 2022-11-01 [1] Bioconductor ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 4.1.0) ## Biobase 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## classInt 0.4-3 2020-04-07 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## compositions 2.0-4 2022-01-05 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## DEoptimR 1.0-10 2022-01-03 [1] CRAN (R 4.1.2) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools * 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## formatR 1.11 2021-06-01 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## futile.logger * 1.4.3 2016-07-10 [1] CRAN (R 4.1.0) ## futile.options 1.0.1 2018-04-20 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## ggVennDiagram 1.2.1 2022-04-13 [1] Github (gaospecial/ggVennDiagram@db6742d) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lambda.r 1.2.4 2019-09-18 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## LOCOM 1.1 2022-08-05 [1] Github (yijuanhu/LOCOM@c181e0f) ## magrittr * 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## mbzinb 0.2 2022-03-16 [1] local ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap * 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 4.1.0) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qvalue 2.26.0 2021-10-26 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RAIDA 1.0 2022-03-14 [1] local ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RcppZiggurat 0.1.6 2020-10-20 [1] CRAN (R 4.1.0) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr * 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## Rfast 2.0.6 2022-02-16 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## RVenn 1.1.0 2019-07-18 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## sf 1.0-7 2022-03-07 [1] CRAN (R 4.1.2) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 4.1.0) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## units 0.8-0 2022-02-05 [1] CRAN (R 4.1.2) ## usethis * 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VennDiagram * 1.7.3 2022-04-12 [1] CRAN (R 4.1.2) ## viridis * 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite * 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["principals-of-differential-analysis-methods.html", "Chapter 13 Principals of Differential Analysis methods 13.1 ALDEx2 13.2 ANCOM-II 13.3 corncob 13.4 DESeq2 13.5 edgeR 13.6 LEfSe 13.7 limma voom 13.8 MaAsLin2 13.9 metagenomeSeq 13.10 t-test 13.11 Wilcoxon test 13.12 RAIDA 13.13 Summary 13.14 Advantages and disadvantages", " Chapter 13 Principals of Differential Analysis methods (Nearing et al. 2022) has showed that the multiple DA methods have different performances on microbiota (16s). Here, we integrated the its methods’ part and our own understandings to give a draft whole picture for users who using DA of XMAS2. Microbiota data have the following characteristics: Compositional: Mathematically, a data is defined as compositional, if it contains D multiple parts of nonnegative numbers whose sum is 1 or any constant-sum constraint. It can be formally stated as: \\[S^{D} = \\left \\{ X = [x_{1}, x_{2}, ..., x_{D}] | x_{i} &gt; 0, i = 1, 2, ..., D; \\sum^{D}_{i=1} x_{i} = K \\right \\}\\] Over-Dispersed: The variance are generally greater than the mean. There are several possible causes of overdispersion: correlated taxa counts, clustering of subjects, and within group heterogeneity. Negative Binomial Model addresses overdispersion by by explicitly modeling the correlated and sparse events via a latent variable. Sparsity: Microbiome data typically is overdispersed and sparse with many zeros. When the number of zeros is excess than the standard distributions (e.g., normal, Poisson, binomial, NB, beta or gamma) can be readily fit, the data set is considered as ’zero inflate. 13.1 ALDEx2 ALDEx2 is from (Fernandes et al. 2014) 13.1.1 Vignette ANOVA-Like Differential Expression tool for high throughput sequencing data: ALDEx2 13.1.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.1.3 Input Key Arguments reads: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples). conditions: A vector of group labels for testing. mc.samples: The number of Monte Carlo samples, default is 128. denom: The methods for Geometric Mean calculation, default is “all”. test: The test to perform, default is “t.test”. 13.1.4 Procedures Monte Carlo samples of Dirichlet distributions for each sample, using a uniform prior; (Sparsity) Performing CLR (log-ratio) transformation of each realization; (Compositional &amp; Overdispersion) Performing Wilcoxon tests on the transformed realizations. Finally, the function returned the expected Benjamini-Hochberg (BH) FDR-corrected p-value for each feature based on the results the different across Monte Carlo samples. 13.1.5 Key output TaxaID: taxa ID. EffectSize: Effect Size generated by Aldex2, which equals to Log2FoldChange. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Median CLR (All/Groups): median value of CLR abundance normalized by Aldex2. Occurrence (All/Groups): prevalence of taxa. 13.1.6 Original Syntax aldex( reads, conditions, mc.samples = 128, test = &quot;t&quot;, effect = TRUE, include.sample.summary = FALSE, verbose = FALSE, denom = &quot;all&quot;, iterate = FALSE, ... ) 13.1.7 XMAS2 Syntax run_aldex( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, method = &quot;t.test&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05) # ALDEx2::aldex(reads = otu_tab, # conditions = sam_tab$Compvar, # mc.samples = 128, # test = test, # effect = TRUE, # include.sample.summary = FALSE, # denom = &quot;all&quot;, # verbose = TRUE) 13.1.8 Notes Effect Size could be regarded as Log2FoldChange; 13.2 ANCOM-II ANCOM-II is from ANCOM-II (version 2.1) and it derived from (Mandal et al. 2015). 13.2.1 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.2.2 Input Key Arguments feature_table: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples). meta_data: data.frame with group information. struc_zero: data.frame with structure zero taxa. group_var: group variable for comparison. alpha: the significant level cutoff for testing. 13.2.3 Procedures feature_table_pre_process firstly identify outlier zeros and structural zeros; Outlier zeros, identified by finding outliers in the distribution of taxon counts within each sample grouping, were ignored during differential abundance analysis, and replaced with NA. Structural zeros, taxa that were absent in one grouping but present in the other, were ignored during data analysis and automatically called as differential abundant. additive log-ratios for transformation with a pseudo count of 1; Wilcoxon rank-sum tests for significance, and p-values were FDR-corrected using the BH method; Detection threshold for Ajusted-pvalue per taxa, if the number (ratio) of Ajusted-pvalue reaches nominal significance would be called as DA taxa. 13.2.4 Key output TaxaID: taxa ID. EffectSize: Effect Size to evaluate the quality of (W)q-values &lt; alpha. W_ratio: the ratio of significant taxa compared to totoal number of taxa. detected: the taxa is significant passed the W_ratio cutoff. 13.2.5 Original Syntax preprocess_ANCOM &lt;- function( feature_table, meta_data, sample_var = NULL, group_var = NULL, out_cut = 0.05, zero_cut = 0.90, lib_cut = 1000, neg_lb = FALSE) main_ANCOM &lt;- function( feature_table, meta_data, struc_zero = NULL, group_var = NULL, p_adj_method = &quot;BH&quot;, alpha = 0.05, adj_formula = NULL, rand_formula = NULL, w_cutoff = 0.7, ...) 13.2.6 XMAS2 Syntax run_ancom( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, w_cutoff = 0.7) # preprocess_ANCOM( # feature_table = otu_tab, # meta_data = sam_tab %&gt;% tibble::rownames_to_column(&quot;TempRowNames&quot;), # sample_var = &quot;TempRowNames&quot;, # group_var = &quot;Compvar&quot;, # out_cut = 0.05, # zero_cut = 0.90, # lib_cut = 1000, # neg_lb = FALSE) # # main_ANCOM( # feature_table = prepro_res$feature_table, # meta_data = prepro_res$meta_data, # struc_zero = prepro_res$structure_zeros, # group_var = &quot;Compvar&quot;, # p_adj_method = p_adjust, # alpha = pvalue_cutoff, # rand_formula = NULL, # w_cutoff = 0.7) 13.2.7 Notes the column detected_ with TRUE shows the significant taxa by `run_ancom``; 13.3 corncob corncob is from (Martin, Witten, and Willis 2020) 13.3.1 Vignette Count Regression for Correlated Observations with the Beta-Binomial: corncob 13.3.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.3.3 Input Key Arguments data: a data frame containing the OTU table, or phyloseq object containing the variables in the models (counts matrix). formula: an object of class formula without the response. test: test method, options include: “Wald” and “LRT” for two groups comparison (default: “Wald”). fdr_cutoff: cutoff of FDR. 13.3.4 Procedures Taxon count abundance fit to a beta-binomial model, using logit link functions for both the mean and overdispersion. Wald tests for significance testing, and BH for FDR-corrected p-values. 13.3.5 Key output TaxaID: taxa ID. EffectSize: Effect Size to evaluate the power of pvalue. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.3.6 Original Syntax differentialTest( formula, phi.formula, formula_null, phi.formula_null, data, link = &quot;logit&quot;, phi.link = &quot;logit&quot;, test, boot = FALSE, B = 1000, sample_data = NULL, taxa_are_rows = TRUE, filter_discriminant = TRUE, fdr_cutoff = 0.05, fdr = &quot;fdr&quot;, full_output = FALSE, inits = NULL, inits_null = NULL, try_only = NULL, ... ) 13.3.7 XMAS2 Syntax run_corncob( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, method = c(&quot;Wald&quot;, &quot;LRT&quot;), p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05) # corncob::differentialTest( # data = ps_normed_new, # formula = my_formula, # phi.formula = my_formula, # phi.formula_null = my_formula, # formula_null = ~ 1, # test = method, # boot = F, # fdr_cutoff = pvalue_cutoff, # fdr = p_adjust) 13.3.8 Notes Columns with Log2FoldChange are based on raw counts; 13.4 DESeq2 DESeq2 is from (Love, Huber, and Anders 2014) 13.4.1 Vignette DESeq2 13.4.2 Input Data Type All the input data type should be un-normalized raw counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.4.3 Input Key Arguments countData: Raw counts matrix without normalization (Rows-&gt;Features; columns-&gt;Samples). colData: a DataFrame or data.frame with at least a single column.. design: a formula or matrix. the formula expresses how the counts for each gene depend on the variables in colData. 13.4.4 Procedures estimation of size factors, which are used to normalize library sizes in a model-based fashion; estimation of dispersions from the negative binomial likelihood for each feature, and subsequent shrinkage of each dispersion estimate towards the parametric (default) trendline by empirical Bayes; fitting each feature to the specified class groupings with negative binomial generalized linear models and performing hypothesis testing, for which we chose the default Wald test; Finally, using the results function to obtain the resulting BH FDR-corrected p-values. 13.4.5 Key output TaxaID: taxa ID. logFC: Log2FoldChange by DESeq2::DESeq. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.4.6 Original Syntax DESeqDataSetFromMatrix( countData, colData, design, tidy = FALSE, ignoreRank = FALSE, ... ) 13.4.7 XMAS2 Syntax run_deseq2( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, ...) # DESeq2::DESeqDataSetFromMatrix( # countData = otu_tab, # colData = sam_tab, # design =~ Compvar) # DESeq2::DESeq(ddsm) # DESeq2::results(dds, contrast = c(&quot;Compvar&quot;, group_names)) 13.5 edgeR edgeR is from (Robinson and Oshlack 2010) 13.5.1 Vignette edgeR 13.5.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.5.3 Input Key Arguments counts: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples) for DEGlist. design: A vector of group labels for testing. contrast: A string for comparison groups. 13.5.4 Procedures Add a pseudocount of 1 to the non-rarefied feature table and used the function calcNormFactors from the edgeR package to compute relative log expression normalization factors; Negative binomial dispersion parameters were then estimated using the functions estimateCommonDisp followed by estimateTagwiseDisp to shrink feature-wise dispersion estimates through an empirical Bayes approach; exactTest for negative binomial data to identify features that differ between the specified groups; The resulting p-values were then corrected for multiple testing with the BH method with the function topTags. 13.5.5 Key output TaxaID: taxa ID. logFC: Log2FoldChange by edgeR::topTags. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.5.6 Original Syntax # DGEList object &amp; normalized factor # GLM estimates of dispersion # GLM testing for differential expression 13.5.7 XMAS2 Syntax run_edger( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, ...) # # Filter data # keep &lt;- rowSums(edgeR::cpm(otu_tab) &gt; 100) &gt;= 2 # otu_tab &lt;- otu_tab[keep, ] # # # DGEList object: otu_tab -&gt; colnames:Samples; rownames:Taxa # dge_obj &lt;- edgeR::DGEList(counts = otu_tab) # dge_obj_factors &lt;- edgeR::calcNormFactors(dge_obj) # limma::plotMDS(dge_obj_factors, method = &quot;bcv&quot;, col = as.numeric(sam_tab$Compvar)) # graphics::legend(&quot;bottomleft&quot;, group_names, col = 1:2, pch = 20) # # # GLM estimates of dispersion # dge &lt;- edgeR::estimateGLMCommonDisp(dge_obj_factors, design) # dge &lt;- edgeR::estimateGLMTrendedDisp(dge, design, method = &quot;power&quot;) # # # You can change method to &quot;auto&quot;, &quot;bin.spline&quot;, &quot;power&quot;, &quot;spline&quot;, &quot;bin.loess&quot;. # # The default is &quot;auto&quot; which chooses &quot;bin.spline&quot; when &gt; 200 tags and &quot;power&quot; otherwise. # dge &lt;- edgeR::estimateGLMTagwiseDisp(dge, design) # # # GLM testing for differential expression: # fit &lt;- edgeR::glmFit(dge, design) # fit2 &lt;- edgeR::glmLRT(fit, contrast = contrast) # Normal:-1; Tumor:1 # edgeR_res &lt;- edgeR::topTags(fit2, n = nrow(otu_tab)) %&gt;% data.frame() 13.5.8 Notes Effect Size could be regarded as Log2FoldChange; 13.6 LEfSe LEfSe is from (Segata et al. 2011) 13.6.1 Vignette Liner discriminant analysis (LDA) effect size: LEfSe 13.6.2 Input Data Type All the input data type could be Raw Counts or Relative abundance: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA. 13.6.3 Input Key Arguments assays: data.frame or matrix of features (Rows-&gt;Features; columns-&gt;Samples). colData: data.frame or matrix with group information. kruskal.threshold : cutoff of KW test pvalue. wilcox.threshold: cutoff of wilcox test pvalue. lda.threshold: cutoff of LDA scores. 13.6.4 Procedures Normalizing the matrix data using CPM: pre-sample normalization of the sum of the values to 1e+06.; Performing a Kruskal-Wallis (which in our two-group case reduces to the Wilcoxon rank-sum) hypothesis test to identify potential differentially abundant features; Using differentially abundant features to perform linear discriminant analysis (LDA) of class labels on abundances to estimate the effect sizes for sig- nificant features. Only features with scaled LDA analysis scores above the threshold (default: 2.0) were called as DA. 13.6.5 Key output TaxaID: taxa ID. LDA score: LDA score to determine the significant taxa. 13.6.6 Original Syntax lefser(expr, kruskal.threshold = 0.05, wilcox.threshold = 0.05, lda.threshold = 2.0, groupCol = &quot;GROUP&quot;, blockCol = NULL, assay = 1L, trim.names = FALSE) 13.6.7 XMAS2 Syntax run_lefse( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;CPM&quot;, wl.p = 0.05, Lda = 2) run_lefse2( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, subgroup = NULL, transform = c(&quot;identity&quot;, &quot;log10&quot;, &quot;log10p&quot;), norm = &quot;CPM&quot;, kw_cutoff = 0.05, lda_cutoff = 2, bootstrap_n = 30, bootstrap_fraction = 2 / 3, wilcoxon_cutoff = 0.05, multigrp_strat = FALSE, strict = c(&quot;0&quot;, &quot;1&quot;, &quot;2&quot;), sample_min = 10, only_same_subgrp = FALSE, curv = FALSE) # se_object &lt;- SummarizedExperiment::SummarizedExperiment( # assays = list(counts = otu_tab), # colData = sam_tab, # metadata = &quot;Profile&quot;) # # lefse_res &lt;- lefser(se_object, # kruskal.threshold = 0.05, # wilcox.threshold = wl.p, # lda.threshold = Lda, # groupCol = &quot;Compvar&quot;, # blockCol = NULL, # assay = 1L, # trim.names = TRUE) 13.6.8 Notes Effect Size could be regarded as Log2FoldChange; 13.7 limma voom limma-voom is from (Law et al. 2014) 13.7.1 Vignette limma 13.7.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.7.3 Input Key Arguments counts: a numeric matrix containing raw counts (Rows-&gt;Features; columns-&gt;Samples). design: design matrix with rows corresponding to samples and columns to coefficients to be estimated. lib.size: numeric vector containing total library sizes for each sample. span: width of the smoothing window used for the lowess mean-variance trend. 13.7.4 Procedures Normalizing table by the trimmed mean of M-values (TMM) or TMM with singleton pairing (TMMwsp) option via calcNormFactors function (highly sparse data); After normalization, using the limma R package function voom to convert normalized counts to log2-counts-per-million and assign precision weights to each observation based on the mean-variance trend; Using the functions lmFit, eBayes, and topTable in the limma R package to fit weighted linear regression models, perform tests based on an empirical Bayes moderated t-statistic76 and obtain BH FDR-corrected p-values. 13.7.5 Key output TaxaID: taxa ID. EffectSize and logFC: both results equals to Log2FoldChange. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.7.6 Original Syntax fit_out &lt;- limma::lmFit(voom_out, design = design) test_out &lt;- limma::eBayes(fit_out) test_df &lt;- limma::topTable( test_out, number = nrow(otu_tab), adjust.method = p_adjust) 13.7.7 XMAS2 Syntax run_limma_voom( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, voom_span = 0.5, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, ...) # # voom fitting # voom_out &lt;- limma::voom( # otu_tab, # design = design, # lib.size = lib_size, # span = voom_span) # # # linear model # fit_out &lt;- limma::lmFit(voom_out, design = design) # test_out &lt;- limma::eBayes(fit_out) # test_df &lt;- limma::topTable( # test_out, # number = nrow(otu_tab), # adjust.method = p_adjust) 13.7.8 Notes Effect Size could be regarded as Log2FoldChange; 13.8 MaAsLin2 MaAsLin2 is from (Mallick et al. 2021) 13.8.1 Vignette Multivariable association discovery in population-scale meta-omics studies: MaAsLin2 13.8.2 Input Data Type All the input data type could be Raw Counts or Relative abundance: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.8.3 Input Key Arguments input_data: The tab-delimited input file of features (Rows-&gt;Features; columns-&gt;Samples). input_metadata: The tab-delimited input file of metadata. normalization: The normalization method to apply. transform: The transform to apply. analysis_method: The analysis method for linear regression to apply. random_effects: The random effects for the model. fixed_effects: The fixed effects for the model, such as the groups to compare. 13.8.4 Procedures Using arcsine square-root transformation (AST) for transformation and total sum scaling normalization (TSS) for normalization; The function fit a linear model (without random effects chosen) to each feature’s transformed abundance on the specified sample grouping, tested significance using a Wald test, and output BH FDR-corrected p-values; 13.8.5 Key output TaxaID: taxa ID. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.8.6 Original Syntax Maaslin2( input_data, input_metadata, output, min_abundance = 0.0, min_prevalence = 0.1, min_variance = 0.0, normalization = &quot;TSS&quot;, transform = &quot;LOG&quot;, analysis_method = &quot;LM&quot;, max_significance = 0.25, random_effects = NULL, fixed_effects = NULL, correction = &quot;BH&quot;, standardize = TRUE, cores = 1, plot_heatmap = TRUE, plot_scatter = TRUE, heatmap_first_n = 50, reference = NULL ) 13.8.7 XMAS2 Syntax run_maaslin2( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;LOG&quot;, norm = &quot;TSS&quot;, outdir = &quot;./demo_output&quot;, method = &quot;LM&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05) # Maaslin2(input_data = otu_tab %&gt;% t() %&gt;% data.frame(), # row-&gt;smapleID; col-&gt;Taxa # input_metadata = sam_tab, # output = outdir, # normalization = norm, # transform = transform, # analysis_method = method, # max_significance = pvalue_cutoff, # fixed_effects = &quot;Compvar&quot;, # correction = p_adjust, # plot_heatmap = FALSE, # plot_scatter = FALSE, # cores = 2) 13.9 metagenomeSeq metagenomeSeq is from (Paulson et al. 2013) 13.9.1 Vignette metagenomeSeq 13.9.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.9.3 Input Key Arguments reads: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples). conditions: A vector of group labels for testing. mc.samples: The number of Monte Carlo samples, default is 128. denom: The methods for Geometric Mean calculation, default is “all”. test: The test to perform, default is “t.test”. 13.9.4 Procedures Converting the counts and sample information into newMRexperiment object by the function newMRexperiment from the metagenomeSeq R package; Using cumNormStat and cumNorm to apply cumulative sum-scaling normalization (CSS), which attempts to normalize sequence counts based on the lower-quartile abundance of features; Using fitFeatureModel to fit normalized feature counts with zero-inflated log-normal models (with pseudo-counts of 1 added prior to log2 transformation) and perform empirical Bayes moderated t-tests, and MRfulltable to obtain BH FDR-corrected p-values. 13.9.5 Key output TaxaID: taxa ID. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. 13.9.6 Original Syntax metagenomeSeq::fitFeatureModel(mgs_summarized, mod) metagenomeSeq::fitZig(mgs_summarized, mod) 13.9.7 XMAS2 Syntax run_metagenomeseq( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;CSS&quot;, method = c( &quot;ZILN&quot;, &quot;ZIG&quot; ), p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, ...) # # run DA # if (method == &quot;ZILN&quot;) { # fit &lt;- metagenomeSeq::fitFeatureModel(mgs_summarized, mod) # } else { # fit &lt;- metagenomeSeq::fitZig(mgs_summarized, mod) # } # # # metagenomeSeq vignette: We recommend the user remove features based on # # the number of estimated effective samples, please see # # calculateEffectiveSamples. We recommend removing features with less # # than the average number of effective samples in all features. In # # essence, setting eff = .5 when using MRcoefs, MRfulltable, or MRtable. # res &lt;- metagenomeSeq::MRcoefs( # fit, # number = ntaxa(ps_normed_new), # adjustMethod = p_adjust, # group = 3, # eff = 0.5) # res &lt;- dplyr::rename( # res, # Pvalue = .data$pvalues, # AdjustedPvalue = .data$adjPvalues) 13.10 t-test 13.10.1 Input Data Type All the input data type could be Raw Counts or relative abundance: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.10.2 Input Key Arguments x: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples). y: A vector of group labels for testing. 13.10.3 Procedures Applying total sum scaling normalization (TSS) or not to the feature table; Performing an unpaired Welch’s t-test for each feature to compare the specified groups; Correcting the resulting p-values with the BH method. 13.10.4 Key output TaxaID: taxa ID. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.10.5 Original Syntax t.test(x, y = NULL, alternative = c(&quot;two.sided&quot;, &quot;less&quot;, &quot;greater&quot;), mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95, ...) 13.10.6 XMAS2 Syntax run_ttest( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, paired = FALSE, paired_column = NULL) # # run wilcox rank sum test # if (paired) { # if (!is.null(paired_column)) { # res &lt;- paired_t(x = otu_tab, # y = sam_tab, # group = &quot;Compvar&quot;, # gnames = group_names, # paired = paired, # PID = paired_column, # p_ad = p_adjust) # } else { # stop(&quot;Please provide the paired column for paired test&quot;) # } # # } else { # res &lt;- apply(otu_tab, 1, function(x, y) { # dat &lt;- data.frame(value = as.numeric(x), group = y) # rest &lt;- t.test(data = dat, value ~ group) # res &lt;- c(rest$statistic, rest$p.value) # return(res) # }, sam_tab$Compvar) %&gt;% # t() %&gt;% data.frame() %&gt;% # stats::setNames(c(&quot;Statistic&quot;, &quot;Pvalue&quot;)) %&gt;% # tibble::rownames_to_column(&quot;TaxaID&quot;) %&gt;% # dplyr::mutate(AdjustedPvalue = p.adjust(as.numeric(Pvalue), method = p_adjust)) # } 13.11 Wilcoxon test 13.11.1 Input Data Type All the input data type could be Raw Counts or relative abundance: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.11.2 Input Key Arguments x: Raw counts matrix (Rows-&gt;Features; columns-&gt;Samples). y: A vector of group labels for testing. 13.11.3 Procedures CLR (after applying a pseudocount of 1) transforms or not to abundances; Performing Wilcoxon rank-sum tests for each feature to compare the specified sample groupings; Correcting the resulting p-values with the BH method. 13.11.4 Key output TaxaID: taxa ID. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.11.5 Original Syntax wilcox.test(x, y = NULL, alternative = c(&quot;two.sided&quot;, &quot;less&quot;, &quot;greater&quot;), mu = 0, paired = FALSE, exact = NULL, correct = TRUE, conf.int = FALSE, conf.level = 0.95, tol.root = 1e-4, digits.rank = Inf, ...) 13.11.6 XMAS2 Syntax run_wilcox( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05, paired = FALSE, paired_column = NULL) # # run wilcox rank sum test # if (paired) { # if (!is.null(paired_column)) { # res &lt;- paired_wilcox(x = otu_tab, # y = sam_tab, # group = &quot;Compvar&quot;, # gnames = group_names, # paired = paired, # PID = paired_column, # p_ad = p_adjust) # } else { # stop(&quot;Please provide the paired column for paired test&quot;) # } # # } else { # res &lt;- apply(otu_tab, 1, function(x, y) { # dat &lt;- data.frame(value = as.numeric(x), group = y) # rest &lt;- wilcox.test(data = dat, value ~ group) # res &lt;- c(rest$statistic, rest$p.value) # return(res) # }, sam_tab$Compvar) %&gt;% # t() %&gt;% data.frame() %&gt;% # stats::setNames(c(&quot;Statistic&quot;, &quot;Pvalue&quot;)) %&gt;% # tibble::rownames_to_column(&quot;TaxaID&quot;) %&gt;% # dplyr::mutate(AdjustedPvalue = p.adjust(as.numeric(Pvalue), method = p_adjust)) # } 13.12 RAIDA RAIDA is from (Sohn, Du, and An 2015) 13.12.1 Vignette A robust approach for identifying differentially abundant features in metagenomic samples: RAIDA 13.12.2 Input Data Type All the input data type should be Raw Counts: 16s rRNA sequencing (amplicon sequencing); Metagenomic sequencing (absolute abundance); RNA-seq. 13.12.3 Input Key Arguments c.data: a data frame containing counts for both conditions. n.lib: a vector containing the numbers of samples for both conditions. 13.12.4 Procedures Approach for Identifying Differential Abundance (RAIDA) - is a robust approach for identifying differentially abundant features in metagenomic samples across different conditions. It utilizes the ratio between features in a modified zero-inflated log-normal model. Utilizing the ratios between the counts of features in each sample, eliminating possible problems associated with counts on different scales within and between conditions; To fit ratios with zeros by EM algorithm, using a modified ZIL (zero-inflated log normal: sparsity); Constructing a moderated t-statistics for the log ratio of each feature \\(y_{ij}\\) using the estimated mean \\(\\mu\\) and variance \\(r^2\\) and obtain \\(P\\) values for the null hypotheses for all features; Adjust \\(P\\) values using a multiple testing correction method 13.12.5 Key output TaxaID: taxa ID. AdjustedPvalue: Adjusted Pvalue by stats::p.adjust. Occurrence (All/Groups): prevalence of taxa. 13.12.6 Original Syntax raida(c.data, n.lib, show.ref.features = FALSE, show.all.features = FALSE, mtcm = &quot;BH&quot;, zsc = 0) 13.12.7 XMAS2 Syntax run_raida( ps = NULL, taxa_level = NULL, data_otu = NULL, data_sam = NULL, group, group_names = NULL, transform = &quot;identity&quot;, norm = &quot;none&quot;, p_adjust = &quot;BH&quot;, pvalue_cutoff = 0.05) # RAIDA::raida(c.data = otu_tab_reorder, n.lib = n.samples) 13.13 Summary The most commonly assumed data distribution was the negative binomial distribution (DESeq2, edgeR, omnibus, mbzinb). No data transformations were performed for negative binomial methods, or metagenomeSeq methods, to try and bring the data to normality as non-normality of data is taken into account in their statistical models. The remaining parametric methods (ALDEx2 t-test, t-test, limma-voom) all used statistical tests that assumed a Gaussian distribution of the data, therefore, transformations were needed before analysis, which here included a log transform of some kind. Three methods (ALDEx2 Wilcoxon, ANCOM-II, LEfSe) were considered non-parametric (assumes no underlying distribution of data) as they used statistical tests that transformed data to ranks. Two of the four negative binomial methods (DESeq2, edgeR) calculated scaling factors for each sample to account for uneven sequence count. Cumulative sum scaling (CSS) was used for both metagenomeSeq and MaAsLin2. Total sum scaling (TSS; also referred to as relative abundance) was performed for LEfSe, and for method that did not have a built-in normalization function (t-test) as this strategy is commonly used in the literature. Log-ratio based transformations were used for ALDEx2 methods, ANCOM, and, in addition to TSS, were applied to methods without a built-in normalization function. 13.14 Advantages and disadvantages limma-voom, edgeR, Wilcoxon (CLR), and LEfSe output a high number of significant ASVs on average, while ALDEx2 and ANCOM-II tended to identify only a relatively small number of ASVs as significant; limma-voom, edgeR, Wilcoxon (CLR), and LEfSe methods have been previously found to exhibit a high FDR, in contrast, ANCOM appropriately controls the FDR; We can clearly recommend that users avoid using edgeR (a tool primarily intended for RNA-seq data) as well as LEfSe (without p-value correction) for conducting DA testing with 16S rRNA gene data. Users should also be aware that limma voom and the Wilcoxon (CLR) approaches may perform poorly on unfiltered data that is highly sparse. More generally, we recommend that users employ several methods and focus on significant features identified by most tools. References "],["examples.html", "Chapter 14 Examples 14.1 Loading Packages 14.2 Workflow description 14.3 Amplicon sequencing (16s) 14.4 Metagenomics (MGS) 14.5 Systematic Information", " Chapter 14 Examples Here, we give users two examples to practice the data analysis workflow by XMAS 2.0. By the way, we also recommend users handling your own microbiota data in a reasonable manner when you utilize this package or workflow. Pay attention to whether your data fit the methods this package provided. 14.1 Loading Packages library(XMAS2) library(dplyr) library(tibble) library(phyloseq) library(ggplot2) library(ggpubr) library(SummarizedExperiment) 14.2 Workflow description The standard data analysis of 16S and MGS data by XMAS 2.0. 16S Figure 14.1: Functions of XMAS 2.0 in 16s MGS Figure 14.2: Functions of XMAS 2.0 in MGS 14.3 Amplicon sequencing (16s) The upstream process is performed by in-house pipeline. and this example just shows how to perform downstream data analysis. In briefly, the example comprises the following steps: Converting inputs into phyloseq object; Quality Evaluation; Pre-Processing Data; Diversity analysis; Ordination analysis; Composition analysis; Differential analysis. 14.3.1 Converting inputs into phyloseq-class object dada2 result from standardized_analytics_workflow_R_function. /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/xdada2/dada2_res.rds /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/process/fasta2tree/tree.nwk /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/16S/metadata.txt # dada2 results from in-house 16s pipeline dada2_res &lt;- readRDS( system.file( &quot;extdata&quot;, &quot;dada2_res.rds&quot;, package = &quot;XMAS2&quot; ) ) # the metadata matches to dada2 result sam_tab &lt;- read.table( system.file( &quot;extdata&quot;, &quot;dada2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) # tree file from dada2 reference data silva tree &lt;- phyloseq::read_tree( system.file( &quot;extdata&quot;, &quot;tree.nwk&quot;, package = &quot;XMAS2&quot; ) ) tax_tab &lt;- import_dada2_taxa(dada2_taxa = dada2_res$tax_tab) otu_tab &lt;- dada2_res$seq_tab sam_tab &lt;- sam_tab %&gt;% tibble::column_to_rownames(&quot;seqID&quot;) # Shouldn&#39;t use the Total Number as SampleID (wrong: 123456; right: X123456) rownames(otu_tab) &lt;- paste0(&quot;S&quot;, rownames(otu_tab)) rownames(sam_tab) &lt;- paste0(&quot;S&quot;, rownames(sam_tab)) dada2_ps &lt;- get_dada2_phyloseq( seq_tab = otu_tab, tax_tab = tax_tab, sam_tab = sam_tab, phy_tree = tree) dada2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 24 samples ] ## sample_data() Sample Data: [ 24 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] Here, the phyloseq object comprises five components (OTU Table, Sample Data, Taxonomy Table, Phylogenetic Tree and DNAStringSet). 14.3.1.1 Summarize phyloseq-class object summarize_phyloseq(ps = dada2_ps) ## Compositional = NO2 ## 1] Min. number of reads = 511812] Max. number of reads = 936223] Total number of reads = 15025374] Average number of reads = 62605.70833333335] Median number of reads = 619157] Sparsity = 0.8653738839285716] Any OTU sum to 1 or less? NO8] Number of singletons = 09] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 1Group2 ## [[1]] ## [1] &quot;1] Min. number of reads = 51181&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 93622&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 1502537&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 62605.7083333333&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 61915&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.865373883928571&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? NO&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 0&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 1&quot; ## ## [[11]] ## [1] &quot;Group&quot; The minus account of the OTU counts is 51181 in the phyloseq object, and we can use it as the threshold to rarefy. Notice the Sparsity (0.865), indicating the data has many zeros and pay attention to the downstream data analysis. A common property of amplicon based microbiota data generated by sequencing. 14.3.2 Quality Control Quality control of DADA2 results will help us have more rational determinations on the further data analysis. 14.3.2.1 Reads’ track by DADA2 plot_Dada2Track(data = dada2_res$reads_track) Figure 14.3: Reads’ track by DADA2 (16s example) The percentage of the final remained read counts approximate 70%, indicating that we should consider the sequence depth for analysis when we build the sequence library. 14.3.2.2 Spike-in sample (BRS) assessment Extract the genus level phyloseq and getting the BRS_ID dada2_ps_genus &lt;- summarize_taxa(ps = dada2_ps, taxa_level = &quot;Genus&quot;) sample_data(dada2_ps_genus) ## Group ## S6030 BB ## S6032 BB ## S6033 BB ## S6035 AA ## S6036 BB ## S6037 AA ## S6040 BB ## S6043 AA ## S6045 BB ## S6046 BB ## S6048 BB ## S6049 AA ## S6050 BB ## S6054 BB ## S6055 BB ## S6058 BB ## S6059 AA ## S6060 AA ## S6061 AA ## S6063 BB ## S6065 AA ## S6066 AA ## S6068 BB ## S8005 QC The BRS_ID is S8005 . Run run_RefCheck run_RefCheck( ps = dada2_ps_genus, BRS_ID = &quot;S8005&quot;, Ref_type = &quot;16s&quot;) ## Noting: the Reference Matrix is for 16s ## S8005 is in the Reference Matrix&#39;s samples and remove it to run ## ## ############Matched baterica of the BRS sample############# ## The number of BRS&#39; bacteria matched the Reference Matrix is [15] ## g__Bifidobacterium ## g__Bacteroides ## g__Faecalibacterium ## g__Lactobacillus ## g__Parabacteroides ## g__Collinsella ## g__Coprococcus_3 ## g__Dorea ## g__Streptococcus ## g__Roseburia ## g__Anaerostipes ## g__Escherichia_Shigella ## g__Enterococcus ## g__Prevotella_9 ## g__Eggerthella ## ## The number of the additional bacteria compared to Reference Matrix is [1] ## ########################################################### ## ## ##################Status of the BRS sample################## ## Whether the BRS has the all bateria of Reference Matrix: TRUE ## Correlation Coefficient of the BRS is: 0.9714 ## Bray Curtis of the BRS is: 0.07607 ## Impurity of the BRS is: 0.06409 ## ########################################################### ## #####Final Evaluation Results of the BRS ####### ## The BRS of sequencing dataset passed the cutoff of the Reference Matrix ## Cutoff of Coefficient is 0.8946 ## Cutoff of BrayCurtis is 0.3878 ## Cutoff of Impurity is 0.1565 ## ########################################################### ## 8002 8003 8004 8006 8007 8008 8009 8005 mean ## Bifidobacterium 31.11079015 30.88310969 32.31232692 18.4930259 20.20409870 17.96225391 18.03588291 27.22437034 24.52823232 ## Bacteroides 20.44753484 14.46581958 24.57151411 26.7370147 25.85863655 27.51353663 26.99272343 24.23896093 23.85321759 ## Faecalibacterium 0.79850615 0.62937893 1.05531023 1.7487249 1.64282727 1.96346413 1.81219797 1.04035376 1.33634542 ## Lactobacillus 2.61732573 3.36856272 3.44379163 5.9292703 5.78000836 5.78189064 6.32672332 3.87088505 4.63980722 ## Parabacteroides 7.11124408 7.45952579 5.36075144 8.7149995 8.01840234 8.74899584 8.62634005 5.61833757 7.45732457 ## Collinsella 0.12792605 0.88271385 0.55665744 1.2764130 0.67921372 1.89356397 1.26367828 0.45502126 0.89189845 ## Coprococcus_3 1.00380683 0.97969362 0.80270938 1.6693557 1.56419908 1.67969035 1.71221463 0.87586251 1.28594151 ## Dorea 2.80715148 3.45564660 2.46613277 3.9684605 3.99163530 3.81529666 3.69382881 2.34880690 3.31836988 ## Streptococcus 2.91960260 3.43387563 2.59149764 3.4818362 3.31409452 3.51378702 3.37721491 2.68740253 3.16491388 ## Roseburia 0.03404484 0.04750030 0.02806676 0.0338295 0.03178586 0.02503886 0.02499583 0.03311188 0.03229673 ## Anaerostipes 0.32291011 0.43245062 0.31528329 0.5386697 0.44500209 0.53416240 0.48047548 0.32471000 0.42420796 ## Escherichia_Shigella 15.27581475 16.00265210 12.36527954 10.8423545 13.43203680 10.15743185 11.59945565 14.03516268 12.96377349 ## Enterococcus 14.51444842 14.66472707 11.04239952 13.1674820 12.07360937 12.88771113 12.84924735 11.61906390 12.85233610 ## Prevotella_9 0.77374627 3.07465463 2.75709154 2.9145415 2.52446675 3.04952478 2.84952508 5.40257632 2.91826586 ## Eggerthella 0.04951976 0.15437596 0.27131203 0.4840221 0.43998327 0.47365181 0.35549631 0.16128688 0.29870601 ## Impurity_level 0.08562792 0.06531291 0.05987576 0.0000000 0.00000000 0.00000000 0.00000000 0.06409000 0.03436332 14.3.2.3 Spike-in sample’s remove dada2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = dada2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) dada2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 896 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 896 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 896 tips and 893 internal nodes ] ## refseq() DNAStringSet: [ 896 reference sequences ] 14.3.2.4 Rarefaction curves plot_RarefCurve(ps = dada2_ps_remove_BRS, taxa_level = &quot;OTU&quot;, step = 400, label = &quot;Group&quot;, color = &quot;Group&quot;) ## rarefying sample S6030 ## rarefying sample S6032 ## rarefying sample S6033 ## rarefying sample S6035 ## rarefying sample S6036 ## rarefying sample S6037 ## rarefying sample S6040 ## rarefying sample S6043 ## rarefying sample S6045 ## rarefying sample S6046 ## rarefying sample S6048 ## rarefying sample S6049 ## rarefying sample S6050 ## rarefying sample S6054 ## rarefying sample S6055 ## rarefying sample S6058 ## rarefying sample S6059 ## rarefying sample S6060 ## rarefying sample S6061 ## rarefying sample S6063 ## rarefying sample S6065 ## rarefying sample S6066 ## rarefying sample S6068 Figure 14.4: Rarefaction curves (16s example) The result showed that all the samples had different sequence depth but had the full sample richness. 14.3.3 Data processing This part has too may procedures and we only choose some of them. Please go to Chapter 6 to see more approaches and details for being familiar with this part. 14.3.3.1 Rarefy otu counts From previous results of quality evaluation, the sequence depth of samples are different which have effects on the downstream analysis. Here, choosing the rarefy (Normaliztion method: random subsampling counts to the smallest library size) to get the equal sample sums. dada2_ps_rarefy &lt;- norm_rarefy(object = dada2_ps_remove_BRS, size = 51181) dada2_ps_rarefy ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 891 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 891 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 891 tips and 888 internal nodes ] ## refseq() DNAStringSet: [ 891 reference sequences ] In addition, we could also perform some other normalization methods on the rarefied phyloseq object. By the way, we didn’t transform the data by using log algorithm because the count matrix is required by the following data analysis methods. 14.3.3.2 Extracting specific taxonomic level dada2_ps_rare_genus &lt;- summarize_taxa(ps = dada2_ps_rarefy, taxa_level = &quot;Genus&quot;) dada2_ps_rare_genus ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 198 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 198 taxa by 6 taxonomic ranks ] 14.3.3.3 Filtering the low relative abundance or unclassified taxa by the threshold (total counts &lt; 10) dada2_ps_rare_genus_filter &lt;- run_filter(ps = dada2_ps_rare_genus, cutoff = 10, unclass = TRUE) dada2_ps_rare_genus_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 149 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 149 taxa by 6 taxonomic ranks ] 14.3.3.4 Trimming the taxa with low occurrence less than threshold dada2_ps_rare_genus_filter_trim &lt;- run_trim(object = dada2_ps_rare_genus_filter, cutoff = 0.2, trim = &quot;feature&quot;) dada2_ps_rare_genus_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] Finally, we obtained the final phyloseq-class object dada2_ps_rare_genus_filter_trim and changed its name. 14.3.4 Diversity analysis 14.3.4.1 Alpha diveristy Calculate the alpha diversity Notes: the otu table must be counts matrix (rarefied but not trim counts matrix) when you choose Observed etc measures. dada_ps_rare_genus_alpha &lt;- run_alpha_diversity(ps = dada2_ps_rare_genus, measures = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;)) print(dada_ps_rare_genus_alpha) ## TempRowNames Group Observed Chao1 se.chao1 Shannon ## 1 S6030 BB 74 74.00000 0.0000000 2.622800 ## 2 S6032 BB 38 38.00000 0.0000000 1.711068 ## 3 S6033 BB 80 80.16667 0.5431879 2.719495 ## 4 S6035 AA 35 35.00000 0.1232013 1.953807 ## 5 S6036 BB 95 95.00000 0.0000000 2.942657 ## 6 S6037 AA 35 35.00000 0.0000000 1.933007 ## 7 S6040 BB 58 58.00000 0.0000000 2.490198 ## 8 S6043 AA 65 65.33333 0.9246628 2.098003 ## 9 S6045 BB 60 60.00000 0.0000000 2.920363 ## 10 S6046 BB 71 71.00000 0.1241166 2.264433 ## 11 S6048 BB 66 66.00000 0.0000000 2.630421 ## 12 S6049 AA 60 60.00000 0.0000000 2.506885 ## 13 S6050 BB 53 53.00000 0.0000000 2.431334 ## 14 S6054 BB 84 84.00000 0.0000000 2.769973 ## 15 S6055 BB 75 75.00000 0.0000000 2.297388 ## 16 S6058 BB 37 37.00000 0.2465985 2.262059 ## 17 S6059 AA 71 71.00000 0.0000000 2.682960 ## 18 S6060 AA 48 48.00000 0.0000000 1.883809 ## 19 S6061 AA 80 80.00000 0.0000000 3.088651 ## 20 S6063 BB 38 38.00000 0.0000000 1.543267 ## 21 S6065 AA 77 77.00000 0.0000000 2.877568 ## 22 S6066 AA 67 67.00000 0.0000000 2.638564 ## 23 S6068 BB 40 40.00000 0.0000000 2.100363 visualization plot_boxplot(data = dada_ps_rare_genus_alpha, y_index = c(&quot;Shannon&quot;, &quot;Chao1&quot;, &quot;Observed&quot;), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;red&quot;, &quot;blue&quot;), method = &quot;wilcox.test&quot;) Figure 14.5: Alpha diversity (16s example) 14.3.4.2 Beta diversity beta dipersion dada2_ps_beta &lt;- run_beta_diversity(ps = dada2_ps_rare_genus_filter_trim, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.01412 0.0141198 1.6675 999 0.201 ## Residuals 21 0.17783 0.0084679 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.21 ## BB 0.21063 dada2_ps_beta$BetaDispersion Figure 14.6: Beta diversity (16s example) 14.3.5 PERMANOVA + Ordination 14.3.5.1 PERMANOVA dada2_ps_per &lt;- run_permanova(ps = dada2_ps_rare_genus_filter_trim, method = &quot;bray&quot;, columns = &quot;Group&quot;) print(dada2_ps_per) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 23 1 0.2290643 0.2290643 1.331995 0.05964515 0.225 0.225 The PERMANOVA result of the Group (Pr(&gt;F) &gt; 0.05) revealed that the two groups had not the distinct patterns of microbial community. 14.3.5.2 Ordination We performed ordination by using Principal Coordinate Analysis (PCoA). If you want to try other methods please go to see Chapter 8 for more details. dada2_ps_ordination &lt;- run_ordination( ps = dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, method = &quot;PCoA&quot;) plot_Ordination(ResultList = dada2_ps_ordination, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;)) Figure 14.7: PCoA (16s example) 14.3.6 Microbial composition A whole picture of the microbial composition. 14.3.6.1 Stacked barplot XMAS package plot_StackBarPlot( ps = dada2_ps_rarefy, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) ## [1] &quot;This palatte have 20 colors!&quot; Figure 14.8: Microbial composition (16s example) XVIZ package plot_stacked_bar_XIVZ( phyloseq = dada2_ps_rarefy, level = &quot;Phylum&quot;, feature = &quot;Group&quot;) Figure 14.9: Microbial composition (16s example) XVIZ 14.3.6.2 Core microbiota convert absolute abundance into relative abundance dada2_ps_rare_genus_filter_trim_rb &lt;- XMAS2::normalize(object = dada2_ps_rare_genus_filter_trim, method = &quot;TSS&quot;) dada2_ps_rare_genus_filter_trim_rb ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 100 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 1 sample variables ] ## tax_table() Taxonomy Table: [ 100 taxa by 6 taxonomic ranks ] visualization prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(0.2), length = 10) pl_core &lt;- plot_core_taxa(dada2_ps_rare_genus_filter_trim_rb, plot.type = &quot;heatmap&quot;, colours = gray(seq(0, 1, length=5)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) pl_core Figure 14.10: Core taxa (16s example) The degree of color indicates the size of abundance and prevalence. Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(dada2_ps_rare_genus_filter_trim_rb, detection = 0.01, prevalence = 0.8) print(core_taxa_name) ## [1] &quot;g__Bifidobacterium&quot; &quot;g__Blautia&quot; Result: Only 2 genera (g__Bifidobacterium and g__Blautia) passed the threshold of detection and prevalence which we choose. 14.3.7 Differential Analysis There are more than 10 approaches to perform differential analysis. Here, we choose two of them and recommend users going to Chapter 10 to see more detials. 14.3.7.1 Liner discriminant analysis (LDA) effect size (LEfSe) Calculation dada2_ps_lefse &lt;- run_lefse( ps = dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 2) head(dada2_ps_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Clostridium_sensu_stricto_1 9_AA vs 14_BB BB 3.677589 2.679298 NA ## 2 g__Intestinibacter 9_AA vs 14_BB BB 3.177811 2.384308 NA ## 3 g__Lactobacillus 9_AA vs 14_BB BB 4.093463 2.450656 -3.336128 ## 4 g__Odoribacter 9_AA vs 14_BB BB 2.058258 1.876320 NA ## 5 g__Parasutterella 9_AA vs 14_BB AA -3.662466 2.234915 4.402050 ## 6 g__Romboutsia 9_AA vs 14_BB BB 3.699671 2.929140 -6.856424 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 225.11921 0.00000 1173.88222 -4.746617 5861.9051 ## 2 383.50911 0.00000 1398.79740 -1.964554 1883.3386 ## 3 1283.85401 520.46061 5256.08763 -5.173067 19938.7655 ## 4 21.93175 604.99989 0.00000 2.099583 578.0758 ## 5 172.77125 1080.35695 51.09966 4.481148 3901.0977 ## 6 2189.79596 50.35627 5835.02623 -3.334490 7094.1306 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB ## 1 350.3379 9405.0554 60.87 22.22 85.71 ## 2 680.6440 2656.4994 60.87 22.22 85.71 ## 3 892.0297 32183.0957 86.96 77.78 92.86 ## 4 1083.9017 252.9020 52.17 77.78 35.71 ## 5 9320.3061 417.3209 65.22 88.89 50.00 ## 6 1086.1419 10956.4090 78.26 55.56 92.86 ## Odds Ratio (95% CI) ## 1 4900 (5000;4900) ## 2 3.4 (5.8;1) ## 3 1.1e+08 (1.1e+08;1.1e+08) ## 4 0.31 (-2;2.6) ## 5 0.0025 (-12;12) ## 6 76 (85;68) Visualization # # don&#39;t run this code when you do lefse in reality # dada2_ps_lefse$LDA_Score &lt;- dada2_ps_lefse$LDA_Score * 1000 plot_lefse( da_res = dada2_ps_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 1, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 14.11: Lefse analysis (16s example) 14.3.7.2 Wilcoxon Rank-Sum test Calculation dada2_ps_wilcox &lt;- run_wilcox( ps = dada2_ps_rare_genus_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(dada2_ps_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue Log2FoldChange (Median)\\nAA_vs_BB ## 1 g__Acidaminococcus 9_AA vs 14_BB Nonsignif 4.039706e-02 52.5 0.3829211 0.7848636 NA ## 2 g__Actinomyces 9_AA vs 14_BB Nonsignif 2.612080e-01 47.5 0.3435093 0.7848636 -0.9896391 ## 3 g__Adlercreutzia 9_AA vs 14_BB Nonsignif 2.307757e-01 45.0 0.2234993 0.6697876 NA ## 4 g__Agathobacter 9_AA vs 14_BB Nonsignif 4.426807e-05 69.0 0.7234222 0.8996714 0.1573486 ## 5 g__Akkermansia 9_AA vs 14_BB Nonsignif 2.879778e-02 67.5 0.7270813 0.8996714 NA ## 6 g__Alistipes 9_AA vs 14_BB Nonsignif 8.430163e-03 65.0 0.9240616 0.9726964 0.7315751 ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA ## 1 0.000000 0.0000000 0.000000 -0.23546400 10.83 ## 2 1.251455 0.7531518 1.495525 -0.35082742 10.28 ## 3 0.000000 0.0000000 0.000000 -0.41034110 10.00 ## 4 2.975891 3.2800219 2.941102 0.13102766 12.67 ## 5 0.000000 0.0000000 0.000000 0.09788782 12.50 ## 6 1.522195 2.4624670 1.483011 0.04314028 12.22 ## Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 12.75 21.74 22.22 21.43 0.95 (0.85;1.1) ## 2 13.11 82.61 88.89 78.57 1.4 (2.1;0.74) ## 3 13.29 43.48 33.33 50.00 2.9 (4.9;0.8) ## 4 11.57 65.22 55.56 71.43 0.66 (-0.16;1.5) ## 5 11.68 21.74 22.22 21.43 0.94 (0.81;1.1) ## 6 11.86 73.91 77.78 71.43 0.85 (0.53;1.2) Volcano plot_volcano( da_res = dada2_ps_wilcox, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) Figure 14.12: Wilcoxon Rank-Sum test (16s example) 14.4 Metagenomics (MGS) The metagenomic data analysis pipeline is just the same as 16s. In briefly, the example comprises the following steps: Converting inputs into phyloseq object; Quality Evaluation; Pre-Processing Data; Diversity analysis; Ordination analysis; Composition analysis; 14.4.1 Converting inputs into phyloseq-class object The result of the in-house Metaphlan2/3 pipeline: /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metaphlan2_merged.tsv /home/xuxiaomin/project/standardized_analytics_workflow_R_function/demo_data/MGS/metadata.txt metaphlan2_res &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_merged.tsv&quot;, package = &quot;XMAS2&quot; ), header = TRUE, stringsAsFactors = FALSE ) metaphlan2_sam &lt;- read.table( system.file( &quot;extdata&quot;, &quot;metaphlan2_metadata.tsv&quot;, package = &quot;XMAS2&quot; ), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE ) metaphlan2_res_list &lt;- import_metaphlan_taxa(data_metaphlan2 = metaphlan2_res, taxa_level = &quot;Species&quot;) otu_tab &lt;- metaphlan2_res_list$abu_tab tax_tab &lt;- metaphlan2_res_list$tax_tab sam_tab &lt;- metaphlan2_sam %&gt;% tibble::column_to_rownames(&quot;SampleID&quot;) metaphlan2_ps &lt;- get_metaphlan_phyloseq( otu_tab = otu_tab, sam_tab = sam_tab, tax_tab = tax_tab) metaphlan2_ps ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 322 taxa and 23 samples ] ## sample_data() Sample Data: [ 23 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 322 taxa by 7 taxonomic ranks ] Here, the phyloseq object comprises three components (OTU Table, Sample Data and Taxonomy Table). 14.4.1.1 Summarize phyloseq-class object summarize_phyloseq(ps = metaphlan2_ps) ## Compositional = NO2 ## 1] Min. number of reads = 0.97918492] Max. number of reads = 1.00000023] Total number of reads = 22.92652624] Average number of reads = 0.9968054869565225] Median number of reads = 0.99980247] Sparsity = 0.7103699702943566] Any OTU sum to 1 or less? YES8] Number of singletons = 3199] Percent of OTUs that are singletons ## (i.e. exactly one read detected across all samples)010] Number of sample variables are: 2Groupphynotype2 ## [[1]] ## [1] &quot;1] Min. number of reads = 0.9791849&quot; ## ## [[2]] ## [1] &quot;2] Max. number of reads = 1.0000002&quot; ## ## [[3]] ## [1] &quot;3] Total number of reads = 22.9265262&quot; ## ## [[4]] ## [1] &quot;4] Average number of reads = 0.996805486956522&quot; ## ## [[5]] ## [1] &quot;5] Median number of reads = 0.9998024&quot; ## ## [[6]] ## [1] &quot;7] Sparsity = 0.710369970294356&quot; ## ## [[7]] ## [1] &quot;6] Any OTU sum to 1 or less? YES&quot; ## ## [[8]] ## [1] &quot;8] Number of singletons = 319&quot; ## ## [[9]] ## [1] &quot;9] Percent of OTUs that are singletons\\n (i.e. exactly one read detected across all samples)0&quot; ## ## [[10]] ## [1] &quot;10] Number of sample variables are: 2&quot; ## ## [[11]] ## [1] &quot;Group&quot; &quot;phynotype&quot; Notice the Sparsity (0.713), indicating the data has many zeros and pay attention to the downstream data analysis. 14.4.2 Quality Control 14.4.2.1 Spike-in sample (BRS) assessment Extract the species level phyloseq and obtain the BRS_ID metaphlan2_ps_species &lt;- summarize_taxa(ps = metaphlan2_ps, taxa_level = &quot;Species&quot;) metaphlan2_ps_species@sam_data ## Group phynotype ## s1 BB 0.00 ## s2 AA 2.50 ## s3 BB 0.00 ## s4 AA 1.25 ## s5 AA 30.00 ## s6 AA 15.00 ## s7 BB 8.75 ## s8 BB 0.00 ## s9 BB 3.75 ## s10 BB 2.50 ## s11 BB 15.00 ## s12 BB 2.50 ## s13 BB 2.50 ## s14 BB 0.00 ## s15 BB 1.07 ## s16 BB 2.50 ## s17 AA 5.00 ## s18 BB 35.00 ## s19 BB 7.50 ## s20 BB 15.00 ## s21 AA 3.75 ## s22 AA 3.75 ## refE QC NA Run run_RefCheck run_RefCheck( ps = metaphlan2_ps_species, BRS_ID = &quot;refE&quot;, Ref_type = &quot;MGS&quot;) ## Noting: the Reference Matrix is for MGS ## ## ############Matched baterica of the BRS sample############# ## The number of BRS&#39; bacteria matched the Reference Matrix is [16] ## s__Bifidobacterium_longum ## s__Bacteroides_ovatus ## s__Coprococcus_comes ## s__Bacteroides_vulgatus ## s__Bifidobacterium_adolescentis ## s__Bacteroides_thetaiotaomicron ## s__Streptococcus_salivarius ## s__Dorea_formicigenerans ## s__Bifidobacterium_pseudocatenulatum ## s__Bacteroides_uniformis ## s__Bacteroides_xylanisolvens ## s__Prevotella_copri ## s__Faecalibacterium_prausnitzii ## s__Collinsella_aerofaciens ## s__Lachnospiraceae_bacterium_5_1_63FAA ## s__Roseburia_hominis ## The number of bacteria unmatched the Reference Matrix is [11] ## s__Enterococcus_faecalis ## s__Escherichia_coli ## s__Bacteroides_fragilis ## s__Parabacteroides_goldsteinii ## s__Lactobacillus_salivarius ## s__Enterococcus_faecium ## s__Bifidobacterium_bifidum ## s__Lactobacillus_pentosus ## s__Eggerthella_unclassified ## s__Propionibacterium_acnes ## s__Bacteroides_intestinalis ## The number of the additional bacteria compared to the Reference Matrix is [56] ## ########################################################### ## ## ##################Status of the BRS sample################## ## Whether the BRS has the all bateria of Reference Matrix: FALSE ## Correlation Coefficient of the BRS is: -0.04118 ## Bray Curtis of the BRS is: 0.8735 ## Impurity of the BRS is: 32.69 ## ########################################################### ## #####Final Evaluation Results of the BRS ####### ## The BRS of sequencing dataset didn&#39;t pass the cutoff of the Reference Matrix ## ########################################################### ## 10471 10636 10637 10639 10640 10769 11115 11708 12592 13164 13331 ## Bifidobacterium_longum 8.11381 7.67316 7.50927 5.70807 4.86413 11.54558 13.32375 12.83483 8.31626 12.25656 11.64168 ## Bacteroides_ovatus 3.96168 3.92905 3.86741 4.44106 4.15994 2.99928 2.88927 2.74802 3.05585 2.78285 2.30211 ## Coprococcus_comes 4.16280 4.18702 4.65603 4.40718 5.15653 1.73091 1.44618 1.57966 1.78718 1.34019 1.50536 ## Bacteroides_vulgatus 3.35465 3.47741 3.43735 4.01041 3.92425 2.84171 2.73213 2.52132 3.08322 2.66631 2.21000 ## Bifidobacterium_adolescentis 5.11369 5.10202 5.16323 3.75219 3.55822 7.14673 7.12725 7.89869 5.49066 6.57327 8.94479 ## Bacteroides_thetaiotaomicron 3.24092 3.21696 3.20104 3.49194 3.50958 2.97032 3.00366 2.75088 3.22968 2.92743 2.43185 ## Streptococcus_salivarius 3.03030 2.85413 2.95267 2.96550 3.04982 3.35350 3.15495 3.10234 3.62476 3.37613 3.44728 ## Dorea_formicigenerans 2.79346 2.77945 2.91141 2.75671 3.01534 5.81678 4.69992 4.59889 5.74800 4.69777 5.32816 ## Bifidobacterium_pseudocatenulatum 3.38286 3.16577 3.07946 2.67246 2.40422 7.49415 8.06924 6.93314 5.83010 7.11283 6.83227 ## Bacteroides_uniformis 2.69622 2.41265 2.41435 2.59011 2.40581 1.73867 2.27891 1.82426 1.99951 1.96071 1.83481 ## Bacteroides_xylanisolvens 3.28194 3.29517 1.72138 2.23987 3.72633 3.04333 1.36887 2.58554 2.99954 1.36453 2.31131 ## Prevotella_copri 2.06364 1.82281 1.87249 1.93086 1.88097 1.91383 1.81769 1.79535 1.84980 1.93870 1.88402 ## Faecalibacterium_prausnitzii 0.77201 0.75578 0.79594 0.37908 0.35665 0.63169 0.86543 0.87373 0.37657 0.73631 0.78754 ## Collinsella_aerofaciens 0.53383 0.49729 0.50462 0.30319 0.25888 0.58329 0.82169 0.84559 0.41288 0.77006 0.75924 ## Lachnospiraceae_bacterium_5_1_63FAA 0.08820 0.10673 0.11128 0.10783 0.16420 0.16237 0.09083 0.09210 0.15412 0.08988 0.14991 ## Roseburia_hominis 0.06173 0.05838 0.06817 0.05414 0.04661 0.04053 0.05378 0.04942 0.04577 0.04584 0.04223 ## 13837 13864 13883 14294 14353 14514 14692 15043 15377 15378 15919 ## Bifidobacterium_longum 12.64388 11.36085 9.62482 14.35451 16.63263 9.93664 9.47707 7.11444 10.55997 9.07591 10.01176 ## Bacteroides_ovatus 3.17694 2.66994 3.27074 2.79573 2.87388 2.76674 3.46729 3.61227 3.49421 3.03110 2.76744 ## Coprococcus_comes 1.50964 2.40314 1.57698 1.80259 0.90812 2.26324 1.14835 2.96786 1.63088 2.32643 3.01294 ## Bacteroides_vulgatus 2.96186 2.72145 3.14976 2.63946 2.48610 1.13907 3.31856 3.57799 3.09254 2.91354 2.74777 ## Bifidobacterium_adolescentis 5.61210 8.56589 4.65487 10.81433 7.48894 6.53874 3.67914 5.04893 4.97484 6.27492 7.89443 ## Bacteroides_thetaiotaomicron 3.08880 2.69349 3.16444 2.91993 2.85340 2.73612 3.35522 3.27933 3.31300 2.86402 2.80401 ## Streptococcus_salivarius 2.77444 3.02809 3.36832 2.02332 1.53413 3.34476 2.87564 3.03138 3.04584 3.40593 3.34746 ## Dorea_formicigenerans 3.87336 5.77030 4.74969 3.53538 2.11433 5.06140 4.15264 4.08469 3.82179 4.98571 5.45250 ## Bifidobacterium_pseudocatenulatum 6.94208 7.37838 6.99361 7.25508 7.47245 6.23862 7.24651 4.26102 5.33878 5.24604 5.91290 ## Bacteroides_uniformis 2.04324 1.78350 2.02260 2.01742 1.98683 1.82686 2.04989 2.41251 2.38475 2.14047 1.77245 ## Bacteroides_xylanisolvens 2.89389 1.56784 1.85183 2.81483 2.68261 1.41685 2.07120 2.13182 1.70626 1.60105 2.74080 ## Prevotella_copri 1.78612 1.79223 1.83212 1.42012 1.17209 2.40416 1.65334 1.96898 1.69163 1.79573 1.88316 ## Faecalibacterium_prausnitzii 0.64940 0.70535 0.60128 0.56506 0.64019 0.88437 0.50048 0.45379 0.61515 0.73538 0.55683 ## Collinsella_aerofaciens 0.70488 0.63986 0.58174 0.67414 0.83075 0.76540 0.52348 0.42563 0.65863 0.58767 0.54864 ## Lachnospiraceae_bacterium_5_1_63FAA 0.08142 0.27602 0.12902 0.14446 0.04769 0.15494 0.08348 0.13126 0.07500 0.16364 0.28232 ## Roseburia_hominis 0.04609 0.04508 0.04129 0.03465 0.04144 0.05359 0.03803 0.05785 0.04990 0.04607 0.05414 ## 16048 16316 16319 16347 16379 16416 16643 17346 17358 17367 17447 ## Bifidobacterium_longum 9.69043 7.52306 7.55665 9.70590 6.84815 9.89749 11.31632 7.66734 9.86840 10.87283 3.25866 ## Bacteroides_ovatus 3.03531 3.32437 3.45295 3.62218 3.75943 2.96599 3.02706 3.40560 3.41400 3.08738 6.09596 ## Coprococcus_comes 2.96924 3.59466 3.57862 1.76048 2.61452 2.04108 1.76011 3.69207 2.09069 2.24782 2.02841 ## Bacteroides_vulgatus 3.09935 3.44793 3.53090 3.23231 3.49744 2.82052 3.00506 3.46903 3.43126 3.08539 6.05372 ## Bifidobacterium_adolescentis 6.52876 5.88728 5.87504 4.35779 4.40074 5.76228 5.49289 6.01398 5.36079 6.43311 2.12800 ## Bacteroides_thetaiotaomicron 3.13347 3.04083 3.11459 3.14863 3.26102 3.08699 3.02583 3.08416 3.41487 3.08820 5.93408 ## Streptococcus_salivarius 3.71090 3.67183 3.79982 3.06091 3.75770 3.55959 3.12754 3.69879 3.50295 3.44364 1.88983 ## Dorea_formicigenerans 4.72522 4.64591 4.55858 2.69263 3.56759 4.79519 4.50406 4.68564 4.01979 4.17924 1.81824 ## Bifidobacterium_pseudocatenulatum 5.77564 4.57475 4.62962 4.96492 3.94615 6.14754 7.24626 4.57054 6.23848 6.40033 2.29354 ## Bacteroides_uniformis 1.98889 2.21392 2.01888 2.42394 2.38767 2.05014 2.07140 2.26052 2.19181 2.14782 3.36615 ## Bacteroides_xylanisolvens 1.62204 3.19530 2.09612 3.13471 3.43980 1.53912 1.63411 1.87350 3.22991 2.79352 4.25302 ## Prevotella_copri 2.07287 1.97112 1.93353 1.71181 1.91259 1.90389 1.82113 1.97873 2.03877 1.98940 3.87635 ## Faecalibacterium_prausnitzii 0.90999 0.47017 0.44729 0.57450 0.52308 0.68340 0.62311 0.47828 0.71111 0.83658 0.71278 ## Collinsella_aerofaciens 0.67753 0.37548 0.39634 0.58473 0.44993 0.63777 0.67223 0.42236 0.62913 0.68843 0.11636 ## Lachnospiraceae_bacterium_5_1_63FAA 0.20016 0.21536 0.24479 0.05832 0.10769 0.14313 0.10475 0.22438 0.11106 0.11605 0.10150 ## Roseburia_hominis 0.05873 0.03554 0.03999 0.04928 0.04970 0.04974 0.04541 0.05218 0.06504 0.05955 0.07687 ## 17574 17614 17907 18003 18123 18158 18254 18652 18748 18883 19025 ## Bifidobacterium_longum 9.70406 12.12046 11.29858 12.01189 12.41898 4.70889 9.50685 8.61060 10.72595 2.23603 11.74855 ## Bacteroides_ovatus 3.54582 3.36962 3.43196 3.25432 3.33751 4.70126 3.99162 3.65097 3.61472 4.00635 3.48854 ## Coprococcus_comes 2.65329 1.61138 1.25244 1.16593 1.32943 1.40043 1.30588 2.02912 1.43181 1.89141 1.34869 ## Bacteroides_vulgatus 3.56764 3.17270 3.06646 2.90266 2.94911 4.49320 3.65775 1.26550 3.17810 4.38594 3.23491 ## Bifidobacterium_adolescentis 6.20718 5.07402 4.43160 4.60358 4.28572 1.30207 2.33770 3.42930 4.09908 0.94154 3.49924 ## Bacteroides_thetaiotaomicron 3.56745 3.27350 3.26772 3.23674 3.41009 4.11730 3.64058 3.49090 3.39957 3.64130 3.39626 ## Streptococcus_salivarius 2.80874 3.07036 2.35949 2.37727 2.65054 2.85711 2.75597 3.69704 2.82017 3.50685 2.92942 ## Dorea_formicigenerans 5.04111 3.41703 2.39040 2.56918 2.72636 2.71430 2.65012 3.86167 2.61596 3.73633 3.41932 ## Bifidobacterium_pseudocatenulatum 7.95284 7.22140 5.17439 6.28844 3.52229 3.57447 5.32369 4.92522 5.16928 1.98442 6.81628 ## Bacteroides_uniformis 2.19323 2.31014 2.40477 2.34879 2.39751 2.37414 2.45354 2.46187 2.60847 1.67152 2.32171 ## Bacteroides_xylanisolvens 3.45689 1.71452 3.01134 2.84196 3.26709 3.28925 2.01041 3.45202 1.59493 4.40960 1.76766 ## Prevotella_copri 2.16416 1.90331 1.42260 1.55162 1.66520 1.44533 1.65372 2.31028 1.58613 1.18808 1.70884 ## Faecalibacterium_prausnitzii 1.03155 0.66410 0.55844 0.56703 0.73728 0.25535 0.43809 0.69166 0.55123 0.15787 0.62797 ## Collinsella_aerofaciens 0.66214 0.71605 0.62589 0.62440 0.82628 0.23027 0.48497 0.44362 0.56426 0.10648 0.66458 ## Lachnospiraceae_bacterium_5_1_63FAA 0.14738 0.07041 0.04965 0.03878 0.06610 0.05536 0.05088 0.07484 0.05303 0.13114 0.05452 ## Roseburia_hominis 0.06064 0.05456 0.03377 0.04043 0.05243 0.02538 0.04090 0.04658 0.03987 0.02035 0.03542 ## 19151 19175 7682 7683 7684 7685 7842 7843 7844 7845 8108 ## Bifidobacterium_longum 12.83975 9.35652 10.61692 9.70452 10.26646 7.90970 11.09287 11.49847 12.31085 11.76466 9.55827 ## Bacteroides_ovatus 3.42018 3.75385 3.09351 3.31482 3.12081 3.31232 3.53564 3.46157 3.38687 3.44778 3.66184 ## Coprococcus_comes 1.07983 1.49248 2.25102 2.31762 2.12264 2.45777 1.21536 1.14849 1.07774 1.08142 1.32528 ## Bacteroides_vulgatus 3.14217 3.41299 3.05040 3.30423 3.22814 3.27619 3.28027 3.18516 3.11734 3.07863 3.52520 ## Bifidobacterium_adolescentis 3.48965 3.62408 7.16903 6.45453 6.70040 6.27837 4.72418 4.74670 4.96916 4.86254 4.15176 ## Bacteroides_thetaiotaomicron 3.24309 3.31257 3.27164 3.33818 3.30218 3.46399 3.39208 3.37336 3.33352 3.35704 3.39183 ## Streptococcus_salivarius 2.45071 3.03755 3.05755 3.16055 3.01270 3.87922 2.89674 2.66865 2.60725 2.59000 3.08853 ## Dorea_formicigenerans 2.69458 3.28704 4.86800 5.05830 5.04009 5.51199 3.42631 3.08640 3.15582 2.74630 3.58930 ## Bifidobacterium_pseudocatenulatum 7.13176 5.15000 6.09864 6.02910 6.40770 5.17550 5.83949 5.98674 7.11737 5.97672 5.82470 ## Bacteroides_uniformis 2.30261 2.36019 2.27961 2.24583 1.91842 2.19582 2.40040 2.31289 2.33899 2.40465 2.29439 ## Bacteroides_xylanisolvens 1.74067 3.38269 3.18674 3.28090 3.16414 3.41045 1.74224 3.26467 1.68023 1.61949 3.44844 ## Prevotella_copri 1.59313 1.67610 1.83093 1.78060 1.72074 2.06993 1.59277 1.59619 1.60078 1.62372 1.66857 ## Faecalibacterium_prausnitzii 0.57442 0.47734 0.48718 0.44086 0.46882 0.50270 0.53280 0.54786 0.57838 0.53260 0.49590 ## Collinsella_aerofaciens 0.70420 0.49820 0.46253 0.41782 0.49708 0.44309 0.65567 0.67716 0.74469 0.66016 0.56383 ## Lachnospiraceae_bacterium_5_1_63FAA 0.03893 0.06620 0.21907 0.24488 0.24101 0.28909 0.06532 0.06853 0.05540 0.05118 0.09357 ## Roseburia_hominis 0.04302 0.03460 0.04239 0.03360 0.03617 0.02561 0.04120 0.03532 0.03681 0.03786 0.03727 ## 8635 8952 9456 9474 refE mean ## Bifidobacterium_longum 11.16770 4.86230 6.59407 10.18399 0.01646 9.56031933 ## Bacteroides_ovatus 3.98663 4.11944 3.92516 2.55709 0.25782 3.38335083 ## Coprococcus_comes 1.15150 1.33169 1.19713 2.89442 0.01444 2.05775917 ## Bacteroides_vulgatus 3.62765 4.19069 3.80546 2.61231 2.14684 3.19229017 ## Bifidobacterium_adolescentis 2.92750 1.96201 2.61821 9.42034 0.04649 5.16690850 ## Bacteroides_thetaiotaomicron 3.96140 4.19124 3.99868 2.51572 1.47422 3.26234733 ## Streptococcus_salivarius 2.21486 3.35305 3.19640 4.85477 0.02846 3.03073567 ## Dorea_formicigenerans 2.38047 3.72882 3.78772 9.53378 0.02775 3.90007033 ## Bifidobacterium_pseudocatenulatum 4.42916 3.93062 5.15710 6.29975 0.15023 5.47845067 ## Bacteroides_uniformis 2.53793 2.12691 2.16248 1.81519 0.21061 2.18617133 ## Bacteroides_xylanisolvens 2.09226 4.32609 3.18280 2.51190 0.32466 2.55669967 ## Prevotella_copri 1.40278 1.52016 1.60503 2.15390 60.84109 2.80426200 ## Faecalibacterium_prausnitzii 0.56323 0.26951 0.39457 0.83952 1.61939 0.61356583 ## Collinsella_aerofaciens 0.69060 0.26595 0.35697 0.66164 0.07251 0.55337850 ## Lachnospiraceae_bacterium_5_1_63FAA 0.05638 0.12398 0.09152 0.28340 0.06825 0.12271150 ## Roseburia_hominis 0.04124 0.02332 0.02846 0.05067 0.01307 0.04446167 ## Evaluation ## Bifidobacterium_longum refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bacteroides_ovatus refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Coprococcus_comes refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bacteroides_vulgatus refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bifidobacterium_adolescentis refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bacteroides_thetaiotaomicron refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Streptococcus_salivarius refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Dorea_formicigenerans refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bifidobacterium_pseudocatenulatum refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bacteroides_uniformis refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Bacteroides_xylanisolvens refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Prevotella_copri refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Faecalibacterium_prausnitzii refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Collinsella_aerofaciens refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Lachnospiraceae_bacterium_5_1_63FAA refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## Roseburia_hominis refE didn&#39;t pass the threshold (2023-04-12 14:45:38). ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 1 rows ] The spike-in samples didn’t pass the cutoff and failed to add the the Reference Matrix. 14.4.2.2 Spike-in sample’s remove metaphlan2_ps_remove_BRS &lt;- get_GroupPhyloseq( ps = metaphlan2_ps, group = &quot;Group&quot;, group_names = &quot;QC&quot;, discard = TRUE) metaphlan2_ps_remove_BRS ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 322 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 322 taxa by 7 taxonomic ranks ] 14.4.3 Data processing This part has too may procedures and we only choose some of them. Please go to Chapter 6 to see more approaches and details for being familiar with this part. 14.4.3.1 Extracting specific taxonomic level metaphlan2_ps_species &lt;- summarize_taxa(ps = metaphlan2_ps_remove_BRS, taxa_level = &quot;Species&quot;) metaphlan2_ps_species ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 321 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 321 taxa by 7 taxonomic ranks ] 14.4.3.2 Filtering the low relative abundance or unclassified taxa by the threshold (total counts &lt; 1e-4) The condition to filter low relative abundance is according to this article (Thingholm et al. 2019). Species from taxonomic profiles were retained for further analysis if their mean relative abundance exceeded 0.005 (0.5%) across the dataset with a minimum abundance of 0.05 (5%) in at least one sample and non-zero abundance in at least 60% of samples. There are three conditions Mean relative abundance: 0.005; Minimum relative abundance: 0.05; Occurrence: 60%. Here, we use 0.01 (the 1e-4 regarded as 0.01 compared to the Referece because Metaphlan2 data had been divided 100) metaphlan2_ps_species_filter &lt;- run_filter(ps = metaphlan2_ps_species, cutoff = 1e-4, unclass = TRUE) metaphlan2_ps_species_filter ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 231 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 231 taxa by 7 taxonomic ranks ] 14.4.3.3 Trimming the taxa with low occurrence less than threshold metaphlan2_ps_species_filter_trim &lt;- run_trim(object = metaphlan2_ps_species_filter, cutoff = 0.1, trim = &quot;feature&quot;) metaphlan2_ps_species_filter_trim ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 179 taxa and 22 samples ] ## sample_data() Sample Data: [ 22 samples by 2 sample variables ] ## tax_table() Taxonomy Table: [ 179 taxa by 7 taxonomic ranks ] Finally, we obtained the final phyloseq-class object metaphlan2_ps_species_filter_trim and changed its name. 14.4.4 Diversity analysis 14.4.4.1 Alpha diveristy Calculate the alpha diversity Notes: choosing the measures (Shannon, Simpson and InvSimpson) only for relative abundance. metaphlan2_ps_genus_alpha &lt;- run_alpha_diversity(ps = metaphlan2_ps_remove_BRS, measures = c(&quot;Shannon&quot;, &quot;Simpson&quot;, &quot;InvSimpson&quot;)) head(metaphlan2_ps_genus_alpha) ## TempRowNames Group phynotype Shannon Simpson InvSimpson ## 1 s1 BB 0.00 2.876002 0.9108857 11.221549 ## 2 s2 AA 2.50 2.045392 0.8105742 5.279111 ## 3 s3 BB 0.00 3.441176 0.9439371 17.837114 ## 4 s4 AA 1.25 2.746155 0.8290417 5.849380 ## 5 s5 AA 30.00 1.450722 0.6412178 2.787207 ## 6 s6 AA 15.00 2.619951 0.8950369 9.527154 visualization plot_boxplot(data = metaphlan2_ps_genus_alpha, y_index = c(&quot;Shannon&quot;, &quot;Simpson&quot;, &quot;InvSimpson&quot;), group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;red&quot;, &quot;blue&quot;), method = &quot;wilcox.test&quot;) Figure 14.13: Alpha diversity (MGS example) 14.4.4.2 Beta diversity beta dipersion metaphlan2_ps_beta &lt;- run_beta_diversity(ps = metaphlan2_ps_species_filter_trim, method = &quot;bray&quot;, group = &quot;Group&quot;) ## ## Permutation test for homogeneity of multivariate dispersions ## Permutation: free ## Number of permutations: 999 ## ## Response: Distances ## Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) ## Groups 1 0.005966 0.0059663 0.7914 999 0.372 ## Residuals 20 0.150783 0.0075392 ## ## Pairwise comparisons: ## (Observed p-value below diagonal, permuted p-value above diagonal) ## AA BB ## AA 0.365 ## BB 0.38426 metaphlan2_ps_beta$BetaDispersion Figure 14.14: Beta diversity (MGS example) 14.4.5 PERMANOVA + Ordination 14.4.5.1 PERMANOVA metaphlan2_ps_per &lt;- run_permanova(ps = metaphlan2_ps_species_filter_trim, method = &quot;bray&quot;, columns = &quot;Group&quot;) head(metaphlan2_ps_per) ## SumsOfSample Df SumsOfSqs MeanSqs F.Model R2 Pr(&gt;F) AdjustedPvalue ## Group 22 1 0.8452127 0.8452127 2.728018 0.1200289 0.002 0.002 The PERMANOVA result of the Group (AdjustedPvalue &lt; 0.05) revealed that the two groups had the distinct patterns of microbial community. 14.4.5.2 Ordination We performed ordination by using Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP). If you want to try other methods please go to see Chapter 8 for more details. metaphlan2_ps_ordination &lt;- run_ordination( ps = metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, method = &quot;UMAP&quot;) plot_Ordination(ResultList = metaphlan2_ps_ordination, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), group_color = c(&quot;blue&quot;, &quot;red&quot;), sample = TRUE, sidelinechart = FALSE, circle_type = &quot;ellipse_line&quot;, sideboxplot = TRUE) Figure 14.15: PCoA (MGS example) 14.4.6 Microbial composition 14.4.6.1 Stacked barplot XVIZ package plot_stacked_bar_XIVZ( phyloseq = metaphlan2_ps_species, level = &quot;Phylum&quot;, feature = &quot;Group&quot;) Figure 14.16: Microbial composition (MGS) XVIZ XMAS package plot_StackBarPlot( ps = metaphlan2_ps_species, taxa_level = &quot;Phylum&quot;, group = &quot;Group&quot;, cluster = TRUE) ## [1] &quot;This palatte have 20 colors!&quot; Figure 14.17: Microbial composition (MGS example) 14.4.6.2 Core microbiota visualization library(RColorBrewer) prevalences &lt;- seq(0.05, 1, 0.05) detections &lt;- 10^seq(log10(1e-3), log10(.2), length = 10) plot_core_taxa(metaphlan2_ps_species_filter_trim, plot.type = &quot;heatmap&quot;, colours = rev(brewer.pal(5, &quot;Spectral&quot;)), prevalences = prevalences, detections = detections, min.prevalence = 0.5)+ xlab(&quot;Detection Threshold (Relative Abundance (%))&quot;) + theme(axis.text.y = element_text(face=&quot;italic&quot;)) Figure 14.18: Core taxa (MGS example) The degree of color indicates the size of abundance and prevalence. Use core_members to obtain the core taxa. detection for abundance and prevalence for occurrence. core_taxa_name &lt;- core_members(metaphlan2_ps_species_filter_trim, detection = 0.001, prevalence = 0.5) print(core_taxa_name) ## [1] &quot;s__Bacteroides_ovatus&quot; &quot;s__Bacteroides_thetaiotaomicron&quot; &quot;s__Bacteroides_uniformis&quot; ## [4] &quot;s__Bacteroides_vulgatus&quot; &quot;s__Bifidobacterium_longum&quot; &quot;s__Bifidobacterium_pseudocatenulatum&quot; ## [7] &quot;s__Collinsella_aerofaciens&quot; &quot;s__Escherichia_coli&quot; &quot;s__Eubacterium_eligens&quot; ## [10] &quot;s__Eubacterium_hallii&quot; &quot;s__Faecalibacterium_prausnitzii&quot; &quot;s__Roseburia_inulinivorans&quot; ## [13] &quot;s__Ruminococcus_gnavus&quot; &quot;s__Ruminococcus_obeum&quot; &quot;s__Ruminococcus_sp_5_1_39BFAA&quot; ## [16] &quot;s__Ruminococcus_torques&quot; &quot;s__Streptococcus_salivarius&quot; Result: 17 species passed the threshold of detection and prevalence which we choose. 14.4.7 Differential Analysis There are more than 10 approaches to perform differential analysis. Here, we choose two of them and recommend users going to Chapter 10 to see more detials. 14.4.7.1 Liner discriminant analysis (LDA) effect size (LEfSe) Calculation metaphlan2_ps_lefse &lt;- run_lefse( ps = metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;), norm = &quot;CPM&quot;, Lda = 2) head(metaphlan2_ps_lefse) ## TaxaID Block Enrichment LDA_Score EffectSize Log2FoldChange (Median)\\nAA_vs_BB ## 1 s__Actinomyces_odontolyticus 7_AA vs 15_BB BB 2.354203 0.09521043 NA ## 2 s__Bacteroides_thetaiotaomicron 7_AA vs 15_BB AA -4.429029 4.25590505 5.422189 ## 3 s__Bifidobacterium_adolescentis 7_AA vs 15_BB BB 4.443556 4.18357937 NA ## 4 s__Bifidobacterium_longum 7_AA vs 15_BB BB 4.446101 2.06541430 -4.651371 ## 5 s__Clostridium_bartlettii 7_AA vs 15_BB BB 2.927763 1.73866565 NA ## 6 s__Collinsella_aerofaciens 7_AA vs 15_BB BB 3.839013 3.22865691 NA ## Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB Log2FoldChange (Mean)\\nAA_vs_BB Mean Abundance\\n(All) ## 1 0.0000 0.000 5.595339 NA 16.83488 ## 2 2878.5476 46631.686 1087.526189 3.198416 24113.15854 ## 3 0.0000 0.000 3843.156200 NA 36041.41284 ## 4 11049.6932 1203.167 30236.246304 -3.717363 41205.25130 ## 5 287.0742 0.000 459.271930 -3.712705 1293.74022 ## 6 7678.6818 0.000 13208.610915 -3.239758 12628.30960 ## Mean Abundance\\nAA Mean Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 0.0000 24.69116 40.91 0.00 60.00 &lt;NA&gt; ## 2 61441.3764 6693.32352 90.91 100.00 86.67 0.064 (-5.3;5.5) ## 3 0.0000 52860.73882 40.91 0.00 60.00 &lt;NA&gt; ## 4 4437.1597 58363.69406 86.36 85.71 86.67 270 (280;260) ## 5 139.7505 1832.26875 68.18 42.86 80.00 450 (470;440) ## 6 1868.4023 17649.59965 63.64 42.86 73.33 28 (35;22) Visualization # # don&#39;t run this code when you do lefse in reality # metaphlan2_ps_lefse$LDA_Score &lt;- metaphlan2_ps_lefse$LDA_Score * 100 plot_lefse( da_res = metaphlan2_ps_lefse, x_index = &quot;LDA_Score&quot;, x_index_cutoff = 2, group_color = c(&quot;green&quot;, &quot;red&quot;)) Figure 14.19: Lefse analysis (MGS example) 14.4.7.2 Wilcoxon Rank-Sum test Calculation metaphlan2_ps_wilcox &lt;- run_wilcox( ps = metaphlan2_ps_species_filter_trim, group = &quot;Group&quot;, group_names = c(&quot;AA&quot;, &quot;BB&quot;)) head(metaphlan2_ps_wilcox) ## TaxaID Block Enrichment EffectSize Statistic Pvalue AdjustedPvalue ## 1 s__Acidaminococcus_fermentans 7_AA vs 15_BB Nonsignif 0 56.0 0.75333110 0.9943441 ## 2 s__Acidaminococcus_intestini 7_AA vs 15_BB Nonsignif 0 56.0 0.75333110 0.9943441 ## 3 s__Actinomyces_odontolyticus 7_AA vs 15_BB Nonsignif 0 84.0 0.01422085 0.4231206 ## 4 s__Adlercreutzia_equolifaciens 7_AA vs 15_BB Nonsignif 0 69.0 0.20574213 0.8520370 ## 5 s__Akkermansia_muciniphila 7_AA vs 15_BB Nonsignif 0 40.0 0.15644663 0.8282703 ## 6 s__Alistipes_finegoldii 7_AA vs 15_BB Nonsignif 0 53.5 0.96929699 1.0000000 ## Log2FoldChange (Median)\\nAA_vs_BB Median Abundance\\n(All) Median Abundance\\nAA Median Abundance\\nBB ## 1 NA 0 0.0000000 0.000000 ## 2 NA 0 0.0000000 0.000000 ## 3 NA 0 0.0000000 -6.047372 ## 4 NA 0 0.0000000 -1.515927 ## 5 NA 0 0.0000000 0.000000 ## 6 NA 0 -0.3835768 0.000000 ## Log2FoldChange (Rank)\\nAA_vs_BB Mean Rank Abundance\\nAA Mean Rank Abundance\\nBB Occurrence (100%)\\n(All) Occurrence (100%)\\nAA ## 1 0.09054689 12.00 11.27 18.18 14.29 ## 2 0.09054689 12.00 11.27 18.18 14.29 ## 3 0.76733924 16.00 9.40 40.91 0.00 ## 4 0.41434373 13.86 10.40 40.91 14.29 ## 5 -0.34462960 9.71 12.33 13.64 28.57 ## 6 0.02626565 11.64 11.43 45.45 57.14 ## Occurrence (100%)\\nBB Odds Ratio (95% CI) ## 1 20.00 1.2 (1.5;0.86) ## 2 20.00 0.9 (0.71;1.1) ## 3 60.00 &lt;NA&gt; ## 4 53.33 9.1e+13 (9.1e+13;9.1e+13) ## 5 6.67 0.78 (0.3;1.3) ## 6 40.00 0.36 (-1.7;2.4) Volcano plot_volcano( da_res = metaphlan2_ps_wilcox, group_names = c(&quot;AA&quot;, &quot;BB&quot;), x_index = &quot;Log2FoldChange (Rank)\\nAA_vs_BB&quot;, x_index_cutoff = 0.5, y_index = &quot;Pvalue&quot;, y_index_cutoff = 0.05, group_color = c(&quot;red&quot;, &quot;grey&quot;, &quot;blue&quot;), topN = 5) Figure 14.20: Wilcoxon Rank-Sum test (MGS example) 14.5 Systematic Information devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.2 (2021-11-01) ## os macOS Monterey 12.2.1 ## system x86_64, darwin17.0 ## ui RStudio ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Asia/Shanghai ## date 2023-04-12 ## rstudio 2022.07.2+576 Spotted Wakerobin (desktop) ## pandoc 2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.1.0) ## ade4 1.7-18 2021-09-16 [1] CRAN (R 4.1.0) ## ALDEx2 1.30.0 2022-11-01 [1] Bioconductor ## annotate 1.72.0 2021-10-26 [1] Bioconductor ## AnnotationDbi 1.60.2 2023-03-10 [1] Bioconductor ## ape * 5.6-2 2022-03-02 [1] CRAN (R 4.1.2) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.1.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.1.0) ## backports 1.4.1 2021-12-13 [1] CRAN (R 4.1.0) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.1.0) ## bayesm 3.1-4 2019-10-15 [1] CRAN (R 4.1.0) ## Biobase * 2.54.0 2021-10-26 [1] Bioconductor ## BiocGenerics * 0.40.0 2021-10-26 [1] Bioconductor ## BiocParallel 1.28.3 2021-12-09 [1] Bioconductor ## biomformat 1.22.0 2021-10-26 [1] Bioconductor ## Biostrings 2.62.0 2021-10-26 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.1.0) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.1.0) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.1.0) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.1.0) ## bookdown 0.29 2022-09-12 [1] CRAN (R 4.1.2) ## brio 1.1.3 2021-11-30 [1] CRAN (R 4.1.0) ## broom 1.0.1 2022-08-29 [1] CRAN (R 4.1.2) ## bslib 0.4.0 2022-07-16 [1] CRAN (R 4.1.2) ## cachem 1.0.6 2021-08-19 [1] CRAN (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.1.0) ## car 3.0-12 2021-11-06 [1] CRAN (R 4.1.0) ## carData 3.0-5 2022-01-06 [1] CRAN (R 4.1.2) ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.1.0) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.1.0) ## class 7.3-20 2022-01-13 [1] CRAN (R 4.1.2) ## classInt 0.4-3 2020-04-07 [1] CRAN (R 4.1.0) ## cli 3.4.1 2022-09-23 [1] CRAN (R 4.1.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.1.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.1.2) ## coin 1.4-2 2021-10-08 [1] CRAN (R 4.1.0) ## colorspace 2.0-3 2022-02-21 [1] CRAN (R 4.1.2) ## compositions 2.0-4 2022-01-05 [1] CRAN (R 4.1.2) ## conflicted * 1.1.0 2021-11-26 [1] CRAN (R 4.1.0) ## corrplot 0.92 2021-11-18 [1] CRAN (R 4.1.0) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.1.0) ## crayon 1.5.0 2022-02-14 [1] CRAN (R 4.1.2) ## crosstalk 1.2.0 2021-11-04 [1] CRAN (R 4.1.0) ## data.table 1.14.6 2022-11-16 [1] CRAN (R 4.1.2) ## DBI 1.1.2 2021-12-20 [1] CRAN (R 4.1.0) ## DelayedArray 0.20.0 2021-10-26 [1] Bioconductor ## DEoptimR 1.0-10 2022-01-03 [1] CRAN (R 4.1.2) ## desc 1.4.1 2022-03-06 [1] CRAN (R 4.1.2) ## DESeq2 1.34.0 2021-10-26 [1] Bioconductor ## devtools * 2.4.3 2021-11-30 [1] CRAN (R 4.1.0) ## digest 0.6.30 2022-10-18 [1] CRAN (R 4.1.2) ## dplyr * 1.0.10 2022-09-01 [1] CRAN (R 4.1.2) ## DT 0.21 2022-02-26 [1] CRAN (R 4.1.2) ## e1071 1.7-9 2021-09-16 [1] CRAN (R 4.1.0) ## edgeR 3.36.0 2021-10-26 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.1.0) ## evaluate 0.17 2022-10-07 [1] CRAN (R 4.1.2) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.1.0) ## fansi 1.0.2 2022-01-14 [1] CRAN (R 4.1.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.1.0) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.1.0) ## foreach 1.5.2 2022-02-02 [1] CRAN (R 4.1.2) ## foreign 0.8-82 2022-01-13 [1] CRAN (R 4.1.2) ## forestplot 2.0.1 2021-09-03 [1] CRAN (R 4.1.0) ## formatR 1.11 2021-06-01 [1] CRAN (R 4.1.0) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] CRAN (R 4.1.0) ## futile.logger * 1.4.3 2016-07-10 [1] CRAN (R 4.1.0) ## futile.options 1.0.1 2018-04-20 [1] CRAN (R 4.1.0) ## genefilter 1.76.0 2021-10-26 [1] Bioconductor ## geneplotter 1.72.0 2021-10-26 [1] Bioconductor ## generics 0.1.2 2022-01-31 [1] CRAN (R 4.1.2) ## GenomeInfoDb * 1.30.1 2022-01-30 [1] Bioconductor ## GenomeInfoDbData 1.2.7 2022-03-09 [1] Bioconductor ## GenomicRanges * 1.46.1 2021-11-18 [1] Bioconductor ## ggiraph 0.8.2 2022-02-22 [1] CRAN (R 4.1.2) ## ggiraphExtra 0.3.0 2020-10-06 [1] CRAN (R 4.1.2) ## ggplot2 * 3.4.0 2022-11-04 [1] CRAN (R 4.1.2) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.1.0) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.1.0) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.1.0) ## ggsignif 0.6.3 2021-09-09 [1] CRAN (R 4.1.0) ## ggVennDiagram 1.2.1 2022-04-13 [1] Github (gaospecial/ggVennDiagram@db6742d) ## glmnet 4.1-3 2021-11-02 [1] CRAN (R 4.1.0) ## glue * 1.6.2 2022-02-24 [1] CRAN (R 4.1.2) ## Gmisc * 3.0.0 2022-01-03 [1] CRAN (R 4.1.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.1.0) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.1.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.1.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.1.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.1.0) ## Hmisc 4.6-0 2021-10-07 [1] CRAN (R 4.1.0) ## hms 1.1.1 2021-09-26 [1] CRAN (R 4.1.0) ## htmlTable * 2.4.0 2022-01-04 [1] CRAN (R 4.1.2) ## htmltools 0.5.3 2022-07-18 [1] CRAN (R 4.1.2) ## htmlwidgets 1.5.4 2021-09-08 [1] CRAN (R 4.1.0) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.1.0) ## igraph 1.2.11 2022-01-04 [1] CRAN (R 4.1.2) ## insight 0.17.0 2022-03-29 [1] CRAN (R 4.1.2) ## IRanges * 2.28.0 2021-10-26 [1] Bioconductor ## iterators 1.0.14 2022-02-05 [1] CRAN (R 4.1.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.1.0) ## jsonlite 1.8.3 2022-10-21 [1] CRAN (R 4.1.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.1.2) ## KEGGREST 1.34.0 2021-10-26 [1] Bioconductor ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.1.2) ## knitr 1.40 2022-08-24 [1] CRAN (R 4.1.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.1.0) ## lambda.r 1.2.4 2019-09-18 [1] CRAN (R 4.1.0) ## lattice * 0.20-45 2021-09-22 [1] CRAN (R 4.1.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.1.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.1.0) ## libcoin 1.0-9 2021-09-27 [1] CRAN (R 4.1.0) ## lifecycle 1.0.3 2022-10-07 [1] CRAN (R 4.1.2) ## limma 3.50.1 2022-02-17 [1] Bioconductor ## locfit 1.5-9.5 2022-03-03 [1] CRAN (R 4.1.2) ## LOCOM 1.1 2022-08-05 [1] Github (yijuanhu/LOCOM@c181e0f) ## lubridate 1.8.0 2021-10-07 [1] CRAN (R 4.1.0) ## magrittr * 2.0.3 2022-03-30 [1] CRAN (R 4.1.2) ## MASS 7.3-55 2022-01-13 [1] CRAN (R 4.1.2) ## Matrix 1.4-0 2021-12-08 [1] CRAN (R 4.1.0) ## MatrixGenerics * 1.6.0 2021-10-26 [1] Bioconductor ## matrixStats * 0.61.0 2021-09-17 [1] CRAN (R 4.1.0) ## mbzinb 0.2 2022-03-16 [1] local ## memoise 2.0.1 2021-11-26 [1] CRAN (R 4.1.0) ## metagenomeSeq 1.36.0 2021-10-26 [1] Bioconductor ## mgcv 1.8-39 2022-02-24 [1] CRAN (R 4.1.2) ## microbiome 1.16.0 2021-10-26 [1] Bioconductor ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.1.0) ## multcomp 1.4-18 2022-01-04 [1] CRAN (R 4.1.2) ## multtest 2.50.0 2021-10-26 [1] Bioconductor ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.1.0) ## mvtnorm 1.1-3 2021-10-08 [1] CRAN (R 4.1.0) ## mycor 0.1.1 2018-04-10 [1] CRAN (R 4.1.0) ## NADA 1.6-1.1 2020-03-22 [1] CRAN (R 4.1.0) ## nlme * 3.1-155 2022-01-13 [1] CRAN (R 4.1.2) ## nnet 7.3-17 2022-01-13 [1] CRAN (R 4.1.2) ## openssl 2.0.0 2022-03-02 [1] CRAN (R 4.1.2) ## permute * 0.9-7 2022-01-27 [1] CRAN (R 4.1.2) ## pheatmap * 1.0.12 2019-01-04 [1] CRAN (R 4.1.0) ## phyloseq * 1.38.0 2021-10-26 [1] Bioconductor ## picante * 1.8.2 2020-06-10 [1] CRAN (R 4.1.0) ## pillar 1.7.0 2022-02-01 [1] CRAN (R 4.1.2) ## pkgbuild 1.3.1 2021-12-20 [1] CRAN (R 4.1.0) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] CRAN (R 4.1.0) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.1.0) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.1.0) ## ppcor 1.1 2015-12-03 [1] CRAN (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.1.0) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.1.0) ## protoclust 1.6.3 2019-01-31 [1] CRAN (R 4.1.0) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.1.0) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 4.1.0) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.1.0) ## qvalue 2.26.0 2021-10-26 [1] Bioconductor ## R6 2.5.1 2021-08-19 [1] CRAN (R 4.1.0) ## RAIDA 1.0 2022-03-14 [1] local ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.1.0) ## Rcpp * 1.0.10 2023-01-22 [1] CRAN (R 4.1.2) ## RcppZiggurat 0.1.6 2020-10-20 [1] CRAN (R 4.1.0) ## RCurl 1.98-1.6 2022-02-08 [1] CRAN (R 4.1.2) ## readr * 2.1.2 2022-01-30 [1] CRAN (R 4.1.2) ## remotes 2.4.2 2021-11-30 [1] CRAN (R 4.1.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.1.0) ## reticulate 1.24 2022-01-26 [1] CRAN (R 4.1.2) ## Rfast 2.0.6 2022-02-16 [1] CRAN (R 4.1.2) ## rhdf5 2.38.1 2022-03-10 [1] Bioconductor ## rhdf5filters 1.6.0 2021-10-26 [1] Bioconductor ## Rhdf5lib 1.16.0 2021-10-26 [1] Bioconductor ## rlang 1.0.6 2022-09-24 [1] CRAN (R 4.1.2) ## rmarkdown 2.17 2022-10-07 [1] CRAN (R 4.1.2) ## robustbase 0.93-9 2021-09-27 [1] CRAN (R 4.1.0) ## rpart 4.1.16 2022-01-24 [1] CRAN (R 4.1.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.1.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.1.0) ## RSQLite 2.2.10 2022-02-17 [1] CRAN (R 4.1.2) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.1.0) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.1.0) ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.1.0) ## RVenn 1.1.0 2019-07-18 [1] CRAN (R 4.1.0) ## rvest 1.0.2 2021-10-16 [1] CRAN (R 4.1.0) ## S4Vectors * 0.32.3 2021-11-21 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.1.0) ## sass 0.4.2 2022-07-16 [1] CRAN (R 4.1.2) ## scales 1.2.1 2022-08-20 [1] CRAN (R 4.1.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] CRAN (R 4.1.0) ## sf 1.0-7 2022-03-07 [1] CRAN (R 4.1.2) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.1.0) ## sjlabelled 1.2.0 2022-04-10 [1] CRAN (R 4.1.2) ## sjmisc 2.8.9 2021-12-03 [1] CRAN (R 4.1.0) ## stringi 1.7.8 2022-07-11 [1] CRAN (R 4.1.2) ## stringr 1.4.1 2022-08-20 [1] CRAN (R 4.1.2) ## SummarizedExperiment * 1.24.0 2021-10-26 [1] Bioconductor ## survival 3.4-0 2022-08-09 [1] CRAN (R 4.1.2) ## svglite 2.1.0 2022-02-03 [1] CRAN (R 4.1.2) ## systemfonts 1.0.4 2022-02-11 [1] CRAN (R 4.1.2) ## tensorA 0.36.2 2020-11-19 [1] CRAN (R 4.1.0) ## testthat 3.1.2 2022-01-20 [1] CRAN (R 4.1.2) ## TH.data 1.1-0 2021-09-27 [1] CRAN (R 4.1.0) ## tibble * 3.1.8 2022-07-22 [1] CRAN (R 4.1.2) ## tidyr * 1.2.0 2022-02-01 [1] CRAN (R 4.1.2) ## tidyselect 1.1.2 2022-02-21 [1] CRAN (R 4.1.2) ## truncnorm 1.0-8 2018-02-27 [1] CRAN (R 4.1.0) ## tzdb 0.3.0 2022-03-28 [1] CRAN (R 4.1.2) ## umap 0.2.8.0 2022-03-23 [1] CRAN (R 4.1.2) ## units 0.8-0 2022-02-05 [1] CRAN (R 4.1.2) ## usethis * 2.1.5 2021-12-09 [1] CRAN (R 4.1.0) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.1.0) ## uuid 1.0-3 2021-11-01 [1] CRAN (R 4.1.0) ## vctrs 0.5.1 2022-11-16 [1] CRAN (R 4.1.2) ## vegan * 2.5-7 2020-11-28 [1] CRAN (R 4.1.0) ## VennDiagram * 1.7.3 2022-04-12 [1] CRAN (R 4.1.2) ## viridis * 0.6.2 2021-10-13 [1] CRAN (R 4.1.0) ## viridisLite * 0.4.0 2021-04-13 [1] CRAN (R 4.1.0) ## vroom 1.5.7 2021-11-30 [1] CRAN (R 4.1.0) ## webshot 0.5.3 2022-04-14 [1] CRAN (R 4.1.2) ## withr 2.5.0 2022-03-03 [1] CRAN (R 4.1.2) ## Wrench 1.12.0 2021-10-26 [1] Bioconductor ## xfun 0.34 2022-10-18 [1] CRAN (R 4.1.2) ## XMAS2 * 2.1.8.7 2023-01-06 [1] local ## XML 3.99-0.9 2022-02-24 [1] CRAN (R 4.1.2) ## xml2 1.3.3 2021-11-30 [1] CRAN (R 4.1.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.1.0) ## XVector 0.34.0 2021-10-26 [1] Bioconductor ## yaml 2.3.6 2022-10-18 [1] CRAN (R 4.1.2) ## zCompositions 1.4.0 2022-01-13 [1] CRAN (R 4.1.2) ## zlibbioc 1.40.0 2021-10-26 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.1.0) ## ## [1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library ## ## ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── References "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
